<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>千万级数据导出</title>
      <link href="2023/08/08/qian-wan-ji-shu-ju-dao-chu/"/>
      <url>2023/08/08/qian-wan-ji-shu-ju-dao-chu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/excelTest.xlsx"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excelTest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span>    <span class="token comment">//responseHeader(response,"模板");</span>    <span class="token keyword">long</span> t1<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ExcelWriter</span> excelWriter <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WriteSheet</span> writeSheet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writeSheet<span class="token punctuation">.</span><span class="token function">setSheetNo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        writeSheet<span class="token punctuation">.</span><span class="token function">setSheetName</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        excelWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>writeSheet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    excelWriter<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> t2<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2-t1 = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//应该查询数据</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308081913976.png" alt="image-20230808191339379"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀项目</title>
      <link href="2023/08/08/miao-sha-xiang-mu/"/>
      <url>2023/08/08/miao-sha-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="2023/08/03/fen-bu-shi-shi-wu/"/>
      <url>2023/08/03/fen-bu-shi-shi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><p>在数据库中存储数据        创建seata数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> global_table<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> global_table <span class="token punctuation">(</span>    xid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    transaction_id <span class="token keyword">bigint</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">tinyint</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    application_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transaction_service_group <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transaction_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    timeout <span class="token keyword">int</span><span class="token punctuation">,</span>    begin_time <span class="token keyword">bigint</span><span class="token punctuation">,</span>    application_data <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gmt_create <span class="token keyword">datetime</span><span class="token punctuation">,</span>    gmt_modified <span class="token keyword">datetime</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> idx_gmt_modified_status <span class="token punctuation">(</span>gmt_modified<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> idx_transaction_id <span class="token punctuation">(</span>transaction_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> branch_table<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> branch_table <span class="token punctuation">(</span>    branch_id <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    xid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    transaction_id <span class="token keyword">bigint</span> <span class="token punctuation">,</span>    resource_group_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    resource_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    lock_key <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    branch_type <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>    client_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    application_data <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gmt_create <span class="token keyword">datetime</span><span class="token punctuation">,</span>    gmt_modified <span class="token keyword">datetime</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>branch_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> idx_xid <span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> lock_table<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> lock_table <span class="token punctuation">(</span>    row_key <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    xid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transaction_id long <span class="token punctuation">,</span>    branch_id long<span class="token punctuation">,</span>    resource_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    table_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    pk <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    gmt_create <span class="token keyword">datetime</span> <span class="token punctuation">,</span>    gmt_modified <span class="token keyword">datetime</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>row_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031517171.png" alt="image-20230803151743057"></p><h2 id="Seata数据库准备"><a href="#Seata数据库准备" class="headerlink" title="Seata数据库准备"></a>Seata数据库准备</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> seata_order<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> seata_storage<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> seata_account<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在seata_order库下创建t_order表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_order<span class="token punctuation">(</span>    <span class="token string">'id'</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token string">'user_id'</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>    <span class="token string">'product_id'</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'产品id'</span><span class="token punctuation">,</span>    <span class="token string">'count'</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span>    <span class="token string">'money'</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'金额'</span><span class="token punctuation">,</span>    <span class="token string">'status'</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态：0：创建中；1：已完结'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">7</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel熔断与限流</title>
      <link href="2023/08/03/sentinel-rong-duan-yu-xian-liu/"/>
      <url>2023/08/03/sentinel-rong-duan-yu-xian-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308030921131.png" alt="主要特征"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --permanent --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcpfirewall-cmd --zone<span class="token operator">=</span>public --permanent --add-port<span class="token operator">=</span><span class="token number">8719</span>/tcpfirewall-cmd --zone<span class="token operator">=</span>public --permanent --add-port<span class="token operator">=</span><span class="token number">8720</span>/tcpfirewall-cmd --reloadfirewall-cmd --list-alljava -jar sentinel-dashboard-1.8.1.jar<span class="token comment"># 后台启动</span><span class="token function">nohup</span> java -jar sentinel-dashboard-1.8.1.jar<span class="token comment"># 官网说可以用</span>-Dserver.port<span class="token operator">=</span><span class="token number">8480</span> <span class="token comment"># 指定控制台的端口为8480</span> -Dcsp.sentinel.dashboard.server<span class="token operator">=</span>localhost:8480 <span class="token comment"># 指定要被哪个控制台监控（这里指定的是自己监控自己）</span> -Dproject.name<span class="token operator">=</span>sentinel-dashboard <span class="token comment"># 指定实例名称（名称会在控制台左侧以菜单显示）</span> -Dsentinel.dashboard.auth.username<span class="token operator">=</span>sentinel <span class="token comment"># 设置登录的帐号为：sentinel</span> -Dsentinel.dashboard.auth.password<span class="token operator">=</span><span class="token number">123456</span> <span class="token comment"># 设置登录的密码为：123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我这个sentinel是部署在服务器端的</p><blockquote><p>sentinel部署到本地会好一点，端口可以直接访问，部署到服务器端，Sentinel访问本地找不到，我这里做了内网穿透；<strong>可以用，好使</strong></p></blockquote><p>映射地图</p><table><thead><tr><th></th><th>本地端口</th><th>服务器映射端口</th></tr></thead><tbody><tr><td></td><td>127.0.0.1:8401</td><td>101.200.40.242:18401</td></tr><tr><td></td><td>127.0.0.1:8719</td><td>101.200.40.242:18719</td></tr></tbody></table><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="规则简介"><a href="#规则简介" class="headerlink" title="规则简介"></a>规则简介</h2><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031102398.png" alt="image-20230803110228279"></p><p>application.yml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8401spring:  application:    name: cloudalibaba-sentinel-service  cloud:    nacos:      discovery:        server-addr: 101.200.40.242:18848    sentinel:      transport:        dashboard: 101.200.40.242:8080        port: 8719        clientIp: 101.200.40.242:18719      datasource:        ds1:          nacos:            server-addr: 101.200.40.242:18848            dataId: cloudalibaba-sentinel-service            groupId: DEFAULT_GROUP            data-type: json            rule-type: flowmanagement:  endpoints:    web:      exposure:        include: '*'feign:  sentinel:    enabled: true # 激活Sentinel对Feign的支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SentinelMain8401.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelMain8401</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SentinelMain8401</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FlowLimitController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"-------------testA"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">".....testB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"-----------testB"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h2><h3 id="QPS限流"><a href="#QPS限流" class="headerlink" title="QPS限流"></a>QPS限流</h3><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031057291.png" alt="image-20230803105759196"></p><table><thead><tr><th>正常</th><th>限流</th></tr></thead><tbody><tr><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031056174.png" alt="image-20230803105627020"></td><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031056279.png" alt="image-20230803105611151"></td></tr></tbody></table><h3 id="线程限流"><a href="#线程限流" class="headerlink" title="线程限流"></a>线程限流</h3><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031105607.png" alt="image-20230803110557535"></p><h3 id="关联限流"><a href="#关联限流" class="headerlink" title="关联限流"></a>关联限流</h3><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031105071.png" alt="image-20230803110502971"></p><p>通过postman 设置20个线程每0.3秒访问一下testB；然后testA就会被限流</p><p>设置postman</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031129094.png" alt="image-20230803112905941"></p><p>访问testA</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031126223.png" alt="image-20230803112608987"></p><h3 id="流控-预热"><a href="#流控-预热" class="headerlink" title="流控 预热"></a>流控 预热</h3><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031130734.png" alt="image-20230803113039606"></p><h3 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h3><p><img src="C:/Users/14174/AppData/Roaming/Typora/typora-user-images/image-20230803113333716.png" alt="image-20230803113333716"></p><h3 id="Sentinel降级"><a href="#Sentinel降级" class="headerlink" title="Sentinel降级"></a>Sentinel降级</h3><h4 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h4><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031139453.png" alt="image-20230803113943236"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-Dcsp.sentinel.statistic.max.rt<span class="token operator">=</span>XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jmeter设置</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031202642.png" alt="image-20230803120212494"></td><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031202632.png" alt="image-20230803120244455"></td></tr></tbody></table><p>控制台输出</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031200810.png" alt="image-20230803120040219"></p><p>浏览器输出</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031201089.png"></p><p>关闭jemter10个线程之后，可以正常访问</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031203721.png" alt="image-20230803120349613"></p><h4 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h4><p>更改controller中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testD"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testD异常比例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"----------testD"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置降级规则</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031403812.png" alt="image-20230803140344057"></p><p>开启jmeter</p><p>访问浏览器</p><p><img src="C:/Users/14174/AppData/Roaming/Typora/typora-user-images/image-20230803140552408.png" alt="image-20230803140552408"></p><h4 id="异常比数"><a href="#异常比数" class="headerlink" title="异常比数"></a>异常比数</h4><p>添加配置</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031407398.png" alt="image-20230803140724257"></p><p>访问超过五次就会报错</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031410842.png" alt="image-20230803141055737"></p><h3 id="Sentinel-热点-key"><a href="#Sentinel-热点-key" class="headerlink" title="Sentinel 热点 key"></a>Sentinel 热点 key</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testHotKey"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"deal_testHotKey"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHotKey</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p1<span class="token punctuation">,</span>    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p2"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"----------------testHotKey"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deal_testHotKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token class-name">String</span> p2<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"----------------deal_testHotKey"</span><span class="token punctuation">;</span><span class="token comment">//sentinel 系统默认的提示 Blocked by Sentinel (flow limiting)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加配置</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031419033.png" alt="image-20230803141900860"></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031420715.png" alt="image-20230803142032614"></td><td><img src="C:/Users/14174/AppData/Roaming/Typora/typora-user-images/image-20230803142015199.png" alt="image-20230803142015199"></td></tr></tbody></table><h4 id="当参数为5的时候，限流阈值为200"><a href="#当参数为5的时候，限流阈值为200" class="headerlink" title="当参数为5的时候，限流阈值为200"></a>当参数为5的时候，限流阈值为200</h4><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031424607.png" alt="image-20230803142449431"></p><table><thead><tr><th>当参数不为5时，多次点击</th><th>参数时5时，多次点击</th></tr></thead><tbody><tr><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031425971.png" alt="image-20230803142557877"></td><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031426125.png" alt="image-20230803142631042"></td></tr></tbody></table><blockquote><p>注意：</p><p>​    @SentinelResource</p><p>​    处理的是sentinel控制台配置的违规情况，有回调方法配置的兜底处理</p><p>运行时异常 @SentinelResource是不管</p></blockquote><h3 id="Sentinel-系统规则"><a href="#Sentinel-系统规则" class="headerlink" title="Sentinel 系统规则"></a>Sentinel 系统规则</h3><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031431395.png" alt="image-20230803143139227"></p><h3 id="Sentinel-Resource-配置"><a href="#Sentinel-Resource-配置" class="headerlink" title="Sentinel Resource 配置"></a>Sentinel Resource 配置</h3><h4 id="按资源名称限流-后续处理"><a href="#按资源名称限流-后续处理" class="headerlink" title="按资源名称限流+后续处理"></a>按资源名称限流+后续处理</h4><p>创建新的controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byResource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"handleException"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"按资源名称限流测试OK"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">2023L</span><span class="token punctuation">,</span><span class="token string">"serial001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 服务不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问/byResource</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031439917.png" alt="image-20230803143942794"></p><p>配置流控规则</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031442048.png" alt="image-20230803144206876"></p><p>限流</p><p><img src="C:/Users/14174/AppData/Roaming/Typora/typora-user-images/image-20230803144253860.png" alt="image-20230803144253860"></p><h4 id="按url地址限流-后续处理"><a href="#按url地址限流-后续处理" class="headerlink" title="按url地址限流+后续处理"></a>按url地址限流+后续处理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rateLimit/byUrl"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byUrl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"按URL地址限流测试OK"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">2023L</span><span class="token punctuation">,</span><span class="token string">"serial002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问/rateLimit/byUrl</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031446532.png" alt="image-20230803144638423"></p><p>添加配置</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031448892.png" alt="image-20230803144809705"></p><p>再次访问，并多次刷新；能访问到和不能访问</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031448435.png" alt="image-20230803144856348"></p><h3 id="自定义限流处理逻辑"><a href="#自定义限流处理逻辑" class="headerlink" title="自定义限流处理逻辑"></a>自定义限流处理逻辑</h3><p>创建CustomerBlockHandler类用于自定义限流处理逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerBlockHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerEXception</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"自定义限流处理信息1   -----1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerEXception2</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"自定义限流处理信息2   ------2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"rateLimit/customerBlockHandler"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"customerBlockHandler"</span><span class="token punctuation">,</span>                  blockHandlerClass <span class="token operator">=</span> <span class="token class-name">CustomerBlockHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment">//指定处理方法类型</span>                  blockHandler <span class="token operator">=</span> <span class="token string">"handlerEXception"</span><span class="token comment">//指定处理方法函数</span>                 <span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">customerBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"客户自定义限流处理逻辑"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">2023L</span><span class="token punctuation">,</span><span class="token string">"serial003"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问/rateLimit/customerBlockHandler</p><p>添加配置</p><p><img src="C:/Users/14174/AppData/Roaming/Typora/typora-user-images/image-20230803150017356.png" alt="image-20230803150017356"></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031459890.png" alt="image-20230803145925760"></td><td><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308031459192.png" alt="image-20230803145941074"></td></tr></tbody></table><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos2.2.0+nginx1.14.1-三台集群搭建</title>
      <link href="2023/08/02/nacos2-2-0-nginx1-14-1-san-tai-ji-qun-da-jian/"/>
      <url>2023/08/02/nacos2-2-0-nginx1-14-1-san-tai-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="安装java-jdk"><a href="#安装java-jdk" class="headerlink" title="安装java jdk"></a>安装java jdk</h2><p>查看系统是否自带</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa <span class="token operator">|</span><span class="token function">grep</span> java<span class="token function">rpm</span> -qa <span class="token operator">|</span><span class="token function">grep</span> jdk<span class="token function">rpm</span> -qa <span class="token operator">|</span><span class="token function">grep</span> gcj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 如果有输出信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rpm</span> -e --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装java</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list java-1.8*yum <span class="token function">install</span> java-1.8.0-openjdk* -yjava -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装nacos-单机部署"><a href="#安装nacos-单机部署" class="headerlink" title="安装nacos,单机部署"></a>安装nacos,单机部署</h2><blockquote><p>这里我使用的是nacos2.2.0   </p></blockquote><p>安装nacos，并单机部署，运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> nacos-server-2.2.0.zip<span class="token builtin class-name">cd</span> nacos/bin<span class="token function">sh</span> startup.sh -m standalone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>默认轮询机制：   </p><p>RoundRobinRule  轮询   </p><p>RandomRule     随机   </p><p>RetryRule   先安装</p><p>RoundRobinRule  的策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用的服务   </p><p>WeightedResponseTimeRule  对RoundRobinRule的扩展，响应速度越快的实例选中权重越大，越容易被选择  </p><p>BestAvailableRule  会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选中一个并发量最小的服务。  </p><p>AvailabilityFilteringRule 先过滤掉故障实例，再选择并发较小的实例。   ZoneAvoidanceRule  默认规则，复合判断server所在区域的性能和server的可用性选择服务器。</p></blockquote><blockquote><p>单机部署 没有用mysql数据库，默认Nacos使用嵌入式数据库实现数据的存储。</p></blockquote><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop nginx<span class="token function">sudo</span> systemctl disable nginx<span class="token function">sudo</span> yum remove nginx<span class="token function">sudo</span> <span class="token function">rm</span> -rf /etc/nginx<span class="token function">sudo</span> yum <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nacos集群部署（Nacos安装目录-Develop-nacos）"><a href="#Nacos集群部署（Nacos安装目录-Develop-nacos）" class="headerlink" title="Nacos集群部署（Nacos安装目录/Develop/nacos）"></a>Nacos集群部署（Nacos安装目录/Develop/nacos）</h2><p><strong>为什么我的显示的是四个，用的都是云服务器，有一个是服务器的内网IP的nacos</strong></p><blockquote><p>如果启动多个默认配置下的nacos节点，数据存储就存在了<strong>一致性问题</strong>，为了解决这个问题 ，Nacos采用了集中存储的方式来支持集群化部署，目前只支持MySQL</p><p>Naocs支持三种部署模式：</p><p>​    1、单机模式-用于测试和单机使用</p><p>​    2、集群模式-多用于生产环境，确保高可用</p><p>​    3、多集群模式-多用于数据中心</p><p>单机模式支持mysql   在0.7版本增加了支持mysql数据源</p><p>../nacos/conf/application.properties</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308022147178.png" alt="image-20230802214752096"></p></blockquote><p><strong>现在正式进入正题nacos集群搭建</strong></p><table><thead><tr><th>服务器名</th><th>服务端口</th><th>grpc协议端口+1000</th><th>grpc port for server +1001</th></tr></thead><tbody><tr><td>Nacos_ali_1：101.200.40.242（nacos）</td><td>8848</td><td>9848</td><td>9849</td></tr><tr><td>Nacos_ali_2：49.232.522.36(naocs)</td><td>8848</td><td>9848</td><td>9849</td></tr><tr><td>Nacos_qq_1：121.41.171.66(nacos)</td><td>8848</td><td>9848</td><td>9849</td></tr><tr><td>Nginx：101.200.40.242（nginx)</td><td>18848</td><td>19848</td><td>19849</td></tr></tbody></table><h3 id="运行三台Nacos服务器"><a href="#运行三台Nacos服务器" class="headerlink" title="运行三台Nacos服务器"></a>运行三台Nacos服务器</h3><blockquote><p>运行之前保证三台服务器都可以访问同一数据库服务器</p></blockquote><p>将单机部署的nacos文件停掉</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Develop/nacos/conf<span class="token function">cp</span> cluster.conf.example cluster.conf<span class="token function">vi</span> cluster.conf<span class="token comment">## 下边集群的IP放上  三个nacos服务器host:port</span><span class="token number">101.200</span>.40.242:8848<span class="token number">49.232</span>.52.36:8848<span class="token number">121.41</span>.171.66:8848<span class="token comment"># 三台服务器都运行</span><span class="token builtin class-name">cd</span> /Develop/nacos/bin<span class="token comment"># 先暂停服务</span>./shutdown.sh<span class="token comment"># 开启集群</span>./startup.sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随便找一台已经运行的服务器可以看出</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308022200497.png" alt="image-20230802220033372"></p><h3 id="接下来就是最坑的nginx对已经安装Nacos服务的进行负载均衡"><a href="#接下来就是最坑的nginx对已经安装Nacos服务的进行负载均衡" class="headerlink" title="接下来就是最坑的nginx对已经安装Nacos服务的进行负载均衡"></a>接下来就是最坑的nginx对已经安装Nacos服务的进行负载均衡</h3><blockquote><p><strong>我这个并没有设置raft,后边添加了raft,也不知道配好了没，添不添加raft，nginx都可以负载均衡，等后边有时间在测试一下</strong></p><p>粘贴代码的时候注意进行*的替换</p><p>坑点:</p><ol><li>Nacos Server 端口： Nacos Server 端口是用于提供 HTTP API 的端口。通过该端口，可以进行配置管理和服务发现相关的操作，如发布、获取配置信息，注册和发现服务等。这是 Nacos 的主要对外交互端口，一般是用户应用程序和 Nacos Server 之间进行通信的端口。</li><li>Raft 协议端口： Raft 协议是用于 Nacos 的高可用集群的一种一致性协议。Nacos 使用 Raft 协议来保证集群中的各个节点之间数据的一致性和高可用性。Raft 协议端口用于各个节点之间进行数据同步和选举，以确保集群中的节点能够保持一致的状态。</li><li>gRPC 端口： gRPC 是一种高性能、开源的 RPC 框架，它支持多种编程语言，并且在 Nacos 中被用于内部节点之间的通信。gRPC 端口用于 Nacos 各个节点之间进行高效的、二进制的通信，如节点注册、心跳等。</li></ol></blockquote><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308022211744.png" alt="官网截图"></p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events {    worker_connections 1024;}http {    include /etc/nginx/conf.d/*.conf;    upstream nacos-cluster {        ip_hash;        server 101.200.40.242:8848;        server 49.232.52.36:8848;        server 121.41.171.66:8848;    }    server {        listen 18848;        server_name localhost;        location /nacos {            proxy_pass http://nacos-cluster/nacos;        }    }}stream {    # 偏移1000    upstream nacos-grpc {        server 101.200.40.242:9848;        server 49.232.52.36:9848;        server 121.41.171.66:9848;    }    server {        listen 19848;        proxy_pass nacos-grpc;    }    # 偏移1001    upstream nacos-tcp-19849 {        server 101.200.40.242:9849;        server 49.232.52.36:9849;        server 121.41.171.66:9849;    }    server {        listen 19849;        proxy_pass nacos-tcp-19849;    }    # 偏移-1000    upstream nacos-tcp-17848{        server 101.200.40.242:7848;        server 49.232.52.36:7848;        server 121.41.171.66:7848;    }    server{        listen 17848;        proxy_pass nacos-tcp-17848;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后你就可以看到了：</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308022221695.png" alt="image-20230802222112566"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1、mysql访问次数太多"><a href="#1、mysql访问次数太多" class="headerlink" title="1、mysql访问次数太多"></a>1、mysql访问次数太多</h2><blockquote><p>问题描述</p><p>[root@VM-8-8-centos ~]# mysql -h 101.200.40.242 -u root -p<br>Enter password:<br>ERROR 1129 (HY000): Host ‘49.232.52.36’ is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’</p><p>[root@VM-8-8-centos ~]# mysql -h 101.200.40.242 -u root -p 输入密码： 错误 1129 (HY000)：由于连接错误过多，主机 ‘49.232.52.36’ 被阻止；使用 ‘mysqladmin flush-hosts’ 来解除阻止。</p></blockquote><p>解决方法：</p><p>1、换个数据库</p><p>2、等事件结束</p><p>3、清除被阻止的主机列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqladmin flush-hosts -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、-nginx配置文件问题"><a href="#2、-nginx配置文件问题" class="headerlink" title="2、 nginx配置文件问题"></a>2、 nginx配置文件问题</h2><p>用的nacos2.2.0没有想到引入了新的raft和grpc协议，要多开放几个节点</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/padazala/p/17353132.html">Nginx + Nacos2.x集群配置 - 二先森 - 博客园 (cnblogs.com)</a></p><p><a href="https://nacos.io/zh-cn/docs/v2/upgrading/2.0.0-compatibility.html">Nacos 2.0.0 兼容性文档</a></p><p><a href="https://blog.csdn.net/qq_35040959/article/details/126126865">Nacos 原理 Jraft Distro Grpc 持续跟新中…_nacos jraft_不学会Ⅳ的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/whgk/p/14616247.html">Nacos 2.0 正式发布，性能提升了 10 倍！！ - 有梦想的老王 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_21046665/article/details/120722942">超高性能rpc框架之gRPC 快速整合gRPC+nacos+springCloud_nacos grpc_川哟的博客-CSDN博客</a></p><p><a href="https://developer.aliyun.com/article/780680">支持 gRPC 长链接，深度解读 Nacos 2.0 架构设计及新模型-阿里云开发者社区 (aliyun.com)</a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>minio安装及集群部署</title>
      <link href="2023/07/28/minio-ji-qun-da-jian/"/>
      <url>2023/07/28/minio-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Pv411679M/?is_story_h5=false&amp;p=1&amp;share_from=ugc&amp;share_medium=iphone&amp;share_plat=ios&amp;share_session_id=9BE3E6D5-E6BC-4A40-AC2A-B2F821AA5E80&amp;share_source=QQ&amp;share_tag=s_i&amp;timestamp=1667534094&amp;unique_k=z1tzNID">MINIO系列之二：部署MINIO4节点分布式服务并用nginx做Web负载均衡_哔哩哔哩_bilibili</a></p><pre class="line-numbers language-note" data-language="note"><code class="language-note">下载minioewget https://dl.min.io/server/minio/release/linux-amd64/minio查看minio等级minio --versionfirewall-cmd --permanent --zone=public --add-port=9000/tcpfirewall-cmd --reloadfirewall-cmd --list-allvi /etc/hosts192.168.1.101 minio-node-101192.168.1.102 minio-node-102192.168.1.103 minio-node-103192.168.1.104 minio-node-104hostnamectl set-hostname minio-node-101测试hosts的连通性ping minio-node-1修改系统最大文件数echo "* soft nofile 65535" &gt;&gt; /etc/security/limits.confecho "* hard nofile 65535" &gt;&gt; /etc/security/limits.conf步骤二1、每台虚拟机创建四个存储目录用于提供存储空间*这下一步之前需要看问题 ①mkdir /data/data1 /data/data2 /data/data3 /data/data4chmod 777 /data/data1chmod 777 /data/data2chmod 777 /data/data3chmod 777 /data/data42、设置自定义密钥export MINIO_ACCESS_KEY=minio2022export MINIO_SECRET_KEY=test123lyz3、在每台虚拟机上运行下列命令启动多节点分布式环境minio server http://minio-node-{101...104}/data/data{1...4}4、客户端程序mc简单测试mc  config host add minio http://mminio-node-1:9000 minio2022 test123lyzmc mb minio/media  #创建桶mc cp ~/Downloads/BatFriend.mp4 minio/media #上传mp4mc ls minio/media # 上传结果步骤三配置nginx负载均衡，指定8088端口访问：1、安装nginx并在防火墙打开8088端口：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>1，不能在根目录</p><pre class="line-numbers language-none"><code class="language-none">启动报错Drive `http://minio-node-104:9000/opt/data4` is part of root drive, will not be used (*errors.errorString)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>现在的 minio 版本强制要求不使用 root 根目录的磁盘。源码增加强制限制的时间是 Commits on Feb 13, 2022 (Always check for root disks unless MINIO_CI_CD is set)。因此要使得集群部署成功必须使用挂载非 root 盘的目录。</p></blockquote><p>问题提出：</p><p><a href="https://my.oschina.net/knshsg/blog/5559386">https://my.oschina.net/knshsg/blog/5559386</a></p><p>问题拟解决：</p><p><a href="https://blog.csdn.net/weixin_50464560/article/details/115714884">(3条消息) 详解VMware虚拟机中添加新硬盘并挂载的方法_J0hnson666的博客-CSDN博客_虚拟机挂载硬盘</a></p><pre class="line-numbers language-note" data-language="note"><code class="language-note">fdisk -lfdisk /dev/sdbm n 在设置那一部分全部直接点击回车，点完之后等下次需要输入m获取帮助的 输入w格式化：mkfs -t ext3 /dev/sdb1挂载 mkdir /data &amp;&amp; mount /dev/sdb1  /data自动挂载 vim /etc/fstab/dev/sdb1    /media（这个挂载的目录你自己设置即可）   ext3  defaults    0    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@</p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloud学习</title>
      <link href="2023/07/28/cloud-xue-xi/"/>
      <url>2023/07/28/cloud-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="八、熔断机制"><a href="#八、熔断机制" class="headerlink" title="八、熔断机制"></a>八、熔断机制</h1><blockquote><p>熔断机制是对雪崩效应的一种微服务链路保护机制。当链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快读返回错误的响应信息  </p><p>当检测到该节点微服务调用响应正常后，恢复调用链路</p></blockquote><h1 id="GateWay新一代网关"><a href="#GateWay新一代网关" class="headerlink" title="GateWay新一代网关"></a>GateWay新一代网关</h1><blockquote><p>路由  </p><p>断言 </p><p>过滤</p></blockquote><p>作用</p><p>可以实现   反向代理、鉴权、流量控制、熔断、日志监控等功能</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307281507544.png" alt="动态路由设置"></p><p><strong>注意：</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 9527spring:  application:    name: cloud-gateway  cloud:    gateway:      routes:        - id: payment_route1          uri: lb://CLOUD-PAYMENT-SERVICE # Matches /payment/get/**          predicates:            - Path=/payment/get/**        - id: payment_route2          uri: lb://CLOUD-PAYMENT-SERVICE # Matches /payment/lb/**          predicates:            - Path=/payment/lb/**            # After 属性表示什么时间之后才可以访问            #- After=2023-07-28T15:16:37.485+08:00[Asia/Shanghai]            # cookie中必须有值，值必须是zzyy            #- Cookie=username,zzyy            # 表示请求头必须有这个属性，且该属性值必须是整数            #- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式eureka:  instance:    hostname: cloud-gateway-service  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka# Ribbon configuration for the cloud-payment-servicecloud-payment-service:  ribbon:    ReadTimeout: 5000    ConnectTimeout: 5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307281530431.png" alt="属性解释"></p><p>运行结果：  </p><p>Cookie<img src="https://gitee.com/userlyz/imgs/raw/master/img/202307281531429.png" alt="Cookie配置"></p><p>Hander属性</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307281531668.png" alt="Header属性"></p><h2 id="Gateway的Filter"><a href="#Gateway的Filter" class="headerlink" title="Gateway的Filter"></a>Gateway的Filter</h2><p>创建Filter类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*******全局过滤*********"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username<span class="token operator">=</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户名为空，非法用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果请求地址中有username属性，则正常访问，如果没有则返回406错误</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307281550812.png" alt="控制台输出"></p><h2 id="分布式配置中心"><a href="#分布式配置中心" class="headerlink" title="分布式配置中心"></a>分布式配置中心</h2><blockquote><p>每一个</p></blockquote><p>配置文件优先级</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307281551533.png" alt="配置文件优先级"></p><p>@</p>]]></content>
      
      
      
        <tags>
            
            <tag> cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="2023/07/24/wei-fu-wu/"/>
      <url>2023/07/24/wei-fu-wu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="2023/07/20/mian-shi-ti/"/>
      <url>2023/07/20/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="spring的事务传播机制是什么？"><a href="#spring的事务传播机制是什么？" class="headerlink" title="spring的事务传播机制是什么？"></a>spring的事务传播机制是什么？</h1><p>在Spring中，事务的传播机制定义了在多个事务方法之间如何传播事务。当一个方法调用另一个方法时，如果被调用方法需要事务支持，那么事务的传播机制决定了是否使用调用方的事务或创建一个新的事务。</p><p>Spring定义了多种事务传播机制，以下是其中一些常见的：</p><ol><li>REQUIRED（默认）：如果当前没有事务，就创建一个新的事务；如果当前已经存在事务，就加入到当前事务中。</li><li>REQUIRES_NEW：每次调用该方法都会创建一个新的事务，如果当前已经存在事务，则挂起当前事务。</li><li>SUPPORTS：如果当前有事务，就加入到当前事务中，如果没有事务，就以非事务的方式执行。</li><li>NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，则挂起当前事务。</li><li>MANDATORY：当前必须存在事务，否则抛出异常。</li><li>NEVER：当前必须不存在事务，否则抛出异常。</li><li>NESTED：嵌套事务，如果当前有事务，则嵌套在当前事务中，如果没有事务，则创建一个新的事务。</li></ol><p>Spring的事务传播机制允许我们在不同层级的方法之间进行事务管理，以保证数据的一致性和完整性。通过合理的选择事务传播机制，我们可以灵活地管理事务边界，从而确保业务逻辑的正确执行。</p><h1 id="b树、b-树、红黑树有什么区别"><a href="#b树、b-树、红黑树有什么区别" class="headerlink" title="b树、b+树、红黑树有什么区别"></a>b树、b+树、红黑树有什么区别</h1><p>B树、B+树和红黑树都是常见的自平衡二叉查找树，用于在数据库和文件系统等数据结构中进行索引操作。它们在实现上有一些区别，下面是它们的主要区别：</p><ol><li>B树：<ul><li>B树是一种多叉树，每个节点可以有多个子节点，通常在实现中有一个上限，即节点的最大子节点数目。</li><li>每个节点除了包含关键字（key）和对应的值（value）外，还包含了指向子节点的指针。</li><li>B树适用于在磁盘等外存储设备上进行索引操作，因为每个节点可以存储多个关键字，从而减少了磁盘I/O次数，提高了查询效率。</li><li>B树的节点分裂和合并操作相对较复杂。</li></ul></li><li>B+树：<ul><li>B+树是B树的变体，也是一种多叉树结构，但与B树不同，B+树的内部节点不存储数据，只存储关键字。</li><li>所有的数据都存储在叶子节点上，叶子节点之间通过链表连接，形成一个有序的数据列表。</li><li>B+树在查询过程中只需要遍历叶子节点即可，查询效率更高。</li><li>B+树适用于数据库索引等场景，常用于支持范围查询。</li></ul></li><li>红黑树：<ul><li>红黑树是一种二叉查找树，每个节点上都有一个额外的存储位表示节点的颜色，可以是红色或黑色。</li><li>红黑树满足以下性质：<ol><li>节点是红色或黑色。</li><li>根节点是黑色。</li><li>所有叶子节点（NIL节点）是黑色。</li><li>如果一个节点是红色，其子节点必须是黑色。</li><li>从任意节点到其每个叶子节点的所有路径上，黑色节点的数量必须相同。</li></ol></li><li>红黑树在插入和删除操作后需要通过旋转和重新着色来维持平衡。</li></ul></li></ol><p>总结：B树和B+树适用于外存储设备上的索引操作，B树适用于点查询，而B+树适用于范围查询。红黑树适用于内存中的索引操作，它通过保持平衡性来保证在各种操作下的较稳定的性能。</p><h1 id="mybits-二级缓存"><a href="#mybits-二级缓存" class="headerlink" title="mybits 二级缓存"></a>mybits 二级缓存</h1><p>MyBatis是一个开源的Java持久层框架，它提供了多种缓存机制来提高数据库查询性能。其中，二级缓存是MyBatis的一个重要特性，用于缓存查询结果，避免频繁地访问数据库，从而提高查询效率。</p><p>二级缓存是基于Mapper级别的缓存，可以跨越SqlSession的生命周期，在不同的SqlSession之间共享缓存数据。当一个Mapper的查询结果被缓存后，下次再执行相同的查询时，MyBatis会直接从缓存中获取结果，而不会再去执行数据库查询操作，从而节省了数据库访问时间。</p><p>MyBatis的二级缓存默认是基于内存的缓存实现，可以通过配置不同的缓存实现来支持分布式缓存等场景。常见的二级缓存实现有：</p><ul><li>PerpetualCache：默认的基于内存的缓存实现。</li><li>Ehcache：支持分布式缓存的实现，可以将缓存数据放置在内存或者磁盘上。</li><li>RedisCache：使用Redis作为缓存存储，支持分布式环境下的缓存共享。</li></ul><p>需要注意的是，虽然二级缓存可以提高查询性能，但也有一些需要注意的点：</p><ul><li>缓存数据的更新和失效：当数据发生变化时，需要手动刷新缓存或者设置合理的缓存失效时间，避免数据不一致的问题。</li><li>缓存的内存管理：缓存数据存放在内存中，如果缓存数据过多，可能会导致内存溢出的问题。因此，需要合理设置缓存大小和淘汰策略。</li></ul><p>总体来说，MyBatis的二级缓存是一个非常有用的功能，可以在适当的场景下显著提升数据库查询性能。但在使用时需要根据具体情况进行配置和管理，避免潜在的缓存问题。</p><h1 id="0721考试"><a href="#0721考试" class="headerlink" title="0721考试"></a>0721考试</h1><ol><li>MySql 数据的隔离级别有以下四种：<ul><li>READ UNCOMMITTED（读未提交）：允许一个事务读取另一个事务未提交的数据，存在脏读、不可重复读和幻读问题。</li><li>READ COMMITTED（读已提交）：一个事务在提交后，另一个事务才能读取其数据。可以解决脏读问题，但仍可能出现不可重复读和幻读问题。</li><li>REPEATABLE READ（可重复读）：一个事务在整个过程中多次读取同一数据会保持一致。可以解决脏读和不可重复读问题，但仍可能出现幻读问题。</li><li>SERIALIZABLE（串行化）：最高的隔离级别，每个事务都必须等待其他事务完成后才能执行。可以避免脏读、不可重复读和幻读，但会降低并发性能。</li></ul></li><li>MySql中的回表是指在使用非聚集索引进行查询时，MySQL需要通过索引找到对应的行，并进一步通过主键索引或聚集索引获取完整的行数据。这个过程中需要”回”到原始数据表中去获取缺失的数据列。</li><li>SQL优化包括以下几个方面：<ul><li>选择合适的索引：根据查询的条件和频率选择合适的索引来加快查询速度。</li><li>避免全表扫描：尽量使用索引或优化查询条件，避免对整张表进行全表扫描。</li><li>减少查询次数：通过合并多个查询或使用JOIN等操作来减少查询次数。</li><li>优化查询语句：使用合适的SQL语句，避免使用SELECT *，只查询所需的列。</li><li>适当拆分大表：将大表拆分为多个小表，减少查询的数据量。</li><li>缓存结果：对于频繁的查询，可以将结果缓存在缓存中，避免频繁查询数据库。</li></ul></li><li>冒泡排序的实现：</li></ol><pre class="line-numbers language-none"><code class="language-none">javaCopy codepublic void bubbleSort(int[] arr) {    int n = arr.length;    for (int i = 0; i &lt; n - 1; i++) {        for (int j = 0; j &lt; n - i - 1; j++) {            if (arr[j] &gt; arr[j + 1]) {                int temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.冒泡排序的时间复杂度是O(n^2)。计算方法是，对于长度为n的数组，最坏情况下需要进行n-1次比较，n-2次比较，…，1次比较，共进行(n-1) + (n-2) + … + 1次比较，即等差数列求和，结果为 (n-1) * n / 2，所以时间复杂度是O(n^2)。</p><p>6.Spring是一个完整的Java开发框架，提供了依赖注入（DI）、面向切面编程（AOP）、事务管理、MVC框架等功能。Spring Boot是基于Spring的快速开发框架，旨在简化Spring应用程序的构建和部署过程，提供了自动配置和默认值，让开发者能够更轻松地启动一个生产就绪的Spring应用程序。</p><p>7.SpringBoot自动装配原理是通过Starter、自动配置类和条件注解实现的。它通过分析项目依赖和配置信息，自动选择和应用合适的自动配置类，完成Bean的装配和配置。</p><p>8.循环依赖是指在Spring容器中，两个或多个Bean之间相互引用，形成了循环的依赖关系。为了解决循环依赖，可以使用构造器注入或使用@Lazy注解。构造器注入可以保证Bean在被实例化时就已经得到了所需的依赖。@Lazy注解可以延迟Bean的实例化，从而避免循环依赖问题。</p><p>9.MySQL主从复制搭建步骤包括：</p><ul><li>确保MySQL已安装并配置正确。</li><li>在主服务器上开启二进制日志，并设置server_id。</li><li>创建用于复制的用户，并授权REPLICATION SLAVE权限。</li><li>备份主服务器数据。</li><li>在从服务器上设置server_id，并配置连接主服务器的信息。</li><li>同步主从服务器状态。</li><li>启动从服务器复制进程。</li></ul><p>10.Redis缓存击穿是指在高并发情况下，一个热点数据缓存过期后，大量请求同时访问数据库，造成数据库压力过大，导致系统性能下降。缓存击穿可以通过设置热点数据的永不过期或设置较长的过期时间来解决。</p><p>11.缓存雪崩是指缓存中大量数据在同一时间失效或过期，导致大量请求直接访问数据库，给数据库造成巨大压力，引起系统性能下降或崩溃。缓存雪崩可以通过在设置缓存过期时间时采用随机时间，或使用多级缓存来解决。</p><p>12.缓存穿透是指当一个请求查询一个不存在于缓存和数据库中的数据时，这个请求会穿透缓存直接访问数据库，导致缓存无效，频繁访问数据库，增加数据库负担。缓存穿透可以通过使用布隆过滤器等技术，在缓存层或应用层进行数据校验，过滤掉不存在的数据请求，从而解决。</p><p>13.MyBatis的一级缓存是指在同一个SqlSession中，执行相同的SQL语句时，查询结果会缓存在内存中，下次再执行相同的SQL语句时，会从缓存中获取结果，而不再去数据库查询。一级缓存是默认开启的，其生命周期是与SqlSession绑定的。</p><p>14.MyBatis的二级缓存是指多个SqlSession之间可以共享的缓存，它可以跨越多个SqlSession，需要手动配置启用和配置。二级缓存的作用域是Mapper级别的，由MyBatis的整个SqlSessionFactory来管理。</p><p>15.Spring的事务传播机制是指在多个事务方法调用时，事务应该如何传播和合并。Spring定义了多个事务传播行为，如REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW等。例如，REQUIRED表示当前方法必须运行在事务中，如果已经有一个事务在运行，则加入该事务，如果没有事务，则创建一个新事务。</p><p>Spring定义了多种事务传播机制，以下是其中一些常见的：</p><ol><li>REQUIRED（默认）：如果当前没有事务，就创建一个新的事务；如果当前已经存在事务，就加入到当前事务中。</li><li>REQUIRES_NEW：每次调用该方法都会创建一个新的事务，如果当前已经存在事务，则挂起当前事务。</li><li>SUPPORTS：如果当前有事务，就加入到当前事务中，如果没有事务，就以非事务的方式执行。</li><li>NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，则挂起当前事务。</li><li>MANDATORY：当前必须存在事务，否则抛出异常。</li><li>NEVER：当前必须不存在事务，否则抛出异常。</li><li>NESTED：嵌套事务，如果当前有事务，则嵌套在当前事务中，如果没有事务，则创建一个新的事务。</li></ol><p>16.Redis被设计为单线程的主要原因是为了避免多线程带来的线程安全问题，简化实现并提高性能。Redis使用单线程的事件循环模型，所有的请求都由一个线程处理，这样避免了多线程之间的竞争和同步开销。此外，Redis的主要瓶颈通常是CPU性能，而不是多线程的并发处理能力。</p><p>17.select * from —where name like ‘%王%’ 会引起全表扫描。因为LIKE ‘%王%’的模糊查询无法使用索引，所以MySQL会对表中的每一行都进行模糊匹配，导致全表扫描。</p><p>18.select * from —where name like ‘王%’ 不会引起全表扫描。这种情况下，MySQL可以使用name列的前缀索引，加快查询速度，不会进行全表扫描。</p><p>19.MySql使用B树索引和哈希索引。B树索引用于普通查找和范围查找，适用于数据分布较为均匀的情况。哈希索引适用于等值查找，适用于数据分布较为离散的情况，但不支持范围查找。</p><p>20.红黑树、B树和B+树是数据库索引中常用的树状数据结构：</p><ul><li>红黑树是一种自平衡的二叉查找树，用于实现哈希索引，适合于在内存中使用，查询性能较高。</li><li>B树是一种多路搜索树，用于实现普通索引，适合于磁盘存储，支持随机查找和范围查找。</li><li>B+树是在B树的基础上优化而来，只有叶子节点存储数据，适合于数据库索引，查询性能更稳定，支持顺序查找和范围查找。</li></ul><h1 id="0722"><a href="#0722" class="headerlink" title="0722"></a>0722</h1><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>1、如何设计一个能够支持高并发的系统</p><p>2、sprintboot+redis</p><p>3、rabbitmq 剩余 整合springboot</p><p>4、es</p><p>锁</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307221505646.png" alt="image-20230722150502373"></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307221505768.png" alt="image-20230722150544531"></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307221507132.png" alt="image-20230722150714872"></p><h1 id="0729"><a href="#0729" class="headerlink" title="0729"></a>0729</h1><h2 id="1、什么是回表，怎么减少回表的次数"><a href="#1、什么是回表，怎么减少回表的次数" class="headerlink" title="1、什么是回表，怎么减少回表的次数"></a>1、什么是回表，怎么减少回表的次数</h2><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307291042561.png" alt="image-20230729104203184"></p><h2 id="2、什么是排他锁和共享锁"><a href="#2、什么是排他锁和共享锁" class="headerlink" title="2、什么是排他锁和共享锁"></a>2、什么是排他锁和共享锁</h2><ol><li><p><strong>排他锁（Exclusive Lock）</strong>： 排他锁也称为写锁，它是一种独占锁，当一个事务持有了某个数据对象的排他锁时，其他事务无法同时持有该数据对象的任何锁，包括共享锁和排他锁。排他锁保证了数据的独占性，即在一个事务修改数据时，其他事务无法读取或修改该数据，直到当前事务释放锁。</p><p>排他锁用于保证数据的一致性和完整性，防止并发更新导致数据不一致的情况。但是，排他锁可能会导致并发性降低，因为多个事务无法同时访问相同的数据。</p></li><li><p><strong>共享锁（Shared Lock）</strong>： 共享锁也称为读锁，它是一种共享锁，多个事务可以同时持有相同数据对象的共享锁，但是无法持有排他锁。共享锁用于实现并发读取，即多个事务可以同时读取相同的数据，而不会对数据造成影响。</p><p>共享锁适用于读多写少的场景，多个事务可以同时读取数据，提高了并发性。但是，共享锁可能会导致读取的数据是过去的数据，因为多个事务可以同时读取相同的数据，即使其中某些事务已经对数据进行了修改。</p></li></ol><p>综合来说，排他锁和共享锁是数据库管理并发访问的重要手段。通过适当地使用这两种锁类型，可以平衡并发性和数据一致性之间的关系，保障数据库在多个事务同时进行读写操作时的正确性和效率。</p><h2 id="3、什么是脏读、幻读、不可重复读"><a href="#3、什么是脏读、幻读、不可重复读" class="headerlink" title="3、什么是脏读、幻读、不可重复读"></a>3、什么是脏读、幻读、不可重复读</h2><ol><li><strong>脏读（Dirty Read）</strong>： 脏读指的是一个事务读取了另一个事务未提交的数据。当一个事务读取了另一个事务所做的更新，而这个更新后来由于某些原因被回滚，那么读取到的数据实际上是无效的，是”脏”的。脏读可能导致数据的不一致性，因为读取到的数据可能最终不会被提交。</li><li><strong>幻读（Phantom Read）</strong>： 幻读指的是一个事务在读取数据时，另一个事务插入了新的数据，导致第一个事务读取到了之前不存在的数据。幻读通常发生在范围查询（Range Query）中，当第一个事务读取一批数据时，另一个事务在该批数据范围内插入了新的数据，导致第一个事务再次读取时发现有新增的”幻影”数据。</li><li><strong>不可重复读（Non-repeatable Read）</strong>： 不可重复读指的是一个事务在读取数据后，另一个事务对这些数据进行了修改，导致第一个事务再次读取时发现数据已经发生了变化。不可重复读可能导致数据的一致性问题，因为事务在读取数据时得到的结果并不一致。</li></ol><p>这些问题都是由于数据库事务并发访问时可能引发的隔离性问题。数据库系统采用事务隔离级别来控制这些问题的出现概率，常见的事务隔离级别有四种：读未提交（Read Uncommitted）、读已提交（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable）。不同的隔离级别对应不同的数据一致性和并发性能权衡，开发者需要根据业务需求选择适合的隔离级别。</p><h2 id="4、为什么大厂不建议使用多表join"><a href="#4、为什么大厂不建议使用多表join" class="headerlink" title="4、为什么大厂不建议使用多表join"></a>4、为什么大厂不建议使用多表join</h2><ol><li><strong>性能问题</strong>： 多表join涉及多个表的数据连接操作，如果表中的数据量很大，join操作可能会导致性能下降。数据库的性能在大厂中尤为重要，对于高并发和大数据量的应用来说，频繁的多表join会增加数据库的负担，影响整体的性能。</li><li><strong>维护问题</strong>： 多表join增加了数据库查询的复杂性，使得SQL语句变得复杂难懂，不易于维护和调试。当数据库中的表结构变更时，涉及join的查询语句可能需要进行调整，这对开发人员来说增加了工作量。</li><li><strong>水平扩展问题</strong>： 多表join操作在大规模的水平扩展时可能会变得更加困难。在水平扩展时，需要保持数据的一致性，而join操作跨越多个节点将增加数据同步和维护的复杂性。</li><li><strong>NoSQL趋势</strong>： 随着NoSQL数据库的兴起，越来越多的大厂在一些特定场景下选择了NoSQL解决方案。NoSQL数据库在某些查询场景下更具优势，而不是使用传统的关系型数据库，并且NoSQL数据库一般不支持join操作。</li></ol><p>虽然大厂不建议频繁使用多表join，但并不意味着join完全不可用。在一些复杂查询场景下，使用多表join是合理的选择，但需要注意合理设计数据库表结构、建立合适的索引，避免不必要的join操作。同时，也可以考虑使用缓存、数据冗余、分库分表等技术来优化查询性能，以减少多表join的使用频率。总之，合理使用多表join是需要权衡利弊的，要结合具体场景进行选择和优化。</p><h2 id="5、索引失效的问题如何排查"><a href="#5、索引失效的问题如何排查" class="headerlink" title="5、索引失效的问题如何排查"></a>5、索引失效的问题如何排查</h2><ol><li><strong>检查查询语句</strong>： 首先检查查询语句是否正确，并且是否使用了索引列作为查询条件。确保查询语句的条件与索引的列匹配，以便数据库可以正确选择并使用索引。</li><li><strong>使用EXPLAIN命令</strong>： 在MySQL等数据库中，可以使用EXPLAIN命令来查看查询计划，看是否使用了索引。执行<code>EXPLAIN SELECT ...</code>命令，可以查看查询的执行计划，包括使用了哪些索引以及执行的顺序。</li><li><strong>检查索引列是否被修改</strong>： 如果索引列的值在查询时被修改了，那么索引可能会失效。例如，在WHERE条件中使用了函数或表达式对索引列进行操作，会导致索引无法使用。</li><li><strong>统计信息是否准确</strong>： 数据库优化器使用统计信息来估算索引的选择性，从而决定是否使用索引。确保统计信息是最新的、准确的，以保证优化器能够正确选择索引。</li><li><strong>注意数据类型转换</strong>： 确保查询条件中的数据类型与索引列的数据类型相匹配，避免因数据类型转换而导致索引失效。</li><li><strong>避免使用不等于操作符（&lt;&gt;, !=）</strong>： 在某些数据库中，不等于操作符可能导致索引失效，建议使用等于操作符（=）代替不等于操作符。</li><li><strong>检查是否存在列组合索引</strong>： 如果查询条件中的多个列可以组合在一起使用索引，可以考虑创建列组合索引，以提高查询性能。</li><li><strong>使用FORCE INDEX（MySQL）或 HINTS（Oracle）</strong>： 有些数据库支持使用FORCE INDEX或HINTS等提示来强制指定使用某个索引，可以在特定情况下用于解决索引失效的问题。</li></ol><p>以上排查方法可以帮助定位索引失效的原因。需要根据具体数据库和查询场景来选择适合的优化方法，以提高查询性能并避免索引失效问题。</p><h2 id="6、Redis支持哪几种数据类型"><a href="#6、Redis支持哪几种数据类型" class="headerlink" title="6、Redis支持哪几种数据类型"></a>6、Redis支持哪几种数据类型</h2><ul><li><strong>String（字符串）</strong>： String是最基本的数据类型，在Redis中，String类型可以存储任意类型的数据，例如字符串、整数和浮点数等。</li><li><strong>Hash（哈希）</strong>： Hash是一个键值对的集合，类似于Java中的Map。在Redis中，Hash适合存储对象的属性和值。</li><li><strong>List（列表）</strong>： List是一个有序的字符串列表，可以在列表的两端进行插入和删除操作。Redis的List类型是一个双向链表。</li><li><strong>Set（集合）</strong>： Set是一个无序的字符串集合，集合中的元素是唯一的，不允许重复。</li><li><strong>Sorted Set（有序集合）</strong>： Sorted Set是一个有序的集合，其中的元素以分数（score）来排序。集合中的元素是唯一的，但每个元素可以关联一个分数。</li><li><strong>Bitmap（位图）</strong>： Bitmap是一个特殊的数据类型，它是一个由二进制位组成的字符串。Bitmap可以用于记录某个事件在某个时间点是否发生。</li><li><strong>HyperLogLog（基数估计）</strong>： HyperLogLog是一种基数估计算法，用于估计集合中不重复元素的数量，占用空间很小。</li><li><strong>Geospatial（地理空间索引）</strong>： Redis支持存储和查询地理空间数据，如经纬度坐标。</li></ul><p>除了上述主要数据类型，Redis还有一些其他的数据类型和扩展功能，如Pub/Sub（发布/订阅）、Lua脚本执行、多个数据库的支持等。Redis的灵活性和丰富的数据类型使得它成为一个功能强大的缓存、消息队列、数据存储等多用途的工具。</p><h2 id="7、如何用Redisson实现分布式锁"><a href="#7、如何用Redisson实现分布式锁" class="headerlink" title="7、如何用Redisson实现分布式锁"></a>7、如何用Redisson实现分布式锁</h2><h2 id="8、BeanFactory和FactoryBean的关系"><a href="#8、BeanFactory和FactoryBean的关系" class="headerlink" title="8、BeanFactory和FactoryBean的关系"></a>8、BeanFactory和FactoryBean的关系</h2><h2 id="9、Autowired和Resource的关系"><a href="#9、Autowired和Resource的关系" class="headerlink" title="9、Autowired和Resource的关系"></a>9、Autowired和Resource的关系</h2><h2 id="10-、Spring是如何解决循环依赖的"><a href="#10-、Spring是如何解决循环依赖的" class="headerlink" title="10 、Spring是如何解决循环依赖的"></a>10 、Spring是如何解决循环依赖的</h2><h2 id="11、Spring中如何开启事务"><a href="#11、Spring中如何开启事务" class="headerlink" title="11、Spring中如何开启事务"></a>11、Spring中如何开启事务</h2><h2 id="12、Spring中用到了那些设计模式"><a href="#12、Spring中用到了那些设计模式" class="headerlink" title="12、Spring中用到了那些设计模式"></a>12、Spring中用到了那些设计模式</h2><h2 id="13、什么是MVC"><a href="#13、什么是MVC" class="headerlink" title="13、什么是MVC"></a>13、什么是MVC</h2><h2 id="14、定时任务的公式是？"><a href="#14、定时任务的公式是？" class="headerlink" title="14、定时任务的公式是？"></a>14、定时任务的公式是？</h2><h2 id="15、线程池的7个参数是什么？"><a href="#15、线程池的7个参数是什么？" class="headerlink" title="15、线程池的7个参数是什么？"></a>15、线程池的7个参数是什么？</h2><h2 id="16、分布式ID生成方案"><a href="#16、分布式ID生成方案" class="headerlink" title="16、分布式ID生成方案"></a>16、分布式ID生成方案</h2><h2 id="17、Ribbon和Nginx的区别是什么"><a href="#17、Ribbon和Nginx的区别是什么" class="headerlink" title="17、Ribbon和Nginx的区别是什么"></a>17、Ribbon和Nginx的区别是什么</h2><h2 id="18、-什么是zuul网关，有什么用"><a href="#18、-什么是zuul网关，有什么用" class="headerlink" title="18、 什么是zuul网关，有什么用"></a>18、 什么是zuul网关，有什么用</h2><h2 id="19-、什么是springcloud-，有哪些组件"><a href="#19-、什么是springcloud-，有哪些组件" class="headerlink" title="19 、什么是springcloud ，有哪些组件"></a>19 、什么是springcloud ，有哪些组件</h2><h2 id="20、Hystrix和Sentinel的区别是什么"><a href="#20、Hystrix和Sentinel的区别是什么" class="headerlink" title="20、Hystrix和Sentinel的区别是什么"></a>20、Hystrix和Sentinel的区别是什么</h2><h1 id="0805"><a href="#0805" class="headerlink" title="0805"></a>0805</h1><h2 id="Eureka的作用"><a href="#Eureka的作用" class="headerlink" title="Eureka的作用"></a>Eureka的作用</h2><h2 id="Nacos的作用"><a href="#Nacos的作用" class="headerlink" title="Nacos的作用"></a>Nacos的作用</h2><h2 id="Nginx的作用"><a href="#Nginx的作用" class="headerlink" title="Nginx的作用"></a>Nginx的作用</h2><h2 id="谈一谈ShardingSphere"><a href="#谈一谈ShardingSphere" class="headerlink" title="谈一谈ShardingSphere"></a>谈一谈ShardingSphere</h2><h2 id="什么是token"><a href="#什么是token" class="headerlink" title="什么是token"></a>什么是token</h2><h2 id="怎么生成token"><a href="#怎么生成token" class="headerlink" title="怎么生成token"></a>怎么生成token</h2><h2 id="Sentinel的作用"><a href="#Sentinel的作用" class="headerlink" title="Sentinel的作用"></a>Sentinel的作用</h2><h2 id="Seata的作用"><a href="#Seata的作用" class="headerlink" title="Seata的作用"></a>Seata的作用</h2><h2 id="TC、TM、RM的作用"><a href="#TC、TM、RM的作用" class="headerlink" title="TC、TM、RM的作用"></a>TC、TM、RM的作用</h2><h2 id="SpringBoot启动流程"><a href="#SpringBoot启动流程" class="headerlink" title="SpringBoot启动流程"></a>SpringBoot启动流程</h2><h2 id="SpringBoot的Spring的区别"><a href="#SpringBoot的Spring的区别" class="headerlink" title="SpringBoot的Spring的区别"></a>SpringBoot的Spring的区别</h2><h2 id="用哪个注解读取SpringBoot中配置文件的信息"><a href="#用哪个注解读取SpringBoot中配置文件的信息" class="headerlink" title="用哪个注解读取SpringBoot中配置文件的信息"></a>用哪个注解读取SpringBoot中配置文件的信息</h2><h2 id="JVM内存结构有那五部分组成"><a href="#JVM内存结构有那五部分组成" class="headerlink" title="JVM内存结构有那五部分组成"></a>JVM内存结构有那五部分组成</h2><h2 id="写出五个Git常见指令"><a href="#写出五个Git常见指令" class="headerlink" title="写出五个Git常见指令"></a>写出五个Git常见指令</h2><h2 id="什么是cap理论"><a href="#什么是cap理论" class="headerlink" title="什么是cap理论"></a>什么是cap理论</h2><h2 id="怎么解决分布式session问题"><a href="#怎么解决分布式session问题" class="headerlink" title="怎么解决分布式session问题"></a>怎么解决分布式session问题</h2><h2 id="Redis常见五种数据类型"><a href="#Redis常见五种数据类型" class="headerlink" title="Redis常见五种数据类型"></a>Redis常见五种数据类型</h2><h2 id="SpringBoot整合reids步骤"><a href="#SpringBoot整合reids步骤" class="headerlink" title="SpringBoot整合reids步骤"></a>SpringBoot整合reids步骤</h2><h2 id="RedisTemplate对象为什么可以直接注入"><a href="#RedisTemplate对象为什么可以直接注入" class="headerlink" title="RedisTemplate对象为什么可以直接注入"></a>RedisTemplate对象为什么可以直接注入</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件</title>
      <link href="2023/07/20/xiao-xi-zhong-jian-jian/"/>
      <url>2023/07/20/xiao-xi-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<p>消息中间件</p><p>RabbitMq  ActiveMQ RocketMQ  kafka</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307200921677.png" alt="几个消息中间件的对比"></p><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><p><a href="https://blog.csdn.net/weixin_44545251/article/details/128216395">(33条消息) RabbitMQ安装教程（超详细）_凡尘-追梦者的博客-CSDN博客</a></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307201035541.png" alt="安装成功截图"></p><h2 id="为什么要使用消息队列"><a href="#为什么要使用消息队列" class="headerlink" title="为什么要使用消息队列"></a>为什么要使用消息队列</h2><p><a href="https://doocs.gitee.io/advanced-java/#/docs/high-concurrency/why-mq">为什么使用消息队列？ (gitee.io)</a></p><blockquote><p>解耦</p><p>​    </p><p>异步</p><p>削峰</p></blockquote><p> 缺点</p><blockquote><p>系统可用性降低</p><p>系统复杂度提高</p><p>一致性问题</p></blockquote><h2 id="RabbitMQ-demo"><a href="#RabbitMQ-demo" class="headerlink" title="RabbitMQ demo"></a>RabbitMQ demo</h2><p>1、rabbitmq创建vhost</p><p>在 RabbitMQ 中，可以通过管理界面或者命令行方式创建 vhost（虚拟主机）。下面分别介绍两种方式：</p><ol><li><p>通过 RabbitMQ 管理界面创建 vhost：</p><ul><li>打开浏览器，访问 RabbitMQ 管理界面（默认地址：<a href="http://localhost:15672/%EF%BC%89%E3%80%82">http://localhost:15672/）。</a></li><li>使用管理员账号登录（默认用户名：guest，密码：guest）。</li><li>在左侧导航栏中选择 “Admin”（管理员菜单）。</li><li>在 “Add a new virtual host”（添加新的虚拟主机）部分，输入要创建的 vhost 名称，然后点击 “Add virtual host” 按钮即可。</li></ul></li><li><p>通过命令行方式创建 vhost：</p><p>使用 RabbitMQ 的 <code>rabbitmqctl</code> 命令可以进行管理操作。在命令行中运行以下命令来创建 vhost：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy code# 以管理员权限登录 RabbitMQsudo rabbitmqctl add_vhost &lt;vhost_name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意将 <code>&lt;vhost_name&gt;</code> 替换为你要创建的 vhost 名称。</p></li></ol><p>无论哪种方式创建 vhost，都可以在 RabbitMQ 中为不同应用程序或服务创建隔离的消息队列环境。确保为每个应用程序分配不同的 vhost，以便更好地管理和维护消息队列。</p><p>2、生产者和消费者demo</p><p>在参数设置的时候虚拟机是不需要”/“</p><p>ProducerHelloworld.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1、创建一个连接工厂</span>    <span class="token class-name">ConnectionFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、设置参数</span>    factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"101.200.40.242"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主机ip</span>    factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//端口号</span>    factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"lyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置虚拟机（可以理解为分组）</span>    factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3、根据配置信息 创建连接</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4、创建channel</span>    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5、创建队列</span>    <span class="token comment">/*     * 参数：     *             1. queue：队列名称     *             2. durable:是否持久化，true  当mq重启之后，还在     *             3. exclusive：     *                 * 是否独占。只能有一个消费者监听这队列     *                 * 当Connection关闭时，是否删除队列     *                 *     *             4. autoDelete:是否自动删除。当没有Consumer时，自动删除掉     *             5. arguments：参数。     */</span>    channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"queueHelloworld"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 6、发送消息</span>    <span class="token class-name">String</span> body<span class="token operator">=</span><span class="token string">"hello 07201111"</span><span class="token punctuation">;</span>    <span class="token comment">/*    basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)    参数：        1. exchange：交换机名称。简单模式下交换机会使用默认的 ""        2. routingKey：路由名称        3. props：配置信息        4. body：发送消息数据     */</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"queueHelloworld"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.释放资源</span>    channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConsumerHelloworld.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>    <span class="token comment">//创建连接工厂</span>    <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置参数</span>    factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"101.200.40.242"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"lyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建连接 Connection</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建channel</span>    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建队列</span>    channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"queueHelloworld"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//接受消息</span>    <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span>                                   <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span>                                   <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>                                   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumerTag = "</span> <span class="token operator">+</span> consumerTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"envelope.getExchange() = "</span> <span class="token operator">+</span> envelope<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"envelope.getRoutingKey() = "</span> <span class="token operator">+</span> envelope<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"properties = "</span> <span class="token operator">+</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new String(body) = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//参数3 使用回调对象的对调函数 展示消息</span>    channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"queueHelloworld"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Springboot整合RabbitMQ"><a href="#Springboot整合RabbitMQ" class="headerlink" title="Springboot整合RabbitMQ"></a>Springboot整合RabbitMQ</h1><h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><blockquote><p>配置类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXCHANGE_NAME<span class="token operator">=</span><span class="token string">"boot_topic_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> QUEUE_NAME<span class="token operator">=</span><span class="token string">"boot_queue"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>发送请求</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息："</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接收消息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受消息："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fanout广播模式"><a href="#fanout广播模式" class="headerlink" title="fanout广播模式"></a>fanout广播模式</h2><blockquote><p>这个模式将消息广播给所有与交换机绑定的队列。路由键在这里不起作用，只需要绑定队列到交换机即可，所有绑定的队列都会收到相同的消息。</p></blockquote><blockquote><p>配置类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token class-name">String</span> QUEUE1<span class="token operator">=</span><span class="token string">"queue_fanout01"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token class-name">String</span> QUEUE2<span class="token operator">=</span><span class="token string">"queue_fanout02"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token class-name">String</span> EXCHANGE<span class="token operator">=</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span>EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>发送信息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息："</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接受消息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受消息："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"queue_fanout01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive01</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE01_接受消息："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"queue_fanout02"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive02</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE_02接受消息："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308101037867.png" alt="image-20230810103704342"></p></blockquote><h2 id="direct模式"><a href="#direct模式" class="headerlink" title="direct模式"></a>direct模式</h2><blockquote><p>路由模式</p><p>生产者将消息发送到direct交换器，在绑定队列和交换器的时候有一个路由key，生产者发送的消息会指定一个路由key，那么消息只会发送到相应key相同的队列，接着监听该队列的消费者消费消息。</p><p>也就是让消费者有选择性的接收消息。<br>路由模式，是以路由规则为导向，引导消息存入符合规则的队列中。再由队列的消费者进行消费的。</p></blockquote><blockquote><p>配置类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> QUEUE1<span class="token operator">=</span><span class="token string">"queue_direct01"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> QUEUE2<span class="token operator">=</span><span class="token string">"queue_direct02"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXCHANGE<span class="token operator">=</span><span class="token string">"directExchange"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ROUNTINGKEY01<span class="token operator">=</span><span class="token string">"queue.red"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ROUNTINGKEY02<span class="token operator">=</span><span class="token string">"queue.green"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>ROUNTINGKEY01<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>ROUNTINGKEY02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>消息发送者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息："</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send01</span><span class="token punctuation">(</span><span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息："</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span><span class="token string">"queue.red"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send02</span><span class="token punctuation">(</span><span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息："</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span><span class="token string">"queue.green"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>消息接收者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"queue_direct01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive01</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE01_接受消息："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"queue_direct02"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive02</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE_02接受消息："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试</p></blockquote><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308101047563.png" alt="image-20230810104720459"></p><h2 id="Topic模式"><a href="#Topic模式" class="headerlink" title="Topic模式"></a>Topic模式</h2><blockquote><p>上面的路由模式是根据路由key进行完整的匹配（完全相等才发送消息），这里的通配符模式通俗的来讲就是模糊匹配。</p><p>符号“#”表示匹配一个或多个词，符号“*”表示匹配一个词。<br>　　与路由模式相似，但是，主题模式是一种模糊的匹配方式</p></blockquote><blockquote><p>配置类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> QUEUE01<span class="token operator">=</span><span class="token string">"queue_topic01"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> QUEUE02<span class="token operator">=</span><span class="token string">"queue_topic02"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXCHANGE<span class="token operator">=</span><span class="token string">"topicExchange"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ROUNTINGKEY01<span class="token operator">=</span><span class="token string">"#.queue.#"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ROUNTINGKEY02<span class="token operator">=</span><span class="token string">"*.queue.#"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE01<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TopicExchange</span> <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span>EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>ROUNTINGKEY01<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>ROUNTINGKEY02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>生产者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send03</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息queue01接受："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span><span class="token string">"queue.red.message"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send04</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息queue01和queue02接受："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span><span class="token string">"message.queue.green"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>消费者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues<span class="token operator">=</span><span class="token string">"queue_topic01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive05</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"queue01接受消息"</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues<span class="token operator">=</span><span class="token string">"queue_topic02"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive06</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"queue02接受消息"</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mqSender<span class="token punctuation">.</span><span class="token function">send03</span><span class="token punctuation">(</span><span class="token string">"发消息喽03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mqSender<span class="token punctuation">.</span><span class="token function">send04</span><span class="token punctuation">(</span><span class="token string">"发消息喽04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308101120689.png" alt="image-20230810111949491"></p><blockquote><p>测试2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mqSender<span class="token punctuation">.</span><span class="token function">send03</span><span class="token punctuation">(</span><span class="token string">"发消息喽03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mqSender<span class="token punctuation">.</span><span class="token function">send04</span><span class="token punctuation">(</span><span class="token string">"发消息喽04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202308101123993.png" alt="image-20230810112330918"></p><p>发现再不同时发送的时候，两个接受队列都可以接收到消息04;</p><p>但是为什么在同一个方法中，两个接受队列不能同时接受消息04；</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="2023/07/15/duo-xian-cheng/"/>
      <url>2023/07/15/duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307200905672.png" alt="image-20230720090522505"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信支付/支付宝支付</title>
      <link href="2023/07/13/wei-xin-zhi-fu-zhi-fu-bao-zhi-fu/"/>
      <url>2023/07/13/wei-xin-zhi-fu-zhi-fu-bao-zhi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">微信支付-开发者文档 (qq.com)</a></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 微信支付相关参数</span><span class="token comment"># 商户号</span><span class="token attr-name">wxpay.mch-id</span><span class="token punctuation">=</span><span class="token comment"># 商户API证书序列号</span><span class="token attr-name">wxpay.mch-serial-no</span><span class="token punctuation">=</span><span class="token comment"># 商户私钥文件 （放到src同目录下）</span><span class="token attr-name">wxpay.private-key-path</span><span class="token punctuation">=</span><span class="token attr-value">apiclient_key.pem</span><span class="token comment"># APIv3密钥</span><span class="token attr-name">wxpay.api-v3-key</span><span class="token punctuation">=</span><span class="token comment"># APPID</span><span class="token attr-name">wxpay.appid</span><span class="token punctuation">=</span><span class="token comment"># 微信服务器地址</span><span class="token attr-name">wxpay.domain</span><span class="token punctuation">=</span><span class="token attr-value">https://api.mch.weixin.qq.com</span><span class="token comment"># 接收结果通知地址</span><span class="token comment"># 注意：每次重新启动ngrok，都需要根据实际情况修改这个配置</span><span class="token attr-name">wxpay.notify-domain</span><span class="token punctuation">=</span><span class="token comment"># APIv2密钥</span><span class="token attr-name">wxpay.partnerKey</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下单功能"><a href="#下单功能" class="headerlink" title="下单功能"></a>下单功能</h2><blockquote><p>这一步主要完成，生成订单数据，查询订单数据中是否有code_url，如果没有则需要请求微信服务器的下单接口返回code_url,用于前端展示</p></blockquote><p><strong>为了防止url写错，可以使用menu进行保存url数据</strong></p><table><thead><tr><th>请求url</th><th><a href="https://api.mch.weixin.qq.com/v3/pay/transactions/native">https://api.mch.weixin.qq.com/v3/pay/transactions/native</a></th></tr></thead><tbody><tr><td>方式</td><td>post</td></tr></tbody></table><p>必要参数</p><table><thead><tr><th>参数名</th><th>变量名</th></tr></thead><tbody><tr><td>应用id</td><td>appid</td></tr><tr><td>直连商户号</td><td>mchid</td></tr><tr><td>商品描述（自己后台生成）</td><td>description</td></tr><tr><td>商户订单号（自己后台生成）</td><td>out_trade_no</td></tr><tr><td>通知地址（公网ip）</td><td>notify_url</td></tr><tr><td>订单金额（map的keyvalue形式）</td><td>amount   总金额     total       货币类型   currency</td></tr></tbody></table><p>返回参数</p><table><thead><tr><th>二维码链接</th><th>code_url</th><th>两个小时有效期，每次并不是固定值</th></tr></thead></table><p>接下来就是用户扫前端生成的二维码，进行付款，在付款成功之后微信会通过上述发送的notify_url同时是否完成支付</p><p>WxPayController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/native/{productId}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"调用统一下单Api，返回code_url，前端生成支付二维码"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">nativePay</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送请求"</span><span class="token operator">+</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回支付二维码和订单号</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span> wxPayService<span class="token punctuation">.</span><span class="token function">nativePay</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WxPayServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">nativePay</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生成订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//        // 创建一个临时的订单对象，放数据</span>    <span class="token comment">//        OrderInfo orderInfo=new OrderInfo();</span>    <span class="token comment">//        orderInfo.setTitle("Test");</span>    <span class="token comment">//        orderInfo.setOrderNo(OrderNoUtils.getOrderNo());//生成订单编号</span>    <span class="token comment">//        orderInfo.setProductId(productId);</span>    <span class="token comment">//        orderInfo.setTotalFee(1); //1分</span>    <span class="token comment">//        orderInfo.setOrderStatus(OrderStatus.NOTPAY.getType());</span>    <span class="token comment">// 订单数据生成，要保存到数据库中</span>    <span class="token class-name">OrderInfo</span> orderInfo <span class="token operator">=</span> orderInfoService<span class="token punctuation">.</span><span class="token function">createOrderByProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 先查询数据库，看二维码是否存在</span>    <span class="token comment">// 如果不存在，再调用微信下单api</span>    <span class="token comment">// 下边订单超过五分钟会进行关单操作，以保证每次的二维码都是可以使用的</span>    <span class="token class-name">String</span> codeUrl<span class="token operator">=</span>orderInfo<span class="token punctuation">.</span><span class="token function">getCodeUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>codeUrl<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>codeUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====二维码已经存在===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"codeUrl"</span><span class="token punctuation">,</span>codeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"orderNo"</span><span class="token punctuation">,</span>orderInfo<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始调用统一下单api"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>wxPayConfig<span class="token punctuation">.</span><span class="token function">getDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">WxApiType</span><span class="token punctuation">.</span>NATIVE_PAY<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始拼接参数</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> paramsMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"appid"</span><span class="token punctuation">,</span>wxPayConfig<span class="token punctuation">.</span><span class="token function">getAppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mchid"</span><span class="token punctuation">,</span>wxPayConfig<span class="token punctuation">.</span><span class="token function">getMchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">,</span>orderInfo<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 商品描述，可以自己随意填写</span>    paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span>orderInfo<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 要唯一</span>    paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"notify_url"</span><span class="token punctuation">,</span>                  wxPayConfig<span class="token punctuation">.</span><span class="token function">getNotifyDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">WxNotifyType</span><span class="token punctuation">.</span>NATIVE_NOTIFY<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> amountMap <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    amountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span>orderInfo<span class="token punctuation">.</span><span class="token function">getTotalFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//订单金额</span>    amountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"currency"</span><span class="token punctuation">,</span><span class="token string">"CNY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">,</span>amountMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 参数拼接完成，接下来要进行数据类型转换</span>    <span class="token comment">// map---&gt;json</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> jsonParams <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>paramsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jsonParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把json形式的参数，封装到请求体中</span>    <span class="token class-name">StringEntity</span> entity<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>jsonParams<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    entity<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置请求体数据类型</span>    httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置请求体</span>    httpPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置请求头</span>    <span class="token comment">// 发送请求（到微信服务器），并获取响应</span>    <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> wxPayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment">// 得到状态码</span>        <span class="token class-name">String</span> bodyAsString <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"处理成功"</span><span class="token operator">+</span>bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> statusCode <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//处理成功，但是没有返回值</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sucess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token operator">+</span>statusCode<span class="token operator">+</span><span class="token string">"    返回体"</span><span class="token operator">+</span>bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 微信支付出现问题，可以手动抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"请求异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//解析响应结果，得到code_url</span>        <span class="token comment">// 把返回结果转换成map类型</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> resultMap <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>bodyAsString<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> code_url<span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"code_url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把二维码保存到数据库</span>        <span class="token class-name">String</span> orderNo<span class="token operator">=</span>orderInfo<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderInfoService<span class="token punctuation">.</span><span class="token function">saveCodeUrl</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">,</span>code_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把结果给前端，让前端根据code_url生成支付二维码</span>        <span class="token class-name">Map</span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"codeUrl"</span><span class="token punctuation">,</span>code_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"orderNo"</span><span class="token punctuation">,</span>orderInfo<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="notify-url回调函数"><a href="#notify-url回调函数" class="headerlink" title="notify_url回调函数"></a>notify_url回调函数</h2><blockquote><p>post请求，地址时通过下单功能给微信的notify_url地址，商户要接受并处理该消息，并且给应答</p><p>商户端（后台）接收String响应</p><p>对响应进行验签操作，如果验签失败返回一个验签失败的响应；验签成功对响应数据进行解密，更改后端数据库中的订单支付状态。<strong>对更改状态进行加锁，以防止同时到达两条请求</strong></p><p>这里验签时用户WechatPay2ValidatorForRequest，是通过更改微信sdk的WechatPay2ValidatorForResponse</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 验签</span><span class="token comment">// 签名： 就微信的私钥对信息加密</span><span class="token comment">// 加密： 用微信的公钥解密</span><span class="token class-name">WechatPay2ValidatorForRequest</span> wechatPay2ValidatorForRequest <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">WechatPay2ValidatorForRequest</span><span class="token punctuation">(</span>verifier<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> id<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取消订单"><a href="#取消订单" class="headerlink" title="取消订单"></a>取消订单</h2><blockquote><p>1、传递本地数据库订单号，访问微信服务器关单接口</p><p>post请求</p><p>地址： <a href="https://api.mch.weixin.qq.com/v3/pay/transactions/out-trade-no/%7Bout_trade_no%7D/close">https://api.mch.weixin.qq.com/v3/pay/transactions/out-trade-no/{out_trade_no}/close</a></p><p>还要添加参数：直连商户号 mchid</p><p>2、更改本地订单状态为取消订单</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//开始组装数据 使用json和map</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramsMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mchid"</span><span class="token punctuation">,</span>wxPayConfig<span class="token punctuation">.</span><span class="token function">getMchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonParams<span class="token operator">=</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>paramsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求参数===》{}"</span><span class="token punctuation">,</span>jsonParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将请求参数保存到请求对象中</span><span class="token class-name">StringEntity</span> entity<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>jsonParams<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>entity<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>httpPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送请求到微信服务器，并接受返回微信服务器响应数据</span><span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> wxPayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查单操作"><a href="#查单操作" class="headerlink" title="查单操作"></a>查单操作</h2><blockquote><p>地址： <a href="https://api.mch.weixin.qq.com/v3/pay/transactions/out-trade-no/%7Bout_trade_no%7D">https://api.mch.weixin.qq.com/v3/pay/transactions/out-trade-no/{out_trade_no}</a></p><p>方式：get</p><p>还需要在拼接 直连商户号mchid   </p><p>拼接请求url 发送请求，解析响应体</p></blockquote><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 开启定时任务，需要在程序主类上添加 @EnableScheduling 开启定时任务 * 秒  分  时  日  月   周 * ？ 不指定 * * 每... * 日和周不能同时指定，指定其中一个，则另一个设置为？ * 例如   每三秒执行一次          每天中午十二点执行一次  0 0 12 * * ?          2022年  每天上午10:30执行一次  0 30 10 * * ? 2022 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码（这个要注意在主函数上加注释 <strong>@EnableScheduling</strong>）</p><pre class="line-numbers language-none"><code class="language-none">@Scheduled(cron = "0/30 * * * * ?")public void orderConfirm() throws IOException {    log.info("定时任务查询超过五分钟没有支付的订单");    List&lt;OrderInfo&gt; orderInfoList=orderInfoService.getNoPayOrderByDuration(5, PayType.WXPAY.getType());    for(OrderInfo orderInfo:orderInfoList){        String orderNo =orderInfo.getOrderNo();        log.warn("超时订单号======》{}",orderNo);        // 调用微信查单接口，核实订单状态        // 这些订单超时了    我们要看时已支付没有接到回调通知，还是确实没有支付        wxPayService.checkOrderStatus(orderNo);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="申请退款"><a href="#申请退款" class="headerlink" title="申请退款"></a>申请退款</h2><blockquote><p>地址 <a href="https://api.mch.weixin.qq.com/v3/refund/domestic/refunds">https://api.mch.weixin.qq.com/v3/refund/domestic/refunds</a></p><p>方式：post</p><p>根据订单号，创建退款单。</p><p>调用微信退款api</p><p>解析响应体，看看是否发送退款成功；如果发送成功，则更新本地订单状态（退款中），并更新退款单</p></blockquote><p>请求封装参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//构建参数</span><span class="token class-name">Gson</span> gson<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> paramsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_refund_no"</span><span class="token punctuation">,</span>refundInfo<span class="token punctuation">.</span><span class="token function">getRefundNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"reason"</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"notify_url"</span><span class="token punctuation">,</span>                           wxPayConfig<span class="token punctuation">.</span><span class="token function">getNotifyDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">WxNotifyType</span><span class="token punctuation">.</span>REFUND_NOTIFY<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> amountMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>amountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"refund"</span><span class="token punctuation">,</span>refundInfo<span class="token punctuation">.</span><span class="token function">getRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>amountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span>refundInfo<span class="token punctuation">.</span><span class="token function">getTotalFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>amountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"currency"</span><span class="token punctuation">,</span><span class="token string">"CNY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paramsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">,</span>amountMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="退款结果通知"><a href="#退款结果通知" class="headerlink" title="退款结果通知"></a>退款结果通知</h2><blockquote><p>跟通知支付结果一样，通知退款的notify_url，也是在发送申请退款的时候，也已经指定</p><p>获取post请求，解析加密的请求参数</p><p>对参数进行验签操作，同时解密，同通知支付结果一样；如果验签失败，返回验签失败</p><p>解析解密之后的请求体参数，</p><p>对更新订单状态和更新退款单进行加锁操作，以防止同时到达两个请求</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>reentrantLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> orderStatus <span class="token operator">=</span> orderInfoService<span class="token punctuation">.</span><span class="token function">getOrderStatus</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>REFUND_PROCESSING<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>orderStatus<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 更新订单状态</span>        orderInfoService<span class="token punctuation">.</span><span class="token function">updateStatusByOrderNo</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">,</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>REFUND_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        refundInfoService<span class="token punctuation">.</span><span class="token function">updateRefund</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询退款结果"><a href="#查询退款结果" class="headerlink" title="查询退款结果"></a>查询退款结果</h2><blockquote><p>通过刚申请退款时候的退款号进行退款 </p><p>地址 ： <a href="https://api.mch.weixin.qq.com/v3/refund/domestic/refunds/%7Bout_refund_no%7D">https://api.mch.weixin.qq.com/v3/refund/domestic/refunds/{out_refund_no}</a></p><p>方式 ： get</p><p>发送get请求，解析响应体</p></blockquote><h2 id="获取账单"><a href="#获取账单" class="headerlink" title="获取账单"></a>获取账单</h2><blockquote><p>这一步获取的url不能直接使用，需要通过下一步下载账单来获取账单数据</p><p>调用申请交易账单和申请资金账单的url差不多，所以方式也一样，所以将两者写到一块了</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryBill</span><span class="token punctuation">(</span><span class="token class-name">String</span> billData<span class="token punctuation">,</span> <span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"申请账单接口调用===》{}"</span><span class="token punctuation">,</span>billData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"tradebill"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        url<span class="token operator">=</span><span class="token class-name">WxApiType</span><span class="token punctuation">.</span>TRADE_BILLS<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"fundflowbill"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        url<span class="token operator">=</span><span class="token class-name">WxApiType</span><span class="token punctuation">.</span>FUND_FLOW_BILLS<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的账单类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    url<span class="token operator">=</span>wxPayConfig<span class="token punctuation">.</span><span class="token function">getDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"?bill_date="</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>billData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpGet</span> httpGet   <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    httpGet<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> wxPayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> bodyAsString <span class="token operator">=</span><span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> statusCode<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"申请账单成功，账单返回值===》{}"</span><span class="token punctuation">,</span>bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token operator">==</span><span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"申请账单成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"申请账单异常"</span><span class="token operator">+</span>statusCode<span class="token operator">+</span><span class="token string">"，返回信息===》"</span><span class="token operator">+</span>bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Gson</span> gson<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>bodyAsString<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"download_url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下载账单"><a href="#下载账单" class="headerlink" title="下载账单"></a>下载账单</h2><blockquote><p>通过上边的获取账单得到的url,对url发送get请求</p><p>判断响应状态</p><p>返回响应体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token annotation punctuation">@Override</span><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">downloadBill</span><span class="token punctuation">(</span><span class="token class-name">String</span> billDate<span class="token punctuation">,</span> <span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"下载账单接口调用，{}，{}"</span><span class="token punctuation">,</span>billDate<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> url<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryBill</span><span class="token punctuation">(</span>billDate<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">HttpGet</span> httpGet<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>   httpGet<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> wxPayNoSignClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token class-name">String</span> bodyAsString <span class="token operator">=</span><span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> statusCode<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"下载账单成功，账单返回值===》{}"</span><span class="token punctuation">,</span>bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token operator">==</span><span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"下载账单成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"下载账单异常"</span><span class="token operator">+</span>statusCode<span class="token operator">+</span><span class="token string">"，返回信息===》"</span><span class="token operator">+</span>bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> bodyAsString<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>       response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="解密函数（在支付回调函数和申请退款回调函数中使用了，解密微信返回的响应体）"><a href="#解密函数（在支付回调函数和申请退款回调函数中使用了，解密微信返回的响应体）" class="headerlink" title="解密函数（在支付回调函数和申请退款回调函数中使用了，解密微信返回的响应体）"></a>解密函数（在支付回调函数和申请退款回调函数中使用了，解密微信返回的响应体）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decryptFromREsource</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> bodyMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GeneralSecurityException</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> resourceMap <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> bodyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> ciphertext<span class="token operator">=</span>resourceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ciphertext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> nonce <span class="token operator">=</span> resourceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nonce"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> associatedData <span class="token operator">=</span> resourceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"associated_data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"密文开始解密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"密文 ===&gt;{}"</span><span class="token punctuation">,</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 得到自己的密钥</span>    <span class="token class-name">AesUtil</span> aesUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesUtil</span><span class="token punctuation">(</span>wxPayConfig<span class="token punctuation">.</span><span class="token function">getApiV3Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解密   得到明文</span>    <span class="token class-name">String</span> plainText<span class="token operator">=</span>aesUtil<span class="token punctuation">.</span><span class="token function">decryptToString</span><span class="token punctuation">(</span>            associatedData<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span>            nonce<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span>            ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"明文=====&gt; {}"</span><span class="token punctuation">,</span>plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> plainText<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h1><h2 id="统一下单并支付页面接口的调用"><a href="#统一下单并支付页面接口的调用" class="headerlink" title="统一下单并支付页面接口的调用"></a>统一下单并支付页面接口的调用</h2><blockquote><p>根据货品id生成订单号，并存在本地数据中，接下来就是拼接参数，发送请求，解析返回体</p><p>这个当时犯了个问题，在网页沙箱环境配置了一个应用网关还有授权回调地址，导致一直没有回调函数，最后查看支付宝开发文档，可以看出 ；通常这两个是不用配置的，一般会在需要机型回调函数的的请求头进行绑定</p></blockquote><p>应用网关：用于接受支付宝的异步通知</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307152129978.png" alt="image-20230715212958894"></p><p>授权回调地址：是用于在网页端支付成功之后的本地给他一个成功地址</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202307152129885.png" alt="授权回调地址"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//调用支付宝接口</span><span class="token class-name">AlipayTradePagePayRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlipayTradePagePayRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setNotifyUrl</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"alipay.notify-url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setReturnUrl</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"alipay.return-url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//组装当前业务方法的请求参数</span><span class="token class-name">JSONObject</span> bizContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span> orderInfo<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> totalFee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">.</span><span class="token function">getTotalFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">,</span> totalFee<span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"subject"</span><span class="token punctuation">,</span> <span class="token string">"测试商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"product_code"</span><span class="token punctuation">,</span> <span class="token string">"FAST_INSTANT_TRADE_PAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setBizContent</span><span class="token punctuation">(</span>bizContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行请求，调用支付接口</span><span class="token class-name">AlipayTradePagePayResponse</span> response <span class="token operator">=</span> alipayClient<span class="token punctuation">.</span><span class="token function">pageExecute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用成功，返回结果 "</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用失败，返回码 "</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 返回描述 "</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"创建支付交易失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支付通知"><a href="#支付通知" class="headerlink" title="支付通知"></a>支付通知</h2><blockquote><p>对异步通知进行验签操作，如果验签失败，则输出日志，并返回failure</p><p>验签成功之后，按照异步通知中的out_trade_no的支付金额和数据库中的支付金额进行对比如果不相同则金额校验失败，返回failure</p><p>校验商家seller_id  校验商家app_id</p><p>接下来就是校验支付状态，只有TRADE_SUCCESS或者TRADE_FINISHED支付宝才会认定买家支付成功</p><p>所有校验通过之后更新订单状态</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//异步通知的验签</span><span class="token comment">// Map&lt;String, String&gt; paramsMap = ... //将异步通知中收到的所有参数都存放到map中</span><span class="token keyword">boolean</span> signVerified <span class="token operator">=</span> <span class="token class-name">AlipaySignature</span><span class="token punctuation">.</span><span class="token function">rsaCheckV1</span><span class="token punctuation">(</span>        params<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"alipay.alipay-public-key"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">AlipayConstants</span><span class="token punctuation">.</span>CHARSET_UTF8<span class="token punctuation">,</span>        <span class="token class-name">AlipayConstants</span><span class="token punctuation">.</span>SIGN_TYPE_RSA2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用SDK验证签名</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>signVerified<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// TODO 验签失败则记录异常日志，并在response中返回failure.</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"支付成功异步通知验签失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取消订单-1"><a href="#取消订单-1" class="headerlink" title="取消订单"></a>取消订单</h2><blockquote><p>调用支付宝关单接口，成功之后调用本地接口更新订单状态</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AlipayTradeCloseRequest</span> request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AlipayTradeCloseRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> bizContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setBizContent</span><span class="token punctuation">(</span>bizContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AlipayTradeCloseResponse</span> response<span class="token operator">=</span>alipayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询订单接口"><a href="#查询订单接口" class="headerlink" title="查询订单接口"></a>查询订单接口</h2><blockquote><p>调用支付宝主动查单接口</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AlipayTradeQueryRequest</span> request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AlipayTradeQueryRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> bizContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setBizContent</span><span class="token punctuation">(</span>bizContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AlipayTradeQueryResponse</span> response <span class="token operator">=</span> alipayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定时任务，每隔三十秒，查询未支付的支付宝订单"><a href="#定时任务，每隔三十秒，查询未支付的支付宝订单" class="headerlink" title="定时任务，每隔三十秒，查询未支付的支付宝订单"></a>定时任务，每隔三十秒，查询未支付的支付宝订单</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"*/30 * * * * ?"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"支付宝，超过五分钟未支付的订单。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderInfo</span><span class="token punctuation">&gt;</span></span> orderInfoList <span class="token operator">=</span> orderInfoService<span class="token punctuation">.</span><span class="token function">getNoPayOrderByDuration</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">PayType</span><span class="token punctuation">.</span>ALIPAY<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrderInfo</span> orderInfo<span class="token operator">:</span> orderInfoList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> orderNo<span class="token operator">=</span>orderInfo<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"超时未支付的订单=====》{}"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//核实订单状态，调用支付宝查单接口</span>        aliPayService<span class="token punctuation">.</span><span class="token function">checkOrderStatus</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="申请退款-1"><a href="#申请退款-1" class="headerlink" title="申请退款"></a>申请退款</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建退款单</span><span class="token class-name">RefundInfo</span> refundInfo <span class="token operator">=</span> refundInfoService<span class="token punctuation">.</span><span class="token function">createRefundByOrderNo</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用统一收单交易退款接口</span><span class="token class-name">AlipayTradeRefundRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlipayTradeRefundRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> bizContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span> orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> refund<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>refundInfo<span class="token punctuation">.</span><span class="token function">getRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"refund_amount"</span><span class="token punctuation">,</span> refund<span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"refund_reason"</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setBizContent</span><span class="token punctuation">(</span>bizContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AlipayTradeRefundResponse</span> response <span class="token operator">=</span> alipayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询退款"><a href="#查询退款" class="headerlink" title="查询退款"></a>查询退款</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询退款接口调用=======》{}"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AlipayTradeFastpayRefundQueryRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlipayTradeFastpayRefundQueryRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> bizContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_request_no"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setBizContent</span><span class="token punctuation">(</span>bizContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AlipayTradeFastpayRefundQueryResponse</span> response <span class="token operator">=</span> alipayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取账单-1"><a href="#获取账单-1" class="headerlink" title="获取账单"></a>获取账单</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AlipayDataDataserviceBillDownloadurlQueryRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlipayDataDataserviceBillDownloadurlQueryRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> bizContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bill_type"</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>bizContent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bill_date"</span><span class="token punctuation">,</span>billDate<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setBizContent</span><span class="token punctuation">(</span>bizContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AlipayDataDataserviceBillDownloadurlQueryResponse</span> response <span class="token operator">=</span> alipayClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"申请账单调用成功，返回结果===》{}"</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取账单地址</span>    <span class="token class-name">Gson</span> gson<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">LinkedTreeMap</span><span class="token punctuation">&gt;</span></span> resultMap <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedTreeMap</span> downloadurlQueryResponse <span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"alipay_data_dataservice_bill_downloadurl_query_response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> downloadUrl<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> downloadurlQueryResponse<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"bill_download_url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> downloadUrl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用失败，返回码===》"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，返回描述"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"申请账单失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis学习</title>
      <link href="2023/07/13/redis-xue-xi/"/>
      <url>2023/07/13/redis-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="2023/07/05/xue-xi-0705-vue-xue-xi/"/>
      <url>2023/07/05/xue-xi-0705-vue-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue动态路由加载"><a href="#Vue动态路由加载" class="headerlink" title="Vue动态路由加载"></a>Vue动态路由加载</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'../views/Login'</span><span class="token keyword">import</span> index <span class="token keyword">from</span> <span class="token string">'../views/Index.vue'</span><span class="token keyword">import</span> userShow <span class="token keyword">from</span> <span class="token string">'../views/user/show.vue'</span><span class="token keyword">import</span> userBack <span class="token keyword">from</span> <span class="token string">'../views/user/back.vue'</span><span class="token keyword">import</span> userShowBackBook <span class="token keyword">from</span> <span class="token string">'../views/user/ShowBackBook'</span><span class="token keyword">import</span> userShowReserveBook <span class="token keyword">from</span> <span class="token string">'../views/user/ShowReserveBook'</span><span class="token keyword">import</span> adminShow <span class="token keyword">from</span> <span class="token string">'../views/admin/Show'</span><span class="token keyword">import</span> adminBackBooks <span class="token keyword">from</span> <span class="token string">'../views/admin/BackBooks'</span><span class="token keyword">import</span> adminShowREserveBook <span class="token keyword">from</span> <span class="token string">'../views/admin/ShowReserveBook'</span><span class="token keyword">import</span> sysadminShowUser <span class="token keyword">from</span> <span class="token string">'../views/sysadmin/ShowUser'</span><span class="token keyword">import</span> sysadminShow <span class="token keyword">from</span> <span class="token string">'../views/sysadmin/Show'</span><span class="token keyword">import</span> sortFindAll <span class="token keyword">from</span> <span class="token string">'../views/sysadmin/sortFindAll'</span><span class="token keyword">import</span> Book <span class="token keyword">from</span> <span class="token string">'../views/user/book'</span><span class="token keyword">import</span> addUser <span class="token keyword">from</span> <span class="token string">'../views/sysadmin/addUser'</span><span class="token keyword">import</span> sysAdminBook <span class="token keyword">from</span> <span class="token string">'../views/sysadmin/add'</span><span class="token keyword">import</span> addSort <span class="token keyword">from</span> <span class="token string">'../views/sysadmin/addSort'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>    hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> navUser <span class="token operator">=</span> <span class="token punctuation">{</span>  path<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'书籍管理'</span><span class="token punctuation">,</span>  component<span class="token operator">:</span> index<span class="token punctuation">,</span>  redirect<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  children<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/userShow'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'书籍查询'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> userShow    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/user/back'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'书籍借阅'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> userBack    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/user/showBackBook'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'书籍归还'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> userShowBackBook    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/user/ShowReserveBook'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'书籍预定'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> userShowReserveBook    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/book'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'book'</span><span class="token punctuation">,</span>      hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> Book    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">const</span> navAdmin <span class="token operator">=</span> <span class="token punctuation">{</span>  path<span class="token operator">:</span> <span class="token string">'/admin'</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'书籍处理'</span><span class="token punctuation">,</span>  component<span class="token operator">:</span> index<span class="token punctuation">,</span>  redirect<span class="token operator">:</span> <span class="token string">'/admin/show'</span><span class="token punctuation">,</span>  children<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/admin/show'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'借书处理'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> adminShow    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/admin/backBooks'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'归还处理'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> adminBackBooks    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/admin/ShowReserveBook'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'预定处理'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> adminShowREserveBook    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">const</span> navSysAdmin <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'系统管理'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> index<span class="token punctuation">,</span>    redirect<span class="token operator">:</span> <span class="token string">'/index'</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'/sysadminShowUser'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'用户管理'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> sysadminShowUser      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'/sysadminShow'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'书籍管理'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> sysadminShow      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'/sortFindAll'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'类别管理'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> sortFindAll      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/addUser'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'添加用户'</span><span class="token punctuation">,</span>    hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> addUser  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/sysAdminBook'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'添加用户'</span><span class="token punctuation">,</span>    hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> sysAdminBook  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/addSort'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'添加分类'</span><span class="token punctuation">,</span>    hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> addSort  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  base<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">,</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> userRole <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'userRole'</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>userRole<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>userRole <span class="token operator">===</span> <span class="token string">'user'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>navUser<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userRole <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>navAdmin<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userRole <span class="token operator">===</span> <span class="token string">'sysAdmin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>navSysAdmin<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没有用户权限信息'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 登录拦截器</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">'/login'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>userRole<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- eslint-disable vue/multi-word-component-names --&gt;&lt;template&gt;    &lt;div&gt;        &lt;el-container style="height: 500px; border: 1px solid #eee"&gt;            &lt;el-aside width="200px" style="background-color: rgb(238, 241, 246)"&gt;                &lt;el-menu router&gt;                    &lt;el-submenu                        v-bind="item"                        :key="item"                        v-for="item in $router.options.routes"                        :index="item.path"                    &gt;                        &lt;template slot="title"&gt;                            &lt;i class="el-icon-setting"&gt;&lt;/i&gt;                            {{item.name}}                        &lt;/template&gt;                        &lt;el-menu-item                            :key="item2"                            v-for="item2 in item.children"                            :index="item2.path"                        &gt;{{item2.name}}&lt;/el-menu-item&gt;                    &lt;/el-submenu&gt;                &lt;/el-menu&gt;            &lt;/el-aside&gt;            &lt;el-container&gt;                &lt;el-header style="text-align: right; font-size: 12px"&gt;                    &lt;el-dropdown&gt;                        &lt;i class="el-icon-setting" style="margin-right: 15px"&gt;&lt;/i&gt;                        &lt;el-dropdown-menu slot="dropdown"&gt;                            &lt;el-dropdown-item&gt;查看&lt;/el-dropdown-item&gt;                            &lt;el-dropdown-item&gt;新增&lt;/el-dropdown-item&gt;                            &lt;el-dropdown-item&gt;删除&lt;/el-dropdown-item&gt;                        &lt;/el-dropdown-menu&gt;                    &lt;/el-dropdown&gt;                    &lt;span&gt;王小虎&lt;/span&gt;                &lt;/el-header&gt;                &lt;el-main&gt;                    &lt;router-view&gt;&lt;/router-view&gt;                &lt;/el-main&gt;            &lt;/el-container&gt;        &lt;/el-container&gt;    &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结</title>
      <link href="2023/07/05/xue-xi-0705-xue-xi-zong-jie/"/>
      <url>2023/07/05/xue-xi-0705-xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="0705"><a href="#0705" class="headerlink" title="0705"></a>0705</h1><p>1、安装redis(<a href="https://blog.csdn.net/qq_42700766/article/details/118081581">https://blog.csdn.net/qq_42700766/article/details/118081581</a>) </p><p>2、后台运行  nohup  查看进程 ps -ef 博客文档太多怎么办 hexo new 标题 -p /后端/test.md（<a href="https://blog.csdn.net/weixin_40251892/article/details/107590794%EF%BC%89">https://blog.csdn.net/weixin_40251892/article/details/107590794）</a></p><p> 3、防火墙开放端口firewall-cmd –zone=public –permanent –add-port=PORT/tcp   关闭防火墙端口 firewall-cmd –zone=public –remove-port=80/tcp –permanent(<a href="https://www.cnblogs.com/suhq/p/13539287.html">https://www.cnblogs.com/suhq/p/13539287.html</a>)</p><p>@</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java项目之众筹项目</title>
      <link href="2023/06/28/java-xiang-mu-zhi-zhong-chou-xiang-mu/"/>
      <url>2023/06/28/java-xiang-mu-zhi-zhong-chou-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="23-6-28"><a href="#23-6-28" class="headerlink" title="23-6-28"></a>23-6-28</h1><blockquote><p>完成：</p><p>​        今天完善了后台问题管理还有实名审核部分的内容，完善了前台的常见问题的展示,对后台问题管理，中问题内容过长前端显示非常的难看</p><p>问题：</p><p>​        对Element中表单还是用的不熟悉，再实名审核，审核我的理解应该是不能更改用户信息的，这部分还没有找到实现的方法（已经解决–通过chatgpt）</p><p>总结：</p><p>​    </p></blockquote><p>1、文本过长，超出部分省略显示    </p><pre class="line-numbers language-note" data-language="note"><code class="language-note">&lt;style&gt;  .cell-content {    white-space: nowrap;    overflow: hidden;    text-overflow: ellipsis;  }&lt;/style&gt;//原来：&lt;el-table-column prop="content" label="问题描述" align="center"&gt;&lt;/el-table-column&gt;//改之后的：&lt;el-table-column prop="content" label="问题描述" align="center" &gt;&lt;template slot-scope="{ row }"&gt;&lt;div class="cell-content"&gt;{{ row.content }}&lt;/div&gt;&lt;/template&gt;&lt;/el-table-column&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用了 Element UI 表格的插槽 (<code>slot</code>) 来自定义单元格的内容。通过 <code>&lt;template&gt;</code> 标签的 <code>slot-scope</code> 属性，我们可以访问到当前行数据对象 <code>row</code>。然后，在自定义的内容中，我们将问题描述内容包装在一个 <code>&lt;div&gt;</code> 元素中，并为其添加了 <code>.cell-content</code> 类名。</p><p>在样式部分，我们添加了 <code>.cell-content</code> 类名的样式，其中 <code>white-space: nowrap;</code> 设置文本不换行，<code>overflow: hidden;</code> 隐藏溢出部分，<code>text-overflow: ellipsis;</code> 使用省略号表示溢出部分。</p><p>2、设置不能更改emelent表单的信息</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证号码<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idcard<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formData.idcard<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textarea<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在需要禁用的 <code>&lt;el-input&gt;</code> 组件上添加了 <code>:disabled="true"</code> 属性，以使输入框不可编辑。这样，用户姓名、真实姓名和身份证号码的输入框将变为只读状态。</p><p>@</p>]]></content>
      
      
      
        <tags>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之问题总结</title>
      <link href="2023/02/23/java-xue-xi-zhi-wen-ti-zong-jie/"/>
      <url>2023/02/23/java-xue-xi-zhi-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>@</p><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h1 id="Java-web"><a href="#Java-web" class="headerlink" title="Java web"></a>Java web</h1><h2 id="1、关于网页中有iframe控件，如何在子iframe中点击事件，让父页面进行跳转"><a href="#1、关于网页中有iframe控件，如何在子iframe中点击事件，让父页面进行跳转" class="headerlink" title="1、关于网页中有iframe控件，如何在子iframe中点击事件，让父页面进行跳转"></a>1、关于网页中有iframe控件，如何在子iframe中点击事件，让父页面进行跳转</h2><p><a href="https://blog.csdn.net/xm_csdn/article/details/78131596">解决iframe重定向让父级页面跳转_爱唱歌de小青蛙的博客-CSDN博客</a></p><p><img src="/2023/02/23/java-xue-xi-zhi-wen-ti-zong-jie/image-20230223111835166.png" alt="image-20230223111835166"></p><p><a href="https://www.jb51.net/article/40583.htm">js页面跳转的问题(跳转到父页面、最外层页面、本页面)_javascript技巧_脚本之家 (jb51.net)</a></p><p><a href="https://zhidao.baidu.com/question/2139357218074698468.html">JAVA中servlet页面执行完后，怎样刷新iframe父窗体，或者怎样跳到上一个iframe窗_百度知道 (baidu.com)</a></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/img/202302231204975.png" alt="image-20230223120445901"></p><p>#Springboot 可以同时处理多少个请求</p><h1 id="黑马程序员SpringBoot2课程"><a href="#黑马程序员SpringBoot2课程" class="headerlink" title="黑马程序员SpringBoot2课程"></a>黑马程序员SpringBoot2课程</h1><blockquote><p>临时属性</p></blockquote><blockquote><p>在测试以及其他一些环境下需要更改项目配置</p><p>​        –属性名=属性值   多个属性也可以通过多个–进行添加，中间由空格隔开</p><p>添加配置</p><p>​    –spring.config.name=配置文件地址   可以是全路径  也可以是 classpath:/配置文件名</p></blockquote><p>配置文件优先级：</p><p>​    项目里配置文件，项目内config/配置文件  ，打包项目同路径下配置文件， 打包项目路径下config/配置文件</p><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 应用环境spring:  profiles:    active: pro---# 设置环境spring:  profiles: proserver:  port: 80---# 开发环境spring:  profiles: devserver:  port: 81---# 测试环境spring:  profiles: testserver:  port: 82<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@</p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes学习</title>
      <link href="2022/11/04/kubernetes-xue-xi/"/>
      <url>2022/11/04/kubernetes-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java项目之瑞吉外卖</title>
      <link href="2022/09/27/java-xiang-mu-zhi-rui-ji-wai-mai/"/>
      <url>2022/09/27/java-xiang-mu-zhi-rui-ji-wai-mai/</url>
      
        <content type="html"><![CDATA[<p>@</p><h1 id="准备工作：项目创建"><a href="#准备工作：项目创建" class="headerlink" title="准备工作：项目创建"></a>准备工作：项目创建</h1><p>1、创建maven项目</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20221023102713084.png" alt="创建maven项目">    </p><p>注意：一定要检查项目编码以及maven仓库配置，jdk配置等</p><p>2、导入pom文件</p><pre class="line-numbers language-pom" data-language="pom"><code class="language-pom">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.4.5&lt;/version&gt;        &lt;relativePath/&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.userlyz&lt;/groupId&gt;    &lt;artifactId&gt;reggie_take_out&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;properties&gt;        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;            &lt;scope&gt;compile&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;            &lt;version&gt;3.4.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.20&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;            &lt;version&gt;1.2.76&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;commons-lang&lt;/groupId&gt;            &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;            &lt;version&gt;2.6&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;1.1.23&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;2.4.5&lt;/version&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、复制application.yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8080spring:  application:    #应用名称  可选    name: reggie_take_out  datasource:    druid:      driver-class-name: com.mysql.cj.jdbc.Driver      url: jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true      username: root      password: rootmybatis-plus:  configuration:    #在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射    # 例如 表名address_book  就可以映射到AddressBook类名    map-underscore-to-camel-case: true    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  global-config:    db-config:      id-type: ASSIGN_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、创建SpringBoot程序入口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>userlyz<span class="token punctuation">.</span>reggie</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReggieApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ReggieApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"项目启动成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行Boot程序，看是否成功</strong></p><p>5、导入前端文件</p><blockquote><p>注意前端文件的位置，在Boot程序中前台默认只能访问resource目录下的static和template文件夹下的文件</p></blockquote><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20221023103456775.png" alt="导入之后的文件布局"></p><p>6、运行sql语句创建数据库</p><h1 id="一、后台登录功能开发"><a href="#一、后台登录功能开发" class="headerlink" title="一、后台登录功能开发"></a>一、后台登录功能开发</h1><h2 id="1、前端页面点击登录会发送登录请求："><a href="#1、前端页面点击登录会发送登录请求：" class="headerlink" title="1、前端页面点击登录会发送登录请求："></a>1、前端页面点击登录会发送登录请求：</h2><p><a href="http://localhost:8080/employee/login">http://localhost:8080/employee/login</a></p><h2 id="2、实体类和mapper的开发"><a href="#2、实体类和mapper的开发" class="headerlink" title="2、实体类和mapper的开发"></a>2、实体类和mapper的开发</h2><p>在entity中导入实体类Employee类；使用mybatis-plus提供的自动生成的mapper</p><p>  EmployeeMapper.java(interface)</p><pre class="line-numbers language-interface" data-language="interface"><code class="language-interface">@Mapperpublic interface EmployeeMapper  extends BaseMapper&lt;Employee&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> EmployeeService.java</p><pre class="line-numbers language-interface" data-language="interface"><code class="language-interface">public interface EmployeeService extends IService&lt;Employee&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>EmployeeServiceImpl.java</p><pre class="line-numbers language-interface" data-language="interface"><code class="language-interface">@Servicepublic class EmployeeServiceImpl extends ServiceImpl&lt;EmployeeMapper, Employee&gt; implements EmployeeService {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>封装返回的结果类R.java</p><h2 id="3、Controller"><a href="#3、Controller" class="headerlink" title="3、Controller"></a>3、Controller</h2><p>1、登录的具体流程图</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/66B417DF33A2E87850BFF0EF266DE43C.jpg" alt="登录的流程图"></p><p>2、编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">EmployeeService</span> employeeService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token comment">//员工登录</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//将页面提交的密码password进行md5加密处理</span>        <span class="token class-name">String</span> password<span class="token operator">=</span>employee<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password<span class="token operator">=</span><span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5DigestAsHex</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密之后的密码是"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据页面提交的用户名查询数据库</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getUsername</span><span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> emp <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果没有查询在则返回登录失败结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>emp<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户名不存在，登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//对比密码</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"密码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//查看员工状态，如果为已禁用则返回已禁用结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"账号已经禁用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//登录成功，将员工id存入Session并返回登录成功结果</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">,</span>emp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、后台系统退出功能"><a href="#二、后台系统退出功能" class="headerlink" title="二、后台系统退出功能"></a>二、后台系统退出功能</h1><p>点击退出按钮，发现是一个图片有一个响应事件地址 ： <a href="http://localhost:8080/employee/logout">http://localhost:8080/employee/logout</a></p><p>后端代码处理</p><p>①在EmployeeController中创建对应的处理方法来接受前端的请求，方式为post</p><p>②清理session中的id</p><p>③返回结果，是否退出成功</p><p>前端代码中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">methods: {  logout() {    logoutApi().then((res)=&gt;{      if(res.code === 1){        localStorage.removeItem('userInfo')<span class="token comment">&lt;!--删除浏览器中本地记录中的userInfo(登录成功的用户信息)--&gt;</span>        window.location.href = '/backend/page/login/login.html'<span class="token comment">&lt;!--删除时候返回登录界面--&gt;</span>      }    })  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能测试</p><h1 id="三、员工管理模块"><a href="#三、员工管理模块" class="headerlink" title="三、员工管理模块"></a>三、员工管理模块</h1><h2 id="完善登录功能"><a href="#完善登录功能" class="headerlink" title="完善登录功能"></a>完善登录功能</h2><blockquote><p>问题：如果用户不登陆，通过连接直接访问系统首页，照样可以正常访问。这种设计是不合理的，我们希望看到的是：登录之后可以访问，如果没有登录就不能访问，并跳转到登录界面</p><p>那么如何实现呢？</p><p><strong>那就需要使用过滤器或者拦截器，在过滤器中或者拦截器中判断用户是否已经完成登录，如果没有完成登录，则跳转到登录界面</strong></p></blockquote><p>我们使用过滤器进行实现</p><p>实现步骤：</p><p>① 创建自定义过滤器LoginCheckFilter</p><p>②在启动类上加上注解@ServletComponentScan</p><p>③完善过滤器的处理逻辑</p><p>LoginCheckFilter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*检查用户是否已经完成登录 */</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">"LoginCheckFilter"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginCheckFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment">//路径匹配，支持通配符</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AntPathMatcher</span> PATH_MATCHER<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>servletRequest<span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> response<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span>servletResponse<span class="token punctuation">;</span>        <span class="token comment">//1、获取本次请求的URI</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义不需要处理的请求路径</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token string">"/employee/login"</span><span class="token punctuation">,</span>                <span class="token string">"/employee/logout"</span><span class="token punctuation">,</span>                <span class="token string">"/backend/**"</span><span class="token punctuation">,</span>                <span class="token string">"/front/**"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//2、判断本次请求是否需要处理</span>        <span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">,</span> urls<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、如果不需要处理则放行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"本次请求{}不需要处理"</span><span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//4、判断登录状态，如果已登录，则直接放行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户已登录，用户id为{}"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//5、如果未登录则返回登录结果，通过输出流方式向客户端页面相应数据</span>        <span class="token comment">//前端有检测在request.js</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"NOTLOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//</span>        <span class="token comment">//log.info("拦截到请求：{}", request.getRequestURI());</span>        <span class="token comment">//filterChain.doFilter(request,response);q</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 路径匹配，检查本次请求是否需要放行     * @param requestURI     * @param urls     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestURI<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> url <span class="token operator">:</span> urls<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> match<span class="token operator">=</span>PATH_MATCHER<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><p>@</p>]]></content>
      
      
      
        <tags>
            
            <tag> java项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之迭代器</title>
      <link href="2022/08/16/java-xue-xi-zhi-die-dai-qi/"/>
      <url>2022/08/16/java-xue-xi-zhi-die-dai-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><pre class="line-numbers language-none"><code class="language-none">Demo001---------阿里云基础P184迭代器Enumeration和Iterator的区别1、函数接口不同        Enumeration只有两个函数接口。通过Enumeration,我们只能读取集合的数据，而不能对数据进行修改        Iterator只有三个函数接口。Iterator除了能读取集合的数据之外，也能对数据进行删除操作2、Iterator支持fail-fast机制，而Enumeration不支持Enumeration是Java1.0之后添加的接口。使用到它的函数包括Vector、Hashtable等类；这些类都是JDK1.0中加入的。Enumeration存在的目的就是为他们提供遍历接口。Enumeration本省并不支持同步，而是在Vector、Hashtable实现Enumeration时添加的同步Iterator是JDK1.2才添加的接口，他也是为了HashMap、ArrayList等集合提供遍历接口。Iterator是支持fail-fast机制的，当有多个线程对同一集合进行操作的时候，就有可能产生fail-fast事件。注：Enumeration迭代器只能遍历 Vector、Hashtable等这些古老的集合，因此通常使用Iterator；除非在极端情况下不得不使用Enumeration的时候才会使用    使用迭代器删除元素而引起的ConcurrentModifcationException(CME)并发修改异常    原因：Java集合汇中运用了fail-fast机制进行设计，一旦使用不当，就会触发fail-fast机制设计的代码，就会发生非预期情况        触发错误的代码：            List&lt;String&gt; usernames=new ArrayList&lt;String&gt;(){{                add("user");                add("User");                add("userlyz");                add("u");            }};            for(String username:usernames){                if(username.equals("User")){                    usernames.(username);                }            }    对于编译后的class进行反编译，可以发现foreach其实是依赖了 do while循环和Iterator实现的    爆出这个错误是因为modCount和expectedModCount不相等导致的        modCount表示该集合实际被修改的次数        expectedModCount是ArrayList中的一个内部类--Itr中的成员变量；表示这个迭代器预期该集合被修改的次数    fail-safe机制        为了避免触发fail-fast机制，我们可以使用Java中提供的一些采用了fail-safe机制的集合类            这样的集合容器，在遍历上不是直接在集合内容上访问的，而是先复制原有集合内容在拷贝的集合上进行遍历            java.util.concurrent下的容器都是fail-safe的，可以在多线程并发使用，并发修改            代码说明                        List&lt;String&gt; usernames=new CopyOnWriteArrayList&lt;String&gt;(){{                            add("user");                            add("User");                            add("userlyz");                            add("u");                        }};                        for(String username:usernames){                            if(username.equals("User")){                                usernames.(username);                                System.out.println(username+"已经删除了");                            }                        }                        System.out.println(usernames);            输出                User已经删除了                [user, userlyz, u]        这样虽然是避免了ConcurrentModificationException,但是迭代器并不能访问修改之后的内容            代码如下                List&lt;String&gt; usernames=new CopyOnWriteArrayList&lt;String&gt;(){{                    add("user");                    add("User");                    add("userlyz");                    add("u");                }};                Iterator it= usernames.iterator();                for(String username:usernames){                    if(username.equals("User")){                        usernames.(username);                        System.out.println(username+"已经删除了");                    }                }                System.out.println(usernames);                System.out.println("---------------------");                while(it.hasNext()){                    System.out.println(it.next());                }            输出                User已经删除了                [user, userlyz, u]                ---------------------                user                User                userlyz                u    CopyOnWrite 是一种程序设计中的优化策略。从一开始大家都在共享同一个内容，当某人想要修改这个内容的时候，才会真正        把内容Copy出去形成一个新的内容然后再该，这是一种延时懒惰策略            他的add/remove等写方法是需要加锁；目的是为了避免Copy处N个副本，导致并发读写            他的读方法是没有加锁的，所以读到的数据可能不是最新的        所以CopyOnWrite容器是一种读写分离的思想        而Vector在读写的时候使用同一个容器，读写互斥，同时只能做一件事儿。    所以应该在遍历的同时删除ArrayList中的元素        1、使用普通的for循环进行操作：可能会出现漏删的情况        2、直接使用Iterator进行操作：直接使用Iterator提供的remove方法            List&lt;String&gt; userNames = new ArrayList&lt;String&gt;() {{                add("Hollis");                add("hollis");                add("HollisChuang");                add("H");            }};            Iterator iterator = userNames.iterator();            while (iterator.hasNext()) {                if (iterator.next().equals("Hollis")) {                    iterator.remove();                    }                }            System.out.println(userNames);        3、使用java8中提供的 filter过滤            代码：                List&lt;String&gt; userNames = new ArrayList&lt;String&gt;() {{                   add("Hollis");                   add("hollis");                   add("HollisChuang");                   add("H");               }};               userNames = userNames.stream().filter(userName -&gt; !userName.equals("Hol lis")).collect(Collectors.toList());               System.out.println(userNames);        4、使用增强for循环：某个元素只包含一个的话，只要删除之后立即结束循环体，不再继续遍历下去        5、使用fail-safe的集合类：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=33i3ekx3p38k8">https://cloud.tencent.com/developer/support-plan?invite_code=33i3ekx3p38k8</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之HashMap</title>
      <link href="2022/08/16/java-xue-xi-zhi-hashmap/"/>
      <url>2022/08/16/java-xue-xi-zhi-hashmap/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="HashMap的扩容机制"><a href="#HashMap的扩容机制" class="headerlink" title="HashMap的扩容机制"></a>HashMap的扩容机制</h2><h2 id="Hashtable、HashMap和ConcurrentHashMap的异同"><a href="#Hashtable、HashMap和ConcurrentHashMap的异同" class="headerlink" title="Hashtable、HashMap和ConcurrentHashMap的异同"></a>Hashtable、HashMap和ConcurrentHashMap的异同</h2><p><strong>主要区别有线程安全性、同步(synchronization)以及速度</strong></p><p>1、HashMap从结构上看几乎可以等价于Hashtable；<strong>HashMap可以接受null的key和value但是Hashtable不行</strong></p><table><thead><tr><th><img src="http://userlyz.gitee.io/imgs/imgs/image-20220816104026999.png" alt="HashMap"></th><th><img src="http://userlyz.gitee.io/imgs/imgs/image-20220816104102837.png" alt="Hashtable"></th></tr></thead></table><p>2、HashMap是非同步(synchronized)，Hashtable是同步的；这说明Hashtable是线程安全的，多个线程可以共享一个Hashtable；如果没有正确同步的话，多个线程是无法安全的访问HashMap<strong>Java5提供了ConcurrentHashMap是Hashtable的替代，它比Hashtable的性能和扩展性更好</strong></p><table><thead><tr><th align="center">HashMap部分源码截取</th><th align="center">Hashtable部分源码截取</th></tr></thead><tbody><tr><td align="center">public final void forEach(Consumer&lt;? super K&gt; action) {}</td><td align="center">public synchronized void forEach(BiConsumer&lt;? super K, ? super V&gt; action) {}</td></tr><tr><td align="center">public final void remove() {}</td><td align="center">public synchronized V remove(Object key) {}</td></tr><tr><td align="center">public V put(K key, V value){}</td><td align="center">public synchronized V put(K key, V value) {</td></tr></tbody></table><p>3、另一个区别是两个迭代器不同：HashMap的迭代器是(Iterator)是fast-fail迭代器，而Hashtable的迭代器(Enumeration)不是fast-fail迭代器；所以当其他线程改变HashMap的结构（增加或者删除）就会抛出CME(ConcurrentModification 并发修改错误<strong>这个错误在单线程中使用迭代器修改HashMap结构的时候（增加和删除）也会引发此错误</strong>)，当然这个错误也不是一定会发生，具体就要看另一篇 <a href="https://userlyz.github.io/2022/08/16/java-xue-xi-zhi-die-dai-qi/">迭代器Enumeration和Iterator的区别</a></p><p>4、由于Hashtable都是线程同步的，所以在单线程环境下比HashMap要慢，如果不需要同步而且是单线程环境，那么HashMap性能要好过Hashtable</p><p>5、HashMap不能保证随着时间推移Map中的元素次序是不变的（没整明白）HashMap</p><p><em><strong>注：</strong></em>1、是否能让HashMap同步</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> m<span class="token operator">=</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、如果你需要完全的线程安全额时候使用Hashtable</p><p>​        如果是Java 5以上请使用ConcurrentHashMap(使用锁分段技术来保证线程安全)</p><h1 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h1><p><a href="https://developer.aliyun.com/article/388328">Hashtable、HashMap和ConcurrentHashMap的异同</a></p><p><a href="https://developer.aliyun.com/article/930363">HashMap这样回答offer就稳了</a></p><p><a href="https://developer.aliyun.com/article/930371">HashTable，ConcurrentHashMap这些你知道吗</a></p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h2><p>计算机中的逻辑运算（与、或、非、异或、同或、与非、或非）</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>与</td><td>全1为1，有0为0</td></tr><tr><td>或</td><td>全0为0，有1为1</td></tr><tr><td>非</td><td>0-&gt;1  1-&gt;0</td></tr><tr><td>异或</td><td>不同为1，相同为0</td></tr><tr><td>同或</td><td>相同为0，相同为1</td></tr><tr><td>与非</td><td>先与后非</td></tr><tr><td>或非</td><td>先或后非</td></tr></tbody></table><pre class="line-numbers language-note" data-language="note"><code class="language-note">&amp; 逻辑与&amp;&amp; 逻辑与 （逻辑运算符）逻辑与也称为短路逻辑与|按位或|| 逻辑或  一个为真即为真，后续不再计算^（异或运算符）&lt;&lt;左移运算符&gt;&gt;右移运算符~ 取反运算符&gt;&gt;&gt;无符号右移运算符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=33i3ekx3p38k8">https://cloud.tencent.com/developer/support-plan?invite_code=33i3ekx3p38k8</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题</title>
      <link href="2022/08/08/java-mian-shi-ti/"/>
      <url>2022/08/08/java-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p><a href="https://www.bilibili.com/video/BV1e34y1J7ve">视频地址</a></p><h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h2 id="java虚拟机面试核心点和性能调优"><a href="#java虚拟机面试核心点和性能调优" class="headerlink" title="java虚拟机面试核心点和性能调优"></a>java虚拟机面试核心点和性能调优</h2><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220808114840311.png" alt="JVM虚拟机"></p><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="Hashtable、HashMap和ConcurrentHashMap的异同"><a href="#Hashtable、HashMap和ConcurrentHashMap的异同" class="headerlink" title="Hashtable、HashMap和ConcurrentHashMap的异同"></a>Hashtable、HashMap和ConcurrentHashMap的异同</h2><p><a href="https://developer.aliyun.com/article/388328">参考1</a></p><p><a href="https://developer.aliyun.com/article/930363">参考2</a></p><p><a href="https://cdn.jsdelivr.net/gh/userlyz/blog_img/">https://cdn.jsdelivr.net/gh/userlyz/blog_img/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣做题笔记</title>
      <link href="2022/07/28/li-kou-zuo-ti-bi-ji/"/>
      <url>2022/07/28/li-kou-zuo-ti-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="做题记录"><a href="#做题记录" class="headerlink" title="做题记录"></a>做题记录</h1><p>从基础简单的题开始</p><h1 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h1><p>1、两数之和 解题方法：①两层遍历求解  ②使用hashMap存储对应的数值和下标</p><p>2、两数相加  </p><p>3、最长无重复字段 ①使用滑动窗口②使用hashMap存储对应的 元素和下标</p><p>9、回文数①反转一半的字符串</p><p>13、罗马数字转整数：①遍历元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result<span class="token operator">+=</span><span class="token function">getvalue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">getvalue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token function">getvalue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">getvalue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        result<span class="token operator">+=</span><span class="token function">getvalue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14、最长公共前缀  遍历整个字符串数组，两两比较，找出公共前缀，用公共前缀覆盖后元素</p><p>20、有效的括号  使用栈的思想</p><p>21、合并两个有序链表   递归遍历</p><p>26、删除有序数组中的重复项  要求使用</p><p> 遍历数组，发现相同的使用后边的覆盖原边元素</p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        q<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>27、移除元素 删除数组中给定元素</p><p>28、实现strStr() ①两层遍历暴力求解②使用KMP算法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> pi<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> pi<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>35、搜索插入位置</p><p>53、最大子数组和</p><p>58、最后一个单词的长度   String.split</p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h2><p>Java  List排序sort和sorted的区别</p><p>**sort:**对原有list元素顺序位置进行更改排序</p><p>**sorted:**不对原有的list进行排序，而是返回一个新的排序后的新的list的stream流</p><p><em>sorted 方法是对list转换成stream流的方法，不对有有list元素排序，而是返回一个排序后的新list：</em></p><p><strong>例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement_2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//sorted不改变原始数组序列，返回一个新的stream流</span>    <span class="token comment">//Arrays.sort(nums);</span>    <span class="token comment">//System.out.println(nums);</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sorted <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="笔记二-Java中二进制的位运算"><a href="#笔记二-Java中二进制的位运算" class="headerlink" title="笔记二 Java中二进制的位运算"></a>笔记二 Java中二进制的位运算</h2><p>①整数int转二进制输出</p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java高级</title>
      <link href="2022/07/28/java-xue-xi-zhi-java-gao-ji/"/>
      <url>2022/07/28/java-xue-xi-zhi-java-gao-ji/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="IO-Input-amp-amp-Output"><a href="#IO-Input-amp-amp-Output" class="headerlink" title="IO(Input&amp;&amp;Output)"></a>IO(Input&amp;&amp;Output)</h1><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220820091447219.png" alt="IO流的分类"></p><h2 id="字符流、字节流"><a href="#字符流、字节流" class="headerlink" title="字符流、字节流"></a>字符流、字节流</h2><h3 id="字节和字符"><a href="#字节和字符" class="headerlink" title="字节和字符"></a>字节和字符</h3><p>Bit最小的二进制单位，是计算机的操作部分，取值0或者1</p><p>Byte（字节）是计算机操作数据的最小单位由8位bit组成  取值（-128~127）</p><p>Char（字符）是用户可读的最小单位，在Java里面由16位bit组成    取值（0~65535）</p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>操作byte类型数据，主要操作类是OutputStream、InputStream的子类；不用缓冲区，直接对文件本身进行操作</p><h3 id="字节流-1"><a href="#字节流-1" class="headerlink" title="字节流"></a>字节流</h3><p>操作字符类型数据，主要操作类是Reader、Writer的子类；使用缓冲区缓冲字符，不关闭流就不会输出任何内容</p><h3 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h3><p>整个IO包实际上分为字节流和字符流；除了这两个流之外还存在一组字节流-字符流的转换类。</p><p><strong>OutputStreamWriter</strong>:是Writer的子类，将<strong>输入的字符流变为字节流</strong>，即将一个字符流的输出对象变为以一个字节流输出对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token comment">//字符流转化为字节流输出</span>    <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">OutputStreamWriter</span> osw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我是字符流转化为字节流输出的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>InputStreamReader</strong>:是Reader的子类，将<strong>输入的字节流变为一个字符流</strong>，即将一个字节流的输入对象变为字符流的输入对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InputStreamReader</span> isr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>java.io.File</p><h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><p>pathSeparator 路径分隔符 等价于字符串书写的;(windows) :(linux)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> path<span class="token operator">=</span><span class="token string">"D:/aaa.txt"</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator<span class="token operator">+</span><span class="token string">"G:/bbb.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>separator   文件分隔符  等价于字符串写的\\效果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"D:"</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token operator">+</span><span class="token string">"aaa.txt"</span><span class="token punctuation">;</span><span class="token class-name">String</span> name2<span class="token operator">=</span><span class="token string">"D://aaa.txt"</span><span class="token punctuation">;</span><span class="token class-name">String</span> name3<span class="token operator">=</span><span class="token string">"D:\aaa.txt"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>windows中的目录分隔符\</p><p>​        **使用java代码写的时候，因为\就是转义字符，所以应该写成 \\ 或者也可以写成/ **</p><p>Linux中的目录分隔符是/</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">File</span> parent<span class="token punctuation">,</span><span class="token class-name">String</span> child<span class="token punctuation">)</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> pathname<span class="token punctuation">)</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> parent<span class="token punctuation">,</span><span class="token class-name">String</span> child<span class="token punctuation">)</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">URL</span> uri<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的功能"><a href="#常用的功能" class="headerlink" title="常用的功能"></a>常用的功能</h3><h4 id="创建删除目录和文件"><a href="#创建删除目录和文件" class="headerlink" title="创建删除目录和文件"></a>创建删除目录和文件</h4><p><strong>创建文件  createNewFile()</strong></p><p>1、创建过程中如果没有中间的目录就会报错</p><p>2、如果文件已经存在了，那么调用方法后的返回值就是false。但是不会报错</p><p>3、如果不指定后缀名默认还是创建问价，不会创建文件夹</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">".\\Demo8_17\\java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//./java //G:\codes\javaSE\java</span><span class="token comment">//./Demo8_17/java //G:\codes\javaSE\Demo8_17\java</span><span class="token keyword">boolean</span> isCraete<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建文件夹功能  mkdir()</strong></p><p>1、只能创建一级文件夹，多级目录会报错</p><p>2、如果要想创建多级目录需要使用<strong>file.mkdirs();</strong></p><p><strong>删除文件或者文件夹 delete()</strong></p><p>1、如果有中间目录删除会失败，但是并不报错</p><p>2、删除文件夹，必须保证该文件夹下没有文件和子文件夹，会删除失败</p><h3 id="File的获取功能"><a href="#File的获取功能" class="headerlink" title="File的获取功能"></a>File的获取功能</h3><ul><li><p>**file.getName()**通过路径的split(“/“)数组的的最后一个元素</p></li><li><p>**file.getPath()**得到创建file的路径，创建的时候是啥就得到什么</p></li><li><p>**file.getAbsolutePath()**获取绝对路径</p></li><li><p>**file.getAbsoluteFile()**返回的是文件 <strong>返回值类型是File</strong></p></li><li><p><strong>file.length()<strong>获取的是文件的字节数，</strong>返回值：long类型</strong>**</p></li><li><p><strong>file.getParent()</strong> 获取的是父目录，<strong>返回值类型是String</strong></p></li><li><p><strong>file.getParentFile()</strong> 获取的是父目录，<strong>返回值类型是File类型</strong></p><pre class="line-numbers language-none"><code class="language-none">File file=new File(".\\java");//./java //G:\codes\javaSE\java//./Demo8_17/java //G:\codes\javaSE\Demo8_17\javaboolean isCraete=file.createNewFile();//boolean isdelete =file.delete();System.out.println("+++++++++++++");System.out.println(file.getName());//javaSystem.out.println(file.getPath());//.\java  System.out.println(file.getAbsolutePath());//G:\codes\javaSE\.\javaSystem.out.println(file.getAbsoluteFile());//G:\codes\javaSE\.\javaSystem.out.println(file.length());//0System.out.println(file.getParent());//.System.out.println(file.getParentFile());//.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="File判断功能"><a href="#File判断功能" class="headerlink" title="File判断功能"></a>File判断功能</h3><ul><li><p>**file.exists()**判断路是否存在</p></li><li><p>file.isDirectory() 如果文件夹路径存在，并且路径表示的是文件夹的时候才会返回true</p></li><li><p>file.isFile() 如果文件路径存在，并且是文件才会返回true</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//File判断功能  java文件没有创建</span><span class="token comment">//判断路径是否存在</span><span class="token class-name">File</span> file1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">".//java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> exists<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//判断是不是文件夹</span><span class="token keyword">boolean</span> isDirectory<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//判断是否是文件</span><span class="token keyword">boolean</span> isFile<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历目录 返回字符串数组  .</span><span class="token class-name">File</span> file2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"G:\\codes\\javaSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token operator">=</span>file2<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Demo8_17,Demo8_9  输出该文件加目录下的所有子目录的名字</span><span class="token comment">//遍历目录 返回File数组</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token operator">=</span>file2<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回从磁盘目录开始的地址</span><span class="token comment">//获取磁盘根目录</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files1<span class="token operator">=</span>file2<span class="token punctuation">.</span><span class="token function">listRoots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>files1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回本地电脑所有的磁盘号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><blockquote><p>通过设置可以获取指定类型的文件</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//文件过滤器</span><span class="token comment">//通过重写抽象方法 FileFilter 当返回值为true的时候，添加进数组，实现文件过滤的功能</span><span class="token comment">//原理： file.listFiles()每次获取到一个文件夹都会调用对应接口的accept方法</span><span class="token comment">//accept()方法如果返回值为true,就将此文件或者文件夹放入对应的数组中，所以我们可以用我们的代码进行控制函数的返回值是true还是false</span><span class="token class-name">File</span> file3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"G:\\codes\\javaSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输入流和输出流"><a href="#输入流和输出流" class="headerlink" title="输入流和输出流"></a>输入流和输出流</h1><blockquote><p>输出流和输入流是相对于程序而言。当需要将磁盘中的文件读入程序中，这种流这就是—-输入流；当需要将数据从程序写入到文件这种流就是—-输出流</p></blockquote><h2 id="输出流-OutputStream"><a href="#输出流-OutputStream" class="headerlink" title="输出流  OutputStream"></a>输出流  OutputStream</h2><blockquote><p>OutputStream叫做字节输出流，每次操作的是1个字节（8位）</p><p>OutputStream可以写入任何文件</p><p>OutputStream抽象类是所有输出字节流类的超类</p><p>操作的数据都是字节</p></blockquote><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220818200052256.png" alt="方法摘要"></p><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><blockquote><p>文件输出流，用于将程序当中的数据写入File的输出流</p></blockquote><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>append  设置为true/false，表示是否附加写入的数据</strong></p><table><thead><tr><th></th><th>参数解释</th></tr></thead><tbody><tr><td><code>FileOutputStream(File file)</code></td><td>创建文件输出流以写入由指定的 <code>File</code>对象表示的文件。</td></tr><tr><td><code>FileOutputStream(File file,  boolean append)</code></td><td>创建文件输出流以写入由指定的 <code>File</code>对象表示的文件。</td></tr><tr><td>FileOutputStream(FileDescriptor fdpj)</td><td>创建文件输出流以写入指定的文件描述符</td></tr><tr><td>FileOutputStream(String name)</td><td>创建文件输入流以指定的名称写入文件</td></tr><tr><td>FileOutputStraem(String name,boolean append)</td><td>创建文件输出流以指定的名称写入文件</td></tr></tbody></table><p><strong>写入方式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------输出流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G:\\codes\\javaSE\\Demo8_17\\src\\demo\\demo.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"大家好"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果需要多次写入并且进行换行操作的话需要添加  \r\n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220818200157672.png" alt="写的结果"></p><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><blockquote><p> 跟OutputStream一样，每次操作的是一个字节（8位）</p><p>InputStream可以读取任何文件</p><p>InputStream 抽象类，是表示输入字节流的所有类的超类</p></blockquote><p><strong>基本共性功能方法</strong></p><p>int read():读取一个字节并且返回，没有字节返回-1</p><p>int read(byte[] );读取一定量的字节数，并且存储到字节数组中</p><p>void close(): 关闭输入流</p><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><blockquote><p>文件输入流，用于数据读取到程序的输入流，用于数据读取到程序的输入流</p></blockquote><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>FileInputStream(File file)</td><td>打开与实际文件的连接创建一个FileInputStream，传入一个File对象</td></tr><tr><td>FileInputStream(String name)</td><td>传入一个路径名name</td></tr></tbody></table><h3 id="读取方法"><a href="#读取方法" class="headerlink" title="读取方法"></a>读取方法</h3><pre class="line-numbers language-none"><code class="language-none">//读取单个字节// read的返回值代表读取的内容文件末尾的值是-1File file=new File("./Demo8_17/src/demo/demo.txt");System.out.println(file.exists());FileInputStream fis=new FileInputStream(file);int len=0;while((len = fis.read()) != -1){ System.out.print((char)len); }fis.close();////////////////读取到字节数组//返回值代表读取到了多少个有效的字节读取的内容在byte里边File file1 = new File("./Demo8_17/src/demo/demo.txt");FileInputStream fis1 = new FileInputStream(file);byte [] b = new byte[2];len = 0;while((len = fis.read(b)) != -1){    String str = new String(b, 0, len);    System.out.print(str);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><blockquote><p>字符流操作的单位也是以字节为单位，其主要就是为了解决文本文件的输入和输出</p></blockquote><h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><blockquote><p>字符输出流，和字节流的主要区别在与字符流只能操作文本文件</p></blockquote><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>abstract void</td><td>close()    关闭流，先刷新</td></tr><tr><td>abstract void</td><td>flush()  刷新流</td></tr><tr><td>void</td><td>write(char[] cbuf)  写入一个字符数组</td></tr><tr><td>abstract void</td><td>write(char[] cbuf,int off,int len)写入字符数组的一部分</td></tr><tr><td>void</td><td>write(int c)<strong>写一个字符</strong></td></tr><tr><td>void</td><td>write(String str) 写入一个字符串</td></tr><tr><td>void</td><td>write(String str,int off ,int len) 写入一字符串的一部分</td></tr></tbody></table><h3 id="FileWrite"><a href="#FileWrite" class="headerlink" title="FileWrite"></a>FileWrite</h3><blockquote><p>Write的实现类</p></blockquote><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><p><strong>append的作用 true/false  设置为false，表示从头开始写</strong></p><table><thead><tr><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">FileWriter(File file)</td><td>给一个File对象构造一个FileWriter对象</td></tr><tr><td align="center">FileWriter(File file,boolean append)</td><td></td></tr><tr><td align="center">FileWriter(String name)</td><td></td></tr><tr><td align="center">FileWriter(String name,boolean append)</td><td></td></tr><tr><td align="center">FileWrite(FileDescriptor fd)</td><td>构造与文件描述符关联的FileWrite对象</td></tr></tbody></table><p><strong>注意</strong></p><p>它中的构造方法都是<strong>super(new FileOutputStream(fileName));</strong></p><h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><blockquote><p>字符输入流，和字节流的区别在与<strong>字符流只能操作文本文件</strong></p></blockquote><p><strong>方法</strong></p><p>read()读取一个字符   ；read(char[] cbuf) 将字符读入数组</p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>FileReader(File file)</td><td></td></tr><tr><td>FileReader(String fileName)</td><td></td></tr><tr><td>FileReader(FileDescriptor fd)</td><td></td></tr></tbody></table><p><strong>使用方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"./Demo8_18/src/com/lyz/onclass/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"./Demo8_18/src/com/lyz/onclass/newtest.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>test.txt</th><th>newtest.txt</th></tr></thead><tbody><tr><td><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220818221343723.png" alt="test.txt"></td><td><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220818221404624.png" alt="newtest.txt"></td></tr></tbody></table><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>使用字符流，不能去读取不是文本的文件</p><h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><blockquote><p>正常情况下idea的开发环境的编码为UTF-8的时候，那么当我们使用字节流或者字符进行写入文件的时候，文件编码也还是UTF-8，如果用字节流或者字符流进行文件的读取的操作的时候，默认也是UTF-8格式</p><p>如果文件时GBK的话，就会出现乱码情况 </p><p>转换流的出现，就是为了解决写入和读取文本文件的时候指定具体的编码格式</p></blockquote><h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><blockquote><p>OutputStreamWriter是字符流通向字节流的桥梁，可使用指定的字符编码表，将要写入流中的字符编码成字节</p></blockquote><ul><li>创建一个字节输出流 <em><strong>FileOutputStream fos=new FileOutputStream(“”)</strong></em></li><li>创建转换输出流，绑定指定的字节输出流，并指定编码格式<em><strong>OutputStreamWriter osw =new OutputStreamWriter(fos,”gbk”)</strong></em></li><li>调用write方法写入  <em><strong>osw.write(“你好”)</strong></em></li></ul><h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><blockquote><p>InputStreamReader是字节流通向字符流的桥梁，它使用指定的编码表读取字节并将其解码为字符</p></blockquote><ul><li>创建一个字节输入流<em><strong>FileInputStream fis=new FileInputStream(“”)</strong></em></li><li>创建转换输入流，绑定字节输入流，并指定编码格式<em><strong>IntputStreamReader isr=new InputStreamReader(fis,”UTF-8”)</strong></em></li><li>调用read方法进行读取</li></ul><h2 id="补充：-字符编码"><a href="#补充：-字符编码" class="headerlink" title="补充： 字符编码"></a>补充： 字符编码</h2><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220820192832567.png" alt="UTF-8的编码格式"></p><h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><blockquote><p>1、缓冲流 ：BufferReader  BufferWriter   BufferInputStream   BufferOutputStream</p><p>2、作用：提高读取和写入的速度</p><p>​            提高读取和写入的速度的原因：内部提供了一个大小为8192的缓冲区</p><p>3、处理流，就是套接在已有流的基础上</p></blockquote><h2 id="BufferInputStream-BufferOutputStream"><a href="#BufferInputStream-BufferOutputStream" class="headerlink" title="BufferInputStream   BufferOutputStream"></a><strong>BufferInputStream   BufferOutputStream</strong></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//缓冲流处理流的一种，提高流的读取和写入的速度</span><span class="token comment">//主要是在内部提供了一个缓冲区</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bufferTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">//1、造文件</span>        <span class="token class-name">File</span> srcPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./src/古典雅致美女打着纸伞3840_2160.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> destPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./src/01.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、造流</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//造处理流  即缓冲流</span>        bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//复制的操作  读取和写入</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">//资源关闭</span>        <span class="token comment">//要求，先关闭外层的流，再关闭内层的流</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bis<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bos<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭外层流的同时，内层流也会自动的关闭</span>        <span class="token comment">//关闭内层的代码可以省略</span>        <span class="token comment">/*fis.close();        fos.close();*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">FileInputOutputStreamTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> srcPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> destPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fos<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> src<span class="token operator">=</span><span class="token string">"./src/古典雅致美女打着纸伞3840_2160.jpg"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> dest<span class="token operator">=</span><span class="token string">"./src/02.jpg"</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start1<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bufferTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start2<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputOutputStreamTest</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前"</span><span class="token operator">+</span><span class="token punctuation">(</span>start2<span class="token operator">-</span>start1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   后"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//前55   后2294</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BufferReader-BufferWriter"><a href="#BufferReader-BufferWriter" class="headerlink" title="**BufferReader   BufferWriter **"></a>**BufferReader   BufferWriter **</h2><blockquote><p>为了提高字符流读写的效率，引入了缓冲机制，进行字符批量的读写，提高了单个字符读写的效率。BufferedReader用于加快读取字符的速度，BufferedWriter用于加快写入的速度</p><p>BufferedReader和BufferedWriter类各拥有8192个字符的缓冲区。当BufferedReader在读取文本文件时，会先尽量从文件中读入字符数据并放满缓冲区，而之后若使用read()方法，会先从缓冲区中进行读取。如果缓冲区数据不足，才会再从文件中读取，使用BufferedWriter时，写入的数据并不会先输出到目的地，而是先存储至缓冲区中。如果缓冲区中的数据满了，才会一次对目的地进行写出。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testBufferedReaderBufferedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./src/demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedWriter</span> bw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./src/demo_copy.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*//方式一，和之前一样使用 char[]数组        char[] ch=new char[1024];        int len;        while((len=br.read(ch))!=-1){            bw.write(ch);        }*/</span>        <span class="token comment">//还有一种方式 使用String  raedLine</span>        <span class="token class-name">String</span> data<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BufferedReader中的两种读取方法的对比</p><table><thead><tr><th>源文件</th><th>String   data        br.readLine(data)!=null</th><th>char[]  ch     (len=br.read(ch))!=-1</th></tr></thead><tbody><tr><td><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220820110241120.png" alt="image-20220820110241120"></td><td><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220820110140753.png" alt="image-20220820110140753"></td><td><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220820110511650.png" alt="image-20220820110511650"></td></tr><tr><td></td><td>中间没有不读取换行符号，遇到换行符号就直接返回读取到的一行数据</td><td>能读取到换行符</td></tr></tbody></table><p><strong>注意： 在BufferedReader 和BufferedWriter中有一个flush()方法，调用时，不管缓冲区有多少内容都直接返回出来，默认是缓冲区满和没有了才返回</strong></p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><blockquote><p><strong>1、标准的输入输出流</strong></p><p>​    1.1</p><p>​        System.in:标准的输入流，默认从键盘输入   <strong>类型是InputStream</strong></p><p>​        System.out:标准的输出流，默认从控制台输出</p><p>​    1.2：重定向</p><p>​        System类的setIn(InputStream is)/setOut(PrintStream ps)方式重新指定输入和输出的</p><p><strong>2、打印流</strong></p><p><strong>3、数据流</strong></p></blockquote><p>1单纯使用System.in实现程序的输入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//输入    使用 Scanner实现，调用next()返回一个参数</span>    <span class="token comment">//        使用System.in实现   System.in ---&gt;BufferedReader的readLine();</span>    <span class="token class-name">InputStreamReader</span> is<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedReader</span> br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> data<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">"exit"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序输入即将结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"|-------|"</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><blockquote><p>Properties类表示一个持久的属性集。Properties可以保存在流中或从流中加载。属性列表中每一个键即其对应的值都是一个字符串。</p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>Hashtable(和HashMap不同的是，Hashtable是一个<strong>线程安全</strong>的)的子类，<strong>map集合中的方法都是可以用的</strong></li><li>该集合没有泛型，<strong>键和值都只能是字符串</strong></li><li>他是一个可以持久化的<strong>属性集</strong></li><li>它主要使用<strong>getProperty没有设置synchronized , setProperty设置类synchronized</strong>获取和改变他的值</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>void   load(InputStream  inStream)    从输入字节流读取属性列表</li><li>void  load(Reader reader)  从输入字符流读取属性列表（关键字和元素对）</li><li>void  store(OutputStream out,String comments) <strong>将此属性列表（key和value）写入Properties表中，亦适用于使用load(InputStream)方法加载到Properties表中的格式输出流</strong></li><li>void  store(Writer writer,String comments)  <strong>使用load(Reader)方法的格式输出到输出字符流</strong></li></ul><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>方式一：</p><h2 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h2><blockquote><p><strong>进程：</strong>进程值正在运行的程序。确切的说，当一个程序加载到内存中运行的时候，即变成了一个进程，<strong>进程时处于运行过程中的程序，具有一定的独立功能</strong></p><p><strong>线程：</strong> <strong>线程时进程的一个执行单元</strong>，负责当前进程中程序的运行 <strong>一个进程至少有一个线程，可以有多个线程的</strong></p><p><strong>总结： 一个程序至少有一个进程，一个进程中可以包含多个线程</strong></p></blockquote><h3 id="多线程开发"><a href="#多线程开发" class="headerlink" title="多线程开发"></a>多线程开发</h3><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220713205433269.png" alt="多线程开发"></p><h3 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h3><p>有两种调度模式：分时调度模型和抢占式调度模型</p><p><strong>分时调度：</strong>所有线程轮流使用cpu的使用权，平均分配每一个线程占用的CPU的时间</p><p><strong>抢占式调度：</strong>优先让优先级高的线程使用CPU</p><h2 id="通过继承Thread类来实现多线程"><a href="#通过继承Thread类来实现多线程" class="headerlink" title="通过继承Thread类来实现多线程"></a>通过继承Thread类来实现多线程</h2><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220824174209808.png" alt="Thread的构造方法"></p><p>不能直接调用线程中的run()方法，要调用线程的start()函数，才能实现多线程</p><p>一个线程只能启动一次，要不然就会报错误IllegalThreadStateException();</p><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token operator">=</span>title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token operator">+</span><span class="token string">"i的值是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于Runable接口实现多线程"><a href="#基于Runable接口实现多线程" class="headerlink" title="基于Runable接口实现多线程"></a>基于Runable接口实现多线程</h2><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220713200419002.png" alt="Runable实现多线程"></p><pre class="line-numbers language-none"><code class="language-none">Thread runable1=new Thread(new MyThread_R("线程R1"));runable1.start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用lambda表达式来创建线程，在以后的开发对于多线程的实现，优先考虑的就是Runable接口的实现，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> title<span class="token operator">=</span><span class="token string">"线程对象-"</span><span class="token operator">+</span>x<span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> title<span class="token operator">+</span><span class="token string">"lambda表达式"</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Thread与Runable关系"><a href="#Thread与Runable关系" class="headerlink" title="Thread与Runable关系"></a>Thread与Runable关系</h3><p>使用Runable是最方便的，可以避免单继承的局限，也可以更好的对功能进行扩充</p><p>但是从结构上来看，之前继承Thread的时候，还是实现Runable接口中的run()方法</p><p>通过 Thread 类的构造方法传递了一个 Runnable 接口对象的时候，那么该接口对象将被 Thread 类中的 target 属性所保存，在 start() 方法执行的时候会调用Thread类中的 run() 方法，而这个 run() 方法去调用 Runnable 接口子类被覆写过的 run() 方法。</p><p>多线程开发的本质上是多个线程可以进行同一资源的抢占</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220713201232676.png" alt="Thread和Runable的关系"></p><h2 id="Callable接口实现多线程"><a href="#Callable接口实现多线程" class="headerlink" title="Callable接口实现多线程"></a>Callable接口实现多线程</h2><p>Runable接口有一个问题，就是线程结束之后无法获取一个返回值，jdk1.5之后就提出了java.util.concurrent.Callable,就解决了这一问题</p><p>Callable定义的时候可以设置一个泛型，此泛型的类型就是返回数据的类型，这样的好处就是 可以避免一些安全隐患</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token comment">/** * 为什么说Callable接口的方式创建多线程比实现Runable接口创建多线程强大？ * 1、call() 可以有返回值 * 2、call() 可以抛出异常，被外面的操作捕获，获取异常信息 * 3、call()是支持泛型的，指明泛型的时候：1、重写的类需要明确泛型，2、创建的FutureTask对象也需要指明泛型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadNew</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyCallMyThread</span> thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyCallMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//get()返回值为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>            <span class="token comment">//如果对call的返回值不感兴趣或者说，返回值并没有什么实际效果，那就不用调用get()方法</span>             <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyCallMyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token comment">/** * 创建线程的方式四：使用线程池 * * 好处： *      1、提高响应速度（减少创建新线程的时间） *      2、减低资源消耗（重复利用线程池中的线程，不需要每次都创建 *      3、便于线程管理 *          corePoolSize():核心池的大小 *          maximumPoolSize():最大线程数 *          keepAliveTime():线程没有任务时最多保持多长时间后会终止 */</span><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NumberThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1、提供指定线程数量的线程池</span>        <span class="token class-name">ExecutorService</span> service<span class="token operator">=</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池的属性</span>        <span class="token comment">//ExecutorService 是一个线程</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadPoolExecutor</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>        <span class="token comment">//service1.set</span>        <span class="token comment">//2、执行指定的线程操作、需要提供实现Runable接口或Callable接口实现类的对象</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合使用于Runable;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合使用于Runable;</span>        <span class="token comment">//service.submit();//适合使用于Callable;</span>        <span class="token comment">//3、关闭连接池</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220830222923344.png" alt="设置线程池的属性"></p><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><blockquote><p>序列化操作的对象必须实现Serializable接口</p><p>读取末尾 抛出EOFException</p><p>序列化流没有续写：：增删改必须 全部读取，修改后，再覆盖</p></blockquote><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><h2 id="Runable和Callable的区别"><a href="#Runable和Callable的区别" class="headerlink" title="Runable和Callable的区别"></a>Runable和Callable的区别</h2><p>1、Runable是在jdk1.0的时候提出的多线程的实现接口，而Callable实在jdk1.5之后提出的</p><p>2、java.long.Runable接口中只提供了一个run()方法，并且没有返回值，就无法判断该线程是否已经结束</p><p>3、java.util.concurrent.Callable接口提供了call()方法，可以有返回值</p><h2 id="创建多线程有几种方式-四种方法"><a href="#创建多线程有几种方式-四种方法" class="headerlink" title="创建多线程有几种方式  四种方法"></a>创建多线程有几种方式  四种方法</h2><p>1、继承Thread类</p><p>2、基于Runable接口实现</p><p>3、Callable接口实现多线程</p><p>4、使用线程池</p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之算法2</title>
      <link href="2022/07/11/java-xue-xi-zhi-suan-fa-er/"/>
      <url>2022/07/11/java-xue-xi-zhi-suan-fa-er/</url>
      
        <content type="html"><![CDATA[<p>@</p><h1 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h1><h3 id="BF算法即为暴力破解算法"><a href="#BF算法即为暴力破解算法" class="headerlink" title="BF算法即为暴力破解算法"></a>BF算法即为暴力破解算法</h3><p>通过一位一位的移动，和比较来确定了，相重复的字符串</p><h3 id="RK算法属于hash算法"><a href="#RK算法属于hash算法" class="headerlink" title="RK算法属于hash算法"></a>RK算法属于hash算法</h3><p>通过一位一位的移动，来计算和相比较的目标字符串的hash值，这个减少比较的次数，但是也会出现需要移动一次，比较整个字符串的内容，跟暴力算法一样了</p><h3 id="BM算法"><a href="#BM算法" class="headerlink" title="BM算法"></a>BM算法</h3><p><a href="https://blog.csdn.net/DBC_121/article/details/105569440">BM算法</a></p><p>坏字符规则：<strong>从右往左匹配</strong>，从要找的A字符串中找到<strong>第一个不匹配</strong>的字符（就是坏字符），将B字符串<strong>右移</strong>，直到B串中出现与A串坏字符对齐，再往左边继续寻找坏字符，如果B目标字符串中<strong>没有该坏字符</strong>，则直接移动到该坏字符的<strong>下一位</strong>即可；<strong>也就是在B中不匹配的字符之前找一个，跟A中坏字符相同的，把Byi</strong></p><p>好后缀规则：从右往左匹配，找到坏字符（坏字符之后的就是好后缀），往左找B中是否还有该好后缀，若有则将B右移到该位置与A好后缀对齐，重复该规则。如果B串往右没有该好后缀，则右移到好后缀的右边一位，重复该规则，避免B串的前缀与好后缀的后缀匹配</p><p><strong>综合使用，那种移动的位数多使用那种</strong></p><p>时间复杂度O(n/m) ,退化时间复杂度O(n*m)</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220702105017335.png" alt="BM算法"></p><h3 id="KMP复杂度"><a href="#KMP复杂度" class="headerlink" title="KMP复杂度"></a>KMP复杂度</h3><p>前缀，后缀</p><p>PMT值：前缀集和后缀集的交集中集中的最长元素的长度</p><p>在不匹配的字符串前A串的后缀和B串的前缀的最大公共交叉字符串</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220728114657072.png" alt="例子"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之算法</title>
      <link href="2022/07/02/java-xue-xi-zhi-suan-fa/"/>
      <url>2022/07/02/java-xue-xi-zhi-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="十大排序算法"><a href="#十大排序算法" class="headerlink" title="十大排序算法"></a>十大排序算法</h1><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220705162319850.png" alt="稳定性，时间复杂度和空间复杂度"></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>比较相邻元素，如果前一个比后一个大，则交换他们</p><p>冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但是这种改进对于提升性能没有太大作用</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>在未排序的序列中找到最小的元素，存放到起始位置。再找其余最小的排到已排序列的末尾，直到所有元素都排序完毕；</p><p><strong>唯一好处就是不占额外空间了吧</strong></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>把第一个排列元素看作有序序列，第二个往后是未排列序列；</p><p>从头到尾扫描未排列序列，将扫描到的元素插入到有序序列的适当位置（相同时，插入到相等元素的后边）</p><p>有一种优化算法–折半插入</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序又称递减增量排序算法，是非稳定排序算法</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220705174535956.png" alt="希尔排序过程"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shell_demo2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//希尔排序</span>    <span class="token keyword">int</span> skip<span class="token operator">=</span>list<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> skip<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//System.out.printf("每%d轮的i:%d值\n",skip,i);</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> skip<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token operator">=</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>j <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>temp<span class="token operator">&lt;</span>list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> skip<span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">[</span>j<span class="token operator">+</span>skip<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        skip <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>skip <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220705174838503.png" alt="归并排序的实现过程"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//左右归并</span>        <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>high<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span> low<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 把较小的数先移到新数组中</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 把左边剩余的数移入数组</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 把右边边剩余的数移入数组</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 把新数组中的数覆盖nums数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>x<span class="token operator">+</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>快速排序时间复杂度：</strong></p><p> 最好的时间复杂度和平均时间复杂度就是O(nlogn); </p><p>正常情况下是递归log<sub>2</sub>n次，每次遍历的最坏时间复杂度是n，所以平均时间复杂度是O(nlogn)；</p><p> 最好的时间复杂度就是每次都划分的很均匀；时间复杂度就是O(nlogn)； </p><p>最坏的时间复杂度是O(n^2),这种情况就是原先的数据就是排序好，这样每次只能位移一个数据， 每次划分的子序列只比上一次划分少一个记录，注意两一个为空。</p><p>从数列中挑出一个元素，作为基准；重新排列数列，所有比基准小的摆放在基准前面，所有比基准大的元素摆到基准后边（相同的数字可以放在任意一边）；递归的把小于基准值元素的子序列和大于基准元素的字序列进行排序</p><p><img src="/2022/07/02/java-xue-xi-zhi-suan-fa/%E6%A1%8C%E9%9D%A2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-08-26%20090831.png" alt="快速排序的部分过程"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//quick_sort(list, 0, list.length - 1)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> partitionindex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partitionindex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partitionindex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="随机化快速排序"><a href="#随机化快速排序" class="headerlink" title="随机化快速排序"></a>随机化快速排序</h3><p>就是在设置基准值的时候不采用最左边的那个数作为基准值，而是采用一个随机数列取一个随机的索引跟最左边的进行交换，然后进行排序</p><h3 id="双路快速排序"><a href="#双路快速排序" class="headerlink" title="双路快速排序"></a>双路快速排序</h3><p>就是两边都设置索引值，把比基准值小的i+1并进行交换，比基准值大的j-1,然后进行i和j上的值进行交换，之后i+1，j-1；然后进行下一轮，直到i&gt;j时候暂停，这时候就说明全部都已经比较过一次了；</p><h3 id="三路排序算法"><a href="#三路排序算法" class="headerlink" title="三路排序算法"></a>三路排序算法</h3><p>是二路快速排序的进一步改进版本，将值分为三部分，小于V，等于V，大于V，V是标定值；三路快速排序，对处理大量重复元素的数组非常有效，提高了快速排序的过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> refer<span class="token operator">=</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lt<span class="token operator">=</span>l<span class="token punctuation">;</span>    <span class="token keyword">int</span> gt<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>gt<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>refer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>lt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            lt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>refer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>gt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            gt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//交换标准值</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>lt<span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>gt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>lt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>gt<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>先构造根据要求序列构造相应的大堆或者小堆，然后把堆顶元素和最后一个元素进行互换，得到最大值或者最小值，然后对其他在进行大堆或者小堆排序，重复操作，直到把所有元素都排序完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">duisort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span>sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buildMaxheap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">handif</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildMaxheap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">handif</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handif</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> largest<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        largest<span class="token operator">=</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        largest<span class="token operator">=</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>largest<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>largest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">handif</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>largest<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对分支内的所有序列进行排序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i <span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>创建一个数列，数列的长度就是所给数组中的最大值，遍历所给数组arr，新数列中对应的序号的内容加一，遍历新创数组，可以得到对应的数列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">jishu</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr_num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr_num<span class="token punctuation">[</span>item <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(Arrays.toString(arr_num));</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> hassortindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> arr_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>hassortindex<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                hassortindex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token class-name">Max</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;</span> <span class="token class-name">Max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Max</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Max</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>什么时候最快：输入的数据可以均匀分配到每一个桶中；</p><p>什么时候最慢：当输入的数据被分配到同一个桶中；</p><p>利用多维数组，每一行作为一个桶的概念，每一个桶的大小是可以自己定的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">tong_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//tong_sort(list,5)</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxValue<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minValue<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">&gt;</span>maxValue<span class="token punctuation">)</span>maxValue<span class="token operator">=</span>item<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">&lt;</span>minValue<span class="token punctuation">)</span>minValue<span class="token operator">=</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> bucketCount<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>maxValue<span class="token operator">-</span>minValue<span class="token punctuation">)</span><span class="token operator">/</span>bucketSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"桶的数量是"</span><span class="token operator">+</span>bucketCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>bucketCount<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token punctuation">(</span>item<span class="token operator">-</span>minValue<span class="token punctuation">)</span><span class="token operator">/</span>bucketSize<span class="token punctuation">;</span>        buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">arrAppend</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> arrindex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket<span class="token operator">:</span>buckets<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        demo_quick<span class="token punctuation">.</span><span class="token function">quick_sort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bucket<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用快排对每一个桶内元素进行排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token operator">:</span>bucket<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>arrindex<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>            arrindex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrAppend</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序：根据键值的每一位数字来分配桶；</p><p>计数排序：每个桶只存储单一数值；</p><p>桶排序：每一个桶存储一定范围的数值；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">radixSort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//假定全部都是正整数的二位数，主要是为了了解算法实现</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr_num<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">arrAdd</span><span class="token punctuation">(</span>arr_num<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span>arr_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中间的数列："</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr_num<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">arrAdd</span><span class="token punctuation">(</span>arr_num<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span>arr_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getBucketCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span><span class="token keyword">int</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>list<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序算法的衍生问题"><a href="#排序算法的衍生问题" class="headerlink" title="排序算法的衍生问题"></a>排序算法的衍生问题</h2><p>归并排序和快速排序，都使用了分治算法；分治算法就是将原来的问题分割成同等结构的问题，之后将子问题逐个解决，原问题也就得到了解决</p><h1 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><p>顺序遍历查找</p><h2 id="折半查找（二分查找）"><a href="#折半查找（二分查找）" class="headerlink" title="折半查找（二分查找）"></a>折半查找（二分查找）</h2><p><strong>说明：元素必须是有序的，如果是无序的则要先进行排序操作</strong></p><p>复杂度分析 ：最坏情况下log<sub>2</sub>(n+1);期望时间复杂度O(log<sub>2</sub>n)    ;;(测试 log<del>2</del>n)</p><p><strong>下代码是查找小于等于t的最接近的值，若要查找t,则需要将5-8拆成两个if  ,else if</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">=</span>mid<span class="token punctuation">;</span>            right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h2><p>复杂度分析：查找成功或者失败的时间复杂度均为O(log<sub>2</sub>(log<sub>2</sub>n))。</p><pre class="line-numbers language-none"><code class="language-none">public  int interpolationSearch(int[] nums,int key){    int low=0;int height=nums.length-1;int ans=-1;    while(low&lt;height){        int mid=low+(int)((float)(key-nums[low])/(nums[height]-nums[low])*(height-low));        if(nums[mid]==key)return mid;        if(nums[mid]&gt;key)height=mid-1;        if(nums[mid]&lt;key)low=mid+1;    }    return ans;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h2><p>是二分查找的一种提升算法，通过运用黄金比例的概念再数列中进行选点进行查找，提高查找效率。同样的斐波那契查找也属于一种有序的查找算法。<strong>要求表中记录的个数为某个斐波那契数-1    即length=F(k)-1</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibonacciSearch</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexes<span class="token operator">=</span><span class="token function">buildFibonacci</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span>indexes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您输入的字符串有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span>indexes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span> ans<span class="token operator">=</span>mid<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">buildFibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> fibo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fibo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fibo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> add_num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>add_num<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        add_num<span class="token operator">=</span>fibo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>fibo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fibo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>add_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>add_num<span class="token operator">!=</span>num<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fibo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树表查询"><a href="#树表查询" class="headerlink" title="树表查询"></a>树表查询</h2><h3 id="二叉排序树的建立以及二叉排序树的搜索"><a href="#二叉排序树的建立以及二叉排序树的搜索" class="headerlink" title="二叉排序树的建立以及二叉排序树的搜索"></a>二叉排序树的建立以及二叉排序树的搜索</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Key</span> key<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token operator">=</span>key<span class="token punctuation">;</span>        left<span class="token operator">=</span>right<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span><span class="token comment">//根节点</span><span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//树中的节点个数</span><span class="token keyword">public</span> <span class="token class-name">Demo_Deep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分块查询"><a href="#分块查询" class="headerlink" title="分块查询"></a>分块查询</h2><h2 id="哈希表查找"><a href="#哈希表查找" class="headerlink" title="哈希表查找"></a>哈希表查找</h2><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表的创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token class-name">T</span> item<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> item<span class="token punctuation">,</span><span class="token class-name">Node</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token operator">=</span>item<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">DemoLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//清空链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//设置头结点的下一个结点为空，把链表的长度归为0</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//返回链表的长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">N</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取指定位置i处的元素</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> node<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加指定的元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span> n<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建新节点,让最后一个结点指向新结点</span>        n<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//链表长度加一</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加指定的一个元素,再线性表的第i个元素之前插入一个值为t的数据元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> pre<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> curr<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">Node</span> newnode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next<span class="token operator">=</span>newnode<span class="token punctuation">;</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//删除并返回线性表中的第i个数据元素</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> pre<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> node<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">N</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//返回线性表中首次出现的指定的数据元素的位序号，若不存在则返回-1</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> node<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>item<span class="token operator">==</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//提供一个遍历方法</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span> n<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">LIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> n<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TowWayLinkList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> last<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token class-name">T</span> data<span class="token punctuation">;</span>        <span class="token class-name">Node</span> pre<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span>  <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">,</span><span class="token class-name">Node</span> pre<span class="token punctuation">,</span><span class="token class-name">Node</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pre<span class="token operator">=</span>pre<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">TowWayLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//初始化头结点和尾结点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//初始化链表长度</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>pre<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">N</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token class-name">T</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> last<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链表为空</span>            <span class="token class-name">Node</span> newNode  <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>head<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next<span class="token operator">=</span>newNode<span class="token punctuation">;</span>            last<span class="token operator">=</span>newNode<span class="token punctuation">;</span>            last<span class="token punctuation">.</span>next<span class="token operator">=</span>last<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//链表不为空</span>            <span class="token class-name">Node</span> oldlast<span class="token operator">=</span>last<span class="token punctuation">;</span>            <span class="token class-name">Node</span> newNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>oldlast<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oldlast<span class="token punctuation">.</span>next<span class="token operator">=</span>newNode<span class="token punctuation">;</span>            last<span class="token operator">=</span>newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> n<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span>i<span class="token operator">&amp;&amp;</span>index<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> nextNode<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">//创建新节点</span>        <span class="token class-name">Node</span> newNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>nextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span>next<span class="token operator">=</span>newNode<span class="token punctuation">;</span>        nextNode<span class="token punctuation">.</span>pre<span class="token operator">=</span>newNode<span class="token punctuation">;</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> n<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span>i<span class="token operator">&amp;&amp;</span>index<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> n<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> node<span class="token operator">=</span>p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">Node</span> nextNode<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next<span class="token operator">=</span>nextNode<span class="token punctuation">;</span>        nextNode<span class="token punctuation">.</span>pre<span class="token operator">=</span>p<span class="token punctuation">;</span>        <span class="token class-name">N</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//提供一个遍历方法</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">TIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span> n<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> n<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表反转"><a href="#单链表反转" class="headerlink" title="单链表反转"></a>单链表反转</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用来反转整个链表</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//判断是否为空链表,若为空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//反转指定的curr,并且把反转之后的结点</span><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">Node</span> curr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token keyword">return</span> curr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//递归的调用当前结点的下一个结点，返回值就是利埃纳表反转后，当前结点的下一个结点</span>    <span class="token class-name">Node</span> pre<span class="token operator">=</span><span class="token function">reverse</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//让返回的结点的下一个结点</span>    pre<span class="token punctuation">.</span>next<span class="token operator">=</span>curr<span class="token punctuation">;</span>    curr<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>item<span class="token operator">+</span><span class="token string">"排序完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><h3 id="中间值问题、单链表是否有环路、环路的入口问题"><a href="#中间值问题、单链表是否有环路、环路的入口问题" class="headerlink" title="中间值问题、单链表是否有环路、环路的入口问题"></a>中间值问题、单链表是否有环路、环路的入口问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getMid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Node</span> fast<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token class-name">Node</span> slow<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Node</span> fast<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token class-name">Node</span> slow<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token class-name">CircleInter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Node</span> fast<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token class-name">Node</span> slow<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token class-name">Node</span> temp<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><p>约瑟夫问题可以转化为一个环形链表来处理这个问题，自杀的人通过删除结点来模拟</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈是一个基于先进先出的数据结构，是一种只能在一端进行插入和删除操作的特殊线性表</p><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Demo_stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> charsStack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Demo_stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> ch<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        charsStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> ch<span class="token operator">:</span>charsStack<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Character</span> ch<span class="token operator">=</span>charsStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">)</span>num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h3><p>就是后缀表达式的实现，一般人们都习惯于使用，中缀表达式。即a+b,逆波兰表达式用ab+表示</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列的创建这次也是使用的线性表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//向队列中加入元素</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        last<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>last<span class="token punctuation">;</span><span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//当前last结点不为空</span>        <span class="token class-name">Node</span> oldlast<span class="token operator">=</span>last<span class="token punctuation">;</span>        last<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oldlast<span class="token punctuation">.</span>next<span class="token operator">=</span>last<span class="token punctuation">;</span><span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//从队列中取出元素</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> oldfirst<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token operator">=</span>oldfirst<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token class-name">N</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        last<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> oldfirst<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>是一类特殊的数据结构的统称；堆可以看作一颗完全二叉树的数组对象；堆中的某个节点的之总是不大于或不小于其父节点的值；</p><h2 id="大根堆（小根堆）的建立，大根堆（小根堆）的取出其中的元素"><a href="#大根堆（小根堆）的建立，大根堆（小根堆）的取出其中的元素" class="headerlink" title="大根堆（小根堆）的建立，大根堆（小根堆）的取出其中的元素"></a>大根堆（小根堆）的建立，大根堆（小根堆）的取出其中的元素</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo_shiftDown</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Demo_shiftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>capacity<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token operator">=</span>capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">assert</span> count<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>capacity<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">shiftUp</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"子节点是"</span><span class="token operator">+</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"父节点是"</span><span class="token operator">+</span>data<span class="token punctuation">[</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"||是否要换位置"</span><span class="token operator">+</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">T</span> temp<span class="token operator">=</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//这往上是大根堆（小根堆）的建立过程</span>    <span class="token comment">//从大堆中取出堆顶元素，即去除所存储的最大数据</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">assert</span> count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">T</span> ret<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取最大堆中的堆顶元素</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token operator">&lt;</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>count<span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shiftDown结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Demo_shiftDown</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> heapShiftDown <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo_shiftDown</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 堆中元素个数</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">// 堆中元素取值范围[0, M)</span>        <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>            heapShiftDown<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 将最大堆中的数据逐渐使用extractMax取出来</span>        <span class="token comment">// 取出来的顺序应该是按照从大到小的顺序取出来的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heapShiftDown<span class="token punctuation">.</span><span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 确保arr数组是从大到小排列的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token keyword">assert</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础堆排序"><a href="#基础堆排序" class="headerlink" title="基础堆排序"></a>基础堆排序</h2><p>①基础堆排序，建立大根堆或者小根堆之后②最大元素跟最后一个元素换位置之后count-1,③然后从最后一个非叶子节点向上比较向左依次比较④重新建立大根堆和小根堆；重复上述②③④动作，直到堆中的元素全部取出</p><h2 id="优化堆排序"><a href="#优化堆排序" class="headerlink" title="优化堆排序"></a>优化堆排序</h2><p>主要是将上述的第三步，改成了比较少数，跟改变值有分支关系的就行了，例如:62和17交换位置之后，只需要给更改节点到最下边叶子节点的值就可以了，但是基础堆排序就需要遍历整个非叶子节点，重新建堆，减少了比较次数</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220712130442131.png" alt="image-20220712130442131"></p><h2 id="索引堆及其优化"><a href="#索引堆及其优化" class="headerlink" title="索引堆及其优化"></a>索引堆及其优化</h2><p>如果堆中存储的元素较大，那么进行交换就需要消耗大量的时间，这个时候就需要使用索引堆，堆中存储的是数组的索引，操作的也都是索引</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>      <span class="token comment">// 最大索引堆中的数据</span><span class="token keyword">protected</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indexes<span class="token punctuation">;</span>    <span class="token comment">// 最大索引堆中的索引</span><span class="token keyword">protected</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span class="token comment">// 构造函数, 构造一个空堆, 可容纳capacity个元素</span><span class="token keyword">public</span> <span class="token class-name">Demo_IndexHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>    data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>capacity<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    indexes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>capacity<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回索引堆中的元素个数</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回一个布尔值, 表示索引堆中是否为空</span><span class="token comment">// 向最大索引堆中插入一个新的元素, 新元素的索引为i, 元素为item</span><span class="token comment">// 传入的i对用户而言,是从0索引的</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">assert</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">assert</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> capacity<span class="token punctuation">;</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    indexes<span class="token punctuation">[</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    count <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">shiftUp</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 从最大索引堆中取出堆顶元素, 即索引堆中所存储的最大数据</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">assert</span> count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> ret <span class="token operator">=</span> data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">swapIndexes</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> count <span class="token punctuation">)</span><span class="token punctuation">;</span>    count <span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 从最大索引堆中取出堆顶元素的索引</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">extractMaxIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">assert</span> count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> indexes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">swapIndexes</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> count <span class="token punctuation">)</span><span class="token punctuation">;</span>    count <span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxIndex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取最大索引堆中的堆顶元素</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">assert</span> count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引列表中索引序号为"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"索引中对应的索引"</span><span class="token operator">+</span><span class="token function">getMaxIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"对应的值是"</span><span class="token operator">+</span><span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 获取最大索引堆中的堆顶元素的索引</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">assert</span> count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> indexes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swapIndexes</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> indexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    indexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> indexes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    indexes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//k是堆的索引</span><span class="token comment">// 索引堆中, 数据之间的比较根据data的大小进行比较, 但实际操作的是索引</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> k <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">swapIndexes</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 索引堆中, 数据之间的比较根据data的大小进行比较, 但实际操作的是索引</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">&lt;=</span> count <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> count <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>            j <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>indexes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swapIndexes</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 测试 IndexMaxHeap</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token class-name">Demo_IndexHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexMaxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo_IndexHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>        indexMaxHeap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> i <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indexMaxHeap<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值的索引"</span><span class="token operator">+</span>indexMaxHeap<span class="token punctuation">.</span><span class="token function">getMaxIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    indexMaxHeap<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二分搜索树"><a href="#二分搜索树" class="headerlink" title="二分搜索树"></a>二分搜索树</h2><p>若它的左子树不为空，左子树上所有的节点都小于他的根节点</p><p>若他的右子树不为空，右子树上所有的节点都小于它的根节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo_insert</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Key</span> key<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span> left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token operator">=</span>key<span class="token punctuation">;</span>            left<span class="token operator">=</span>right<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span><span class="token comment">//根节点</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//树中的节点个数</span>    <span class="token keyword">public</span> <span class="token class-name">Demo_insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分搜索树的插入"><a href="#二分搜索树的插入" class="headerlink" title="二分搜索树的插入"></a>二分搜索树的插入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分搜索树节点的搜索"><a href="#二分搜索树节点的搜索" class="headerlink" title="二分搜索树节点的搜索"></a>二分搜索树节点的搜索</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分搜索树深度优先遍历"><a href="#二分搜索树深度优先遍历" class="headerlink" title="二分搜索树深度优先遍历"></a>二分搜索树深度优先遍历</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//前序遍历，先遍历根节点，在遍历左节点，在遍历右节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//中序遍历，先左节点，再根节点，再右节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//后序遍历，先左子节点，再右节点，最后根节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分搜索树层级遍历"><a href="#二分搜索树层级遍历" class="headerlink" title="二分搜索树层级遍历"></a>二分搜索树层级遍历</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token class-name">LevelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> q<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> node<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分搜索树节点删除"><a href="#二分搜索树节点删除" class="headerlink" title="二分搜索树节点删除"></a>二分搜索树节点删除</h2><p>删除二分搜索树的最大或最小结点</p><p>①找到最大或者最小结点：遍历左子树或者右子树</p><p>②如果最小结点没有右子树，直接删除；如果最小结点有右子树，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> rightNode<span class="token operator">=</span>node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rightNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Node</span><span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">removeMin</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="红黑树的定义"><a href="#红黑树的定义" class="headerlink" title="红黑树的定义"></a>红黑树的定义</h3><p>​    1、红链接均为左连接；<br>​    2、没有任何一个结点同时为两条红链接相连<br>​    3、该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同<br><strong>红黑树是基于2-3树进行定义的</strong><br>红黑树的树结点API设计</p><h3 id="红黑树的平衡化"><a href="#红黑树的平衡化" class="headerlink" title="红黑树的平衡化"></a>红黑树的平衡化</h3><p>​    红黑树的左旋<br>​        使用范围：红色链接出现在右节点</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/12932616628964812.png" alt="左旋"></p><p>​    红黑树的右旋<br>​        连续两个链接是红色链接</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/29452216628964912.png" alt="右旋"></p><h3 id="红黑树的插入"><a href="#红黑树的插入" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h3><pre><code>#### 向单个2-结点中拆入新键</code></pre><p>​        ①当新键小于当前结点的键，我们只需要新增一个红色链接即可<br>​        ②当新键大于当前结点的键，那么需要新建一个红色的右链接，这时候就需要通过左旋，把红色链接变成左链接，操作才算完成</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/8842016628968032.png" alt="8842016628968032"></p><pre><code>#### 向底部2-结点插入新键</code></pre><p>​        直接红色链接进行链接，如果出现红色结点在右侧，那么要进行左旋，之后要保证符合红黑树定义<br>    #### 颜色反转<br>​        当一个结点的左子节点和右子节点的color都是红色的时候，也就是出现了临时的4-结点<br>​        这时候只需要把左子节点和右子节点的color变成黑色，同时让当前结点的颜色变成红色</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/24839916628971342.png" alt="颜色反转"></p><h4 id="向一个双键树（即一个3-结点）中插入新建"><a href="#向一个双键树（即一个3-结点）中插入新建" class="headerlink" title="向一个双键树（即一个3-结点）中插入新建"></a>向一个双键树（即一个3-结点）中插入新建</h4><p>​        这种情况又分为三种子情况<br>​        ①大于原树当中的两个结点<br>​            插入新键，用红键进行链接，之后就会发现出现了一个结点的两个结点都是红色链接的，这时候就需要进行颜色反转<br>​        ②小于元素当中的两个结点<br>​            插入新键，用红键进行链接，之后就会发现出现了连续两个链接都是红色的链接，这时候就需要进行右旋，之后进行颜色反转<br>​        ③介于两个值之间<br>​            用红色的新键进行链接，就会发现如下图，出现了红色链接是右链接，进行左旋，然后右旋，之后颜色反转</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/13912916628976192.png" alt="双键1"></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/21943716628976142.png" alt="双键树2"></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/27399316628976032.png" alt="双键3"></p><h3 id="红黑树的根节点的的颜色总是黑色的"><a href="#红黑树的根节点的的颜色总是黑色的" class="headerlink" title="红黑树的根节点的的颜色总是黑色的"></a>红黑树的根节点的的颜色总是黑色的</h3><h3 id="向树底部的3-结点插入新键"><a href="#向树底部的3-结点插入新键" class="headerlink" title="向树底部的3-结点插入新键"></a>向树底部的3-结点插入新键</h3><p>这个插入之后就会生成一个临时的4-结点，需要使用到颜色反转</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/38305716628978112.png" alt="3-添加1"></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/44052716628978362.png" alt="3-添加2"></p><h3 id="红黑树的API设计"><a href="#红黑树的API设计" class="headerlink" title="红黑树的API设计"></a>红黑树的API设计</h3><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220911213847074.png" alt="红黑树的API设计"></p><p>代码<strong>在Node中加上String方法主要是为了方便测试时出现的问题</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">day_algorithm<span class="token punctuation">.</span>demo_redBlackTree</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBlackTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token comment">//红黑树的实现</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> RED <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//红色链接标识</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> BLACK <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//黑色链接标识</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">public</span>  <span class="token class-name">Key</span> key<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Value</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token class-name">Value</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span> left<span class="token punctuation">,</span> <span class="token class-name">Node</span> right<span class="token punctuation">,</span> <span class="token keyword">boolean</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Node{"</span> <span class="token operator">+</span>                    <span class="token string">"key="</span> <span class="token operator">+</span> key <span class="token operator">+</span>                    <span class="token string">", value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                    <span class="token string">", left="</span> <span class="token operator">+</span> left <span class="token operator">+</span>                    <span class="token string">", right="</span> <span class="token operator">+</span> right <span class="token operator">+</span>                    <span class="token string">", color="</span> <span class="token operator">+</span> color <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">RedBlackTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//构造方法</span>        <span class="token class-name">N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRed</span><span class="token punctuation">(</span><span class="token class-name">Node</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断当前结点的父结点指向链接是否为红色</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>color<span class="token operator">==</span>RED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋调整</span>        <span class="token comment">//System.out.println(h.left+"-"+h.right);</span>        <span class="token comment">//System.out.println(root);</span>        <span class="token class-name">Node</span> x<span class="token operator">=</span>h<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token comment">//获取结点的右子结点</span>        h<span class="token punctuation">.</span>right<span class="token operator">=</span>x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left<span class="token operator">=</span>h<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color<span class="token operator">=</span>h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>color<span class="token operator">=</span>RED<span class="token punctuation">;</span>        <span class="token comment">//System.out.println("变换之后的"+root);</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋调整</span>        <span class="token class-name">Node</span> x<span class="token operator">=</span>h<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>left<span class="token operator">=</span>x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>right<span class="token operator">=</span>h<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color<span class="token operator">=</span>h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>color<span class="token operator">=</span>RED<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flipColors</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//颜色反转，相当于拆分4-结点</span>        h<span class="token punctuation">.</span>color<span class="token operator">=</span>RED<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>left<span class="token punctuation">.</span>color<span class="token operator">=</span>BLACK<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>right<span class="token punctuation">.</span>color<span class="token operator">=</span>BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span><span class="token class-name">Value</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在整个树上完成插入操作</span>        <span class="token comment">//System.out.println(root.left+"="+root.right);</span>        root<span class="token operator">=</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>color<span class="token operator">=</span>BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">,</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span><span class="token class-name">Value</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在指定树中，完成插入操作，并返回添加新元素后的新树</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//System.out.println(key+"--"+root.left+"="+root.right);</span>        <span class="token comment">//去比较h结点键和key的大小</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            h<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">put</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            h<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">put</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            h<span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//进行左旋,左子节点为黑色，右子结点为红色</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            h<span class="token operator">=</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//进行右旋,当当前结点的左子结点，和左子节点的左子节点都是红色链接</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            h<span class="token operator">=</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//颜色反转,当前结点的左子结点和右子结点都是红色</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">flipColors</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token class-name">Value</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//根据key，从树中查找对应的值</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Value</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Node</span> x<span class="token punctuation">,</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//从指定的树x中找出对应的值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> x<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">day_algorithm<span class="token punctuation">.</span>demo_redBlackTree</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBlackTreeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建红黑树</span>        <span class="token class-name">RedBlackTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBlackTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//插入红黑树</span>        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"张2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"张3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"张重复更改的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从树中获取元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tree.get(\"1\") = "</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tree.get(\"2\") = "</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tree.get(\"3\") = "</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>笔记1：markDown上下标可以使用</p><pre class="line-numbers language-note" data-language="note"><code class="language-note">&lt;sub&gt;下标&lt;/sub&gt;~下表~&lt;sup&gt;上标&lt;/sup&gt;^上标^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之基础</title>
      <link href="2022/07/02/java-xue-xi-zhi-ji-chu/"/>
      <url>2022/07/02/java-xue-xi-zhi-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>菜鸟教程学习笔记<a href="https://www.runoob.com/">菜鸟教程</a></p><h1 id="Java的数据类型"><a href="#Java的数据类型" class="headerlink" title="Java的数据类型"></a>Java的数据类型</h1><p>常用五大包：java.long(longuage)该包下的类，在使用时是不需要导包的;java.util   工具包；java,io  文件读写；java.net  网络编程包；java.sql 操作数据库</p><h2 id="八种基本类型"><a href="#八种基本类型" class="headerlink" title="八种基本类型"></a>八种基本类型</h2><p>六种数字类型（四个整数类型，两个浮点类型），一个字符类型，一种布尔类型</p><table><thead><tr><th>类型</th><th>范围</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>二的7次方    -128-127（默认值是0）</td><td></td></tr><tr><td>short</td><td>二的15次方   -32768~-32767 (默认值是0)</td><td></td></tr><tr><td>int</td><td>二的32次方   -2147483648~-2147483647（默认值是0）</td><td>Integer</td></tr><tr><td>long</td><td>二的64次方   -9223 372 036 854 775 808~9233 372 036 854 775 807（默认值是0L）</td><td></td></tr><tr><td>BigInteger</td><td></td><td></td></tr><tr><td>float</td><td>32位</td><td></td></tr><tr><td>double</td><td>64位</td><td></td></tr><tr><td>BigDecimal</td><td></td><td></td></tr><tr><td>boolean</td><td>默认值是false</td><td></td></tr><tr><td>char</td><td>16位   （默认值是’u0000’ String的值是null）</td><td>Character</td></tr></tbody></table><p>对于引用数据类型给变量存储的数据大多数都是一个地址值</p><p>大范围往小范围—&gt;强制转换</p><p>小范围往大范围—-&gt;自然转换</p><h2 id="控制修饰符"><a href="#控制修饰符" class="headerlink" title="控制修饰符"></a>控制修饰符</h2><table><thead><tr><th>修饰符</th><th>权限</th></tr></thead><tbody><tr><td>default</td><td>在同一个包内可见，不适用任何修饰符，使用对象：类、接口、变量、方法</td></tr><tr><td>private</td><td>在同一类内可见，使用对象：变量，方法。<strong>不能修饰类（外部类）</strong></td></tr><tr><td>public</td><td>对所有的类都可见，使用对象：变量，接口，变量，方法</td></tr><tr><td>protected</td><td>对同一包内的类的所有子类可见。使用对象：变量、方法。<strong>不能修饰类（外部类）</strong></td></tr></tbody></table><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220702163456232.png" alt="菜鸟教程网站截图"></p><h2 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h2><h3 id="static修饰符"><a href="#static修饰符" class="headerlink" title="static修饰符"></a>static修饰符</h3><p>静态的，属于类</p><p>static 不能直接修饰，只能取修饰成员方法，成员属性</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220702164939824.png" alt="static修饰符"></p><p>被static修饰的成员变量属于类，不属于这个类的某个对象（多个对象共享一个static修饰的成员变量）</p><h3 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h3><p>变量一旦被赋值之后，就不能更改，必须显式指定初始值</p><p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p><h3 id="abstract修饰符"><a href="#abstract修饰符" class="headerlink" title="abstract修饰符"></a>abstract修饰符</h3><p>抽象类；抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充<strong>一个类不能同时别abstract和final修饰</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> 返回值类型 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>抽象方法</strong></p><p><strong>抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。</strong></p><p><strong>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</strong></p><p><strong>如果该类有多个抽象方法，那么这个类就必须声明为抽象类，抽象类可以不包含抽象方法</strong></p><h3 id="synchronized修饰符"><a href="#synchronized修饰符" class="headerlink" title="synchronized修饰符"></a>synchronized修饰符</h3><p><strong>synchronized修饰符声明的方法同一时间只能被一个线程访问 例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">showDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="transient修饰符"><a href="#transient修饰符" class="headerlink" title="transient修饰符"></a>transient修饰符</h3><p><strong>这种修饰的变量，只能活跃在内存中，不能用于持久化存储</strong></p><p>序列化的对象被transient修饰的实例变量时，Java虚拟机跳过该铁定的变量</p><p><strong>当然，如果一个用户有一些敏感信息（譬如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输。这些信息对应的变量就可以被定义为transient类型。换句话说，这个字段的生命周期仅存于调用者的内存中。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> limit<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span><span class="token comment">//不能持久化</span><span class="token keyword">public</span> <span class="token keyword">int</span> limit_int<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span><span class="token comment">//能持久化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="volatile-修饰符"><a href="#volatile-修饰符" class="headerlink" title="volatile 修饰符"></a>volatile 修饰符</h3><p>volatile修饰符修饰的成员变量，在每次被线程访问时，都强制从共享存储中重新读取该成员变量的值，而且，当成员变发生变化时，会强制线程将变化值回写到共享内存中，<strong>在任何时刻，两个线程总是能看到某个成员变量的值是同一个值</strong></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>=       ——&gt;赋值</p><p>==     ——&gt;相等判断（不比较前后值的数据类型，只比较值内容的是否相等）</p><p>​        对于基本数据类型，比较内容是否相等</p><p>​        对于引用数据类型，比较地址值是否相等</p><p>===   ——&gt;相等判断（首先比较值的数据类型是否一致，再次比较值的内容是否相等）</p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220702173534174.png" alt="算数运算符"></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>== != &gt; &lt; &gt;=  &lt;=</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220702173833238.png" alt="位运算符"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;    &amp;    ||   |    !</p><p>&amp;&amp; 前面是假就不运算了后边的了，&amp;是运算前后的得出结论；同理||   |也一样</p><p><strong>这就是&amp;&amp; 和||的短路</strong></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220702174224505.png" alt="赋值运算符"></p><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token operator">?</span> value is <span class="token boolean">true</span><span class="token operator">:</span> value id <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220702174440658.png" alt="**优先级**"></p><h2 id="Java-Number和Mash类"><a href="#Java-Number和Mash类" class="headerlink" title="Java Number和Mash类"></a>Java Number和Mash类</h2><p>Mash类的指数，对数，平方根，三角函数。</p><p><a href="https://www.runoob.com/java/java-number.html">Java Number &amp; Math 类 | 菜鸟教程 (runoob.com)</a></p><p><strong>方法：</strong></p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20220824113100188.png" alt="Math类的常用方法"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">double</span> d<span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1.6</span><span class="token punctuation">;</span><span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"20"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ceil：大于等于最小整数;的使用前面是1.2后面是-1.6"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"floor:小于等于最大整数;的使用前面是1.2后面是-1.6"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rint:返回参数最接近的整数;的使用前面是1.2后面是-1.6"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"round:四舍五入;算法是Math.floor(x+0.5);前面是1.2后面是-1.6"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"min的使用"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max的使用"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exp:e的几次幂的使用"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"log:e的对数lnX的使用"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pow:a的b次方"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sqrt:求算是平方根"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sin"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"asin"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其余三角函数也是一样的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toDegrees将参数转换位角度"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toDegrees</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toRadians将角度转化为弧度"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"random取随机数"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大数的运算"><a href="#大数的运算" class="headerlink" title="大数的运算"></a>大数的运算</h3><p>BigInteger</p><p>大数据的加add、减subtract、乘mutiply、除divide;</p><p>BigDecimal  (有些时候操作小数会出现精度问题 例：System.out.println(0.09+0.01);//0.09999999999999999)</p><p>大小数的加减乘除和大数的加减乘除是一样的；</p><h2 id="Java的Character类"><a href="#Java的Character类" class="headerlink" title="Java的Character类"></a>Java的Character类</h2><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220703122124237.png" alt="转义序列"></p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220703123703667.png" alt="方法"></p><h2 id="Java-String类"><a href="#Java-String类" class="headerlink" title="Java String类"></a>Java String类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前面是用来设置开始的位置的，后面是设置列表中的总长度的</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcd</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bcd</span><span class="token comment">//解决请求乱码是需要用到，在此先做了解</span><span class="token class-name">String</span> str4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"abcde"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转化为char列表"</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"转化为字节"</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str5<span class="token operator">=</span><span class="token string">"Abcde"</span><span class="token punctuation">;</span><span class="token comment">//equals和equalsIgnoreCase的区别:equals比较内容，并且区分大小写，equalsIgnoreCase只比较内容，不区分大小写</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals||"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||eqaulsIgnoreCase||"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"userlyz"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">"userlyz"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3<span class="token operator">=</span>s1<span class="token punctuation">;</span><span class="token class-name">String</span> s4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"userlyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"userlyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> helloArray<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span> helloString<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>helloArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的名字是"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"userlyz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通+号连接符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> fs<span class="token punctuation">;</span>fs<span class="token operator">=</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%f,%d,%s"</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"Str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出此字符串的哈希值"</span><span class="token operator">+</span><span class="token string">"userlyz"</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf:返回指定字符第一次出现的索引，默认开始位置是0"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf:中间指定的参数，也可以是字符串"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"er"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"er"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"与之还有lastIndexOf指定字符最后一次出现的位置,他也是可以指定开始位置的"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"er"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"length:字符串长度"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"matches(String regex)判断此字符串是否匹配给定的正则表达式"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代替 replace(char oldchar,char newchar):用newchar代替所有出现的oldchar"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replaceAll(String regex,String replacement):用replacement代替所有符合正则表达式regex的字符"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"lyz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replaceFirst(String argex,String replacement):用replacement代替第一个符合正则表达式的字符串"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"lyz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拆分  split:按照给定的正则表达式进行拆分，第二个是用来限制拆分"</span><span class="token operator">+</span><span class="token string">"user,u,s,er"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"|||"</span><span class="token operator">+</span><span class="token string">"user,u,s,er"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token string">"user,u,s,er"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断是否是指定前缀 startwith(String prefix,int toffset)"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"us"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"us"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"substring(int beginIndex,int endIndex)"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toCharArray() 转换位新的字符数组"</span><span class="token operator">+</span><span class="token string">"useruser"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toLowerCase() 转换成小写"</span><span class="token operator">+</span><span class="token string">"USERLYZ"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toUpperCase() 转换成大学"</span><span class="token operator">+</span><span class="token string">"userlyz"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"trim()忽略前面空格和后面空格"</span><span class="token operator">+</span><span class="token string">"    user   "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isEmpty() 判断字符串是否为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java的StringBuffer和StringBuilder类"><a href="#Java的StringBuffer和StringBuilder类" class="headerlink" title="Java的StringBuffer和StringBuilder类"></a>Java的StringBuffer和StringBuilder类</h2><p>StringBuilder类与StringBuffer之间的最大不同就在于StringBuilder的方法不是线程安全的（不能同步访问）</p><p>StringBuffer可将缓冲区安全的应用于多个线程，可以在必要时对这些方法进行同步</p><p>StringBuilder类相较于StringBuffer有速度优势，所以大多数情况下建议使用</p><p>append    reverse   delete   insert   replace  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"userlyz.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reverse() 字符串反转"</span><span class="token operator">+</span>sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"lyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换之后的sb|"</span><span class="token operator">+</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置索引处的字符设置"</span><span class="token operator">+</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改长度之后|"</span><span class="token operator">+</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> sf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sf<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringBuffer</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">subSequence</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建新的字符序列，为原序列的子序列"</span><span class="token operator">+</span>sf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str<span class="token operator">=</span>sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回一个新的String，可以只有开始值"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>indexOf()    lastIndexOf()  length()  setCharAt(int index ,char ch)</p><h2 id="Java的数组"><a href="#Java的数组" class="headerlink" title="Java的数组"></a>Java的数组</h2><p>一维数组 datatype[]q list=new datatype[arraySize]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">多维数组  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mylist<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">,</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mylist_2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2.2</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> mylist_3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mylist_3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mylist_3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mylist_3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> item <span class="token operator">:</span>mylist<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals的使用，只有当两个数组的顺序和内容都一样"</span><span class="token operator">+</span>mylist<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mylist_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>mylist_3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"升序排列之后的mylist_3:"</span><span class="token operator">+</span>mylist_3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>binarySearch(Object[] a,Object key) 用二分查找在给定数组中搜索给定值对象。数组在调用之前必须排好序；有则返回索引，没有则返回-1</p><p>equals()   两个数组以相同的顺序，相同的元素，则这两个数组是相等的</p><p>sort()  根据元素的自然顺序进行升序排序</p><h2 id="Java日期时间"><a href="#Java日期时间" class="headerlink" title="Java日期时间"></a>Java日期时间</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*日期时间Date()Date(long millisec)该参数是从1970年1月1日起的毫秒数*/</span><span class="token class-name">Date</span> mydate<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString:显示日期和时间"</span><span class="token operator">+</span>mydate<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before after equals的使用："</span><span class="token operator">+</span>        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> ft<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"GG yyyy-MM-dd hh:mm:ss SS E 一年中的第几周w 一个月中的第几周 W "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SimpleDateFormat: 格式化日期 当前日期是"</span><span class="token operator">+</span>ft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>mydate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日期与毫秒的转换</span><span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> time<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1970年1月1日以来的毫秒数"</span><span class="token operator">+</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前的时间距1970年1月1日以来的毫秒值  long start = System.currentTimeMillis( );</span><span class="token comment">//转换位日期对象</span><span class="token class-name">Date</span> change_C_D<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换之后的"</span><span class="token operator">+</span>change_C_D<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取当前的时间距1970年1月1日以来的毫秒值  long start = System.currentTimeMillis( );</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220704101337633.png" alt="格式化时间"></p><p>使用printf格式化日期</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 初始化 Date 对象</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c的使用   输出结果 星期一 七月 04 10:15:35 CST 2022</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"全部日期和时间信息：%tc%n"</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//F的使用  输出结果2022-07-04</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"年-月-日格式：%tF%n"</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//D的使用  输出结果07/04/22</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"月/日/年格式：%tD%n"</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//r的使用  输出结果10:15:35 上午</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HH:MM:SS PM格式（12时制）：%tr%n"</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//T的使用  输出结果10:15:35</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HH:MM:SS格式（24时制）：%tT%n"</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//R的使用  输出结果10:15</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HH:MM格式（24时制）：%tR"</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Date和String之间的转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> <span class="token class-name">D_S_date</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">12354356000000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DateFormat</span> <span class="token class-name">D_S_df</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">D_S_df</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">D_S_date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换之后的String"</span><span class="token operator">+</span><span class="token class-name">D_S_date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换之后的StringFri Jun 30 13:33:20 CST 2361</span><span class="token class-name">String</span> str_de <span class="token operator">=</span> <span class="token string">"2020年12月11日"</span><span class="token punctuation">;</span><span class="token class-name">DateFormat</span> <span class="token class-name">S_D_df</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> <span class="token class-name">S_D_date</span> <span class="token operator">=</span> <span class="token class-name">S_D_df</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换之后的Date"</span><span class="token operator">+</span><span class="token class-name">S_D_date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换之后的DateFri Jun 30 00:00:00 CST 2361</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><p>Calendar类是一个抽象类，在实际使用时实现特定的子类对象，创建对象过程中只需要使用getInstance方法创建即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> c<span class="token operator">=</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认是当前日期</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认是当前日期"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置的日期"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GregorianCalendar类"><a href="#GregorianCalendar类" class="headerlink" title="GregorianCalendar类"></a>GregorianCalendar类</h3><p>实现了公历日期</p><h2 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a>Java正则表达式</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为特殊字符，文本，反向引用或八进制转义符；如n匹配n。\n匹配换行符</td></tr><tr><td>^</td><td>匹配输入字符串开始的位置</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置</td></tr><tr><td>*</td><td>零次或者多次匹配前面的字符或者表达式；<strong>例</strong>：zo*匹配z,zo,zoo…</td></tr><tr><td>+</td><td>一次或者多次匹配前面的字符或者表达式；<strong>例</strong>：zo+匹配zo,zoo….</td></tr><tr><td>？</td><td>零次或者一次匹配前面的字符或者表达式；<strong>例</strong>：do(es)?匹配do,does</td></tr><tr><td>{n}</td><td>匹配n次   <strong>例</strong>：o{2}可以匹配food但是不能匹配Bob</td></tr><tr><td>{n,}</td><td>至少匹配n次  <strong>例</strong>：o{n,}不匹配Bob中的o，可以匹配foooood所有的o</td></tr><tr><td>{n,m}</td><td>至少n次，至多m次</td></tr><tr><td>？</td><td>当 ？ 紧跟任何其他限定符（*,+,?,{n},{n,},{n,m})，之后匹配模式是非贪心的；搜索尽可能短的字符串；默认贪心模式，匹配尽可能长的字符串；<strong>例</strong>：”oooo” ,”o+?”只匹配单个o,而”o+”匹配所有的”o”</td></tr><tr><td>.</td><td>匹配除了”\r\n”之外的任何单字符。若要匹配”\r\n”之内的任意字符使用”[\s\S]”之类的模式</td></tr><tr><td>（pattern)</td><td>匹配pattern并捕获子表达式</td></tr><tr><td>(?:pattern)</td><td>匹配pattern但不捕获子表达式</td></tr><tr><td>(?=pattern)</td><td>执行正向预测先行搜索的子表达式</td></tr><tr><td>(?!pattern)</td><td>执行反向预测先行搜索的子表达式</td></tr><tr><td>x|y</td><td>匹配x或y</td></tr><tr><td>[xyz]</td><td>字符集，匹配包含的任一字符</td></tr><tr><td>[^xyz]</td><td>反向字符集，匹配未包含的任何字符集</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任何字符</td></tr><tr><td>[^a-z]</td><td>反向范围字符，匹配不在指定范围的任何字符</td></tr><tr><td>\b</td><td>匹配一个字边界，即字与空格的位置 <strong>例</strong>：”er\b”匹配”never”中的”er”,但是不匹配”verb”中的”er”</td></tr><tr><td>\B</td><td>非字边界匹配 <strong>例</strong>：”er\b”匹配”verb”中的”er”,但是不匹配”never”中的”er”匹配”verb”中的”er”</td></tr><tr><td>\cx</td><td>匹配x指示的控制字符。<strong>例</strong>：\cM匹配Control_M或者回车符。x的值必须在A-Z或a-z之间</td></tr></tbody></table><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220704144952929.png" alt="\cx的控制字符"></p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220704143525765.png" alt="image-20220704143525765"></p><p>类的方法</p><p><a href="https://www.runoob.com/java/java-regular-expressions.html">Java 正则表达式 | 菜鸟教程 (runoob.com)</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> p1<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> m1<span class="token operator">=</span>p1<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"dog dog dog ddogdddogg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> output<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h2><p>方法不能嵌套，在方法内部声明变量或者参数，修饰符只能使用final，不能使用其他修饰符</p><p>方法只能是并列关系，声明的方法应该在类中，方法的外边</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>一个方法只能指定一个可变参数，他必须是方法的最后一个参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">56.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbers<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您没有提交参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> result<span class="token operator">=</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> item<span class="token operator">:</span>numbers<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">&gt;</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>            result<span class="token operator">=</span>item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数序列中最大值是"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h3><p>在对象被垃圾收集器回收之前调用，他用来清除回收对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>long<span class="token punctuation">.</span></span>Throwable</span><span class="token punctuation">{</span>   <span class="token comment">// 在这里终结代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java流-Stream-、文件-File-和IO"><a href="#Java流-Stream-、文件-File-和IO" class="headerlink" title="Java流(Stream)、文件(File)和IO"></a>Java流(Stream)、文件(File)和IO</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token comment">// 使用 System.in 创建 BufferedReader</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入字符, 按下 'q' 键退出。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取字符</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-Scanner类"><a href="#Java-Scanner类" class="headerlink" title="Java Scanner类"></a>Java Scanner类</h2><p>next()和nextLine()的区别</p><p>next:一定要读取到有效字符之后才可以结束输入。对输入有效字符之前的空白next()方法可以自动将其去掉</p><p>只有输入有效字符之后输入的空格作为分隔符或者结束符<strong>next()不能得到带有空格的字符串</strong></p><p>nextLine():以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符</p><p><strong>nextLine()可以获得空白</strong></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常通常有以下几大类：</p><p>1、用户输入非法数据</p><p>2、打开的文件不存在</p><p>3、网络通信时连接中断，或者JVM内存溢出</p><p>java异常处理是如何工作的：</p><p>1、检查性异常：最具代表性的异常错误是用户错误或者问题引起的异常，是程序员无法预见的</p><p>2、运行时异常：是可能被程序员避免的异。与检查性异常相反，运行是异常可以在编译时被忽略</p><p>3、错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如当栈溢出时，一个错误就发上了，他们在编译过程中也检查不到。</p><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a><strong>捕获异常</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment">//程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ExceptionName</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//catch代码块</span><span class="token punctuation">}</span><span class="token comment">//-------------------多重捕获块</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment">//程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常变量<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//异常类型1之后执行的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常类型<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//异常类型2之后的代码块</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>例<span class="token keyword">try</span> <span class="token punctuation">{</span>    file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Not valid!</span>    f<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="throws-throw关键字"><a href="#throws-throw关键字" class="headerlink" title="throws/throw关键字"></a>throws/throw关键字</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteEXception</span><span class="token punctuation">,</span><span class="token class-name">InsufficientFundsException</span><span class="token punctuation">{</span>    <span class="token comment">// Method implementation 可以有一个异常，也可以有多个异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h3><p> 无论是否发生异常，finally代码块中的代码总会被执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常变量<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment">//程序代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="try-with-resureces"><a href="#try-with-resureces" class="headerlink" title="try-with-resureces"></a>try-with-resureces</h3><p>JDK7之后,Java新增try-with-resureces语法来打开资源，并且可以在语句执行完毕后确保每一个资源都被自动关闭</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>resources declaration<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">EXceptionType</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//异常块</span><span class="token punctuation">}</span><span class="token comment">//-----------例子</span><span class="token class-name">String</span> line<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Line =&gt;"</span><span class="token operator">+</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IOException in try block =&gt;"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>try-with-resources语句中可以声明多个资源，方法是使用分号;分隔各个资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"textRead.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PrintWriter</span> writer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"textWrite.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明自定义异常"><a href="#声明自定义异常" class="headerlink" title="声明自定义异常"></a>声明自定义异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment">//</span><span class="token punctuation">}</span>例：<span class="token keyword">package</span> <span class="token namespace">day_7_4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> demo_error <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CheckingAccount</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CheckingAccount</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Depositing $500..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入存入</span>        c<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nWithdrawing$100..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nWithDrawing$600..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InsufficientFundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sorry, but you are short$"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//throw new RuntimeException(e);</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InsufficientFundsException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InsufficientFundsException</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token operator">=</span>amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CheckingAccount</span><span class="token punctuation">{</span>    <span class="token comment">//balance为余额，number为卡号</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CheckingAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法：存钱</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法：取钱</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InsufficientFundsException</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;=</span> balance<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> needs <span class="token operator">=</span> amount <span class="token operator">-</span> balance<span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InsufficientFundsException</span><span class="token punctuation">(</span>needs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法：返回余额</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法：返回卡号</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通用异常"><a href="#通用异常" class="headerlink" title="通用异常"></a>通用异常</h3><p>JVM（java虚拟机）异常：由JVM抛出的异常或错误。例如：NullPointerException类，ArrayIndexOutOfBoundsException类，ClassCastException类</p><p>程序级异常：由程序或者API程序抛出的异常。例如IIIegalArgumentException类,iiiegalStateException类</p><h1 id="Java的面向对象"><a href="#Java的面向对象" class="headerlink" title="Java的面向对象"></a>Java的面向对象</h1><p>面向对象程序设计(OOP Object Oriented Programming)是目前主流的程序设计架构，使我们编程过程更符合人们的生活习惯</p><p><strong>三大特性：封装、继承、多态</strong></p><p><strong>类：</strong>本质上就是一个功能集合；把一些有相同或者相似的一些功能集中放到一个地方（单元）—-&gt;类</p><p>类是项目或者工程的最小的组成单元</p><p><strong>对象：</strong>开发思路：通过对象来帮助你完成一些事情；对象在实际中也是作为容器来使用的；</p><p><strong>属性：</strong>对象当中共同存在的属性</p><h2 id="java继承"><a href="#java继承" class="headerlink" title="java继承"></a>java继承</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>子类拥有父类非private的属性和方法；子类可以拥有自己的属性和方法，即子类对于父类的拓展；子类可以用自己的方式实现父类的方法；<strong>Java是单继承</strong>，但是可以<strong>多重继承</strong>单继承是1v1，多重继承是B继承A，C继承B;提高类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>继承可以使用extend和implement这两个关键词来实现继承，所有的类都默认继承于Object</p><p>extend一般用于继承普通类和抽象类；implement用来继承接口类</p><h4 id="extend关键字"><a href="#extend关键字" class="headerlink" title="extend关键字"></a>extend关键字</h4><p>在java中，类的继承是单继承，extend只能继承一个类；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span>  <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="implement-关键字"><a href="#implement-关键字" class="headerlink" title="implement 关键字"></a>implement 关键字</h4><p>可以<strong>变相</strong>的使Java具有多继承的特性，使用范围为类继承接口的情况，可以<strong>同时继承多个接口</strong></p><pre class="line-numbers language-none"><code class="language-none">public interface A{    public void eat();    public void sleep();}public interface B{    public void show();}public class C implements A,B{ }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="super和this关键字"><a href="#super和this关键字" class="headerlink" title="super和this关键字"></a>super和this关键字</h4><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类</p><p>this关键字：指向自己的引用；</p><p><strong>在静态环境中不能使用super和this，具体看笔记4</strong></p><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><p>final可以用来修饰变量（包括类属性，对象属性，局部变量，形参），方法（包括类方法，对象方法）和类</p><p>使用final关键字声明类，就是把类定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写：</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>子类是不继承父类的构造器（构造方法或者构造函数），他只是调用（显式或者隐式），如果父类的构造器带有参数，就必须在子类的构造器中显式地通过super关键字调用父类的构造器并配以适当的参数列表；如果父类构造器没有参数，则子类的构造器中不需要使用super关键字调用父类构造器，系统会自动调用父类的无参构造器</p><h2 id="Java的重写-Override-和重载-Overload"><a href="#Java的重写-Override-和重载-Overload" class="headerlink" title="Java的重写(Override)和重载(Overload)"></a>Java的重写(Override)和重载(Overload)</h2><p>出现的位置：方法重写发生在父子类当中；方法重载发生在同一个类当中</p><p>判定机制：方法重载是根据参数列表进行判定；方法重写是根据</p><p><strong>重载是一个编译期概念，重写是一个运行期的概念</strong></p><h3 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h3><p>子类对于父类允许访问的方法的实现过程进行<strong>重新编写</strong>，<strong>返回值和形参都不能改变</strong>，<strong>外壳不变，核心重写</strong></p><p>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常</p><p>例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类</p><h4 id="重写规则"><a href="#重写规则" class="headerlink" title="重写规则"></a>重写规则</h4><p>1、参数列表必须完全相同</p><p>2、返回类型可以不相同，但是必须是父类返回值的派生类</p><p>3、访问权限不能比父类中访问权限更低</p><p>4、父类只能被他的子类重写</p><p>5、声明final方法不能被重写</p><p>6、声明static的方法不能被重写，但是能被再次声明</p><p>7、子类和父类在同一个包下，子类可以重写父类的所有方法除了 private 和final方法</p><p>8、子类和父类不在同一个包中，子类只能重写 public 和protected的非final方法</p><p>9、重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p><p>10、构造方法不能被重写</p><p>11、如果不能继承一个类，则不能重写该类的方法</p><p><strong>Super可以调用父类的方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">//父类若有study方法就重写，如果没有就报错</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h3><p>在一个类里边，方法名相同，而形参不同，返回类型可以相同也可以不同</p><p>每一个重载的方法都有独一无二的参数类型列表；最常用的就是重载器的重载</p><h4 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a>重载规则</h4><p>1、被重载的方法必须改变参数列表（参数个数或参数类型不一样）</p><p>2、被重载的方法可以改变返回类型</p><p>3、可以改变访问修饰符</p><p>4、可以声明新的或者更广的检查异常</p><p>5、方法能够在同一个类或者子类中被重载</p><p>6、无法以返回值作为重载函数的区分</p><h2 id="Java多态"><a href="#Java多态" class="headerlink" title="Java多态"></a>Java多态</h2><p>多态是同一个行为具有多个不同表现形式或形态的能力</p><p>多态就是同一个接口，按照不同实例而执行的不同操作</p><p>特点</p><p>对于成员方法：编译看左边，运行看右边</p><p>对于成员变量：编译看左边，运行看左边</p><h3 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h3><p>1、消除类型之间的耦合关系；2、可替换性；3、可扩充性；4、接口性；5、灵活性；6、简化性；</p><h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><p>1、继承；2、重写；3、父类引用指向子类对象（例：Animal a = new Cat();）</p><p>使用多态调用方法时，首先检查父类是否有该方法，如果没有，则编译错误，如果有再去调用子类的同名方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 向上转型  父类指向子类</span>      a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 调用的是 Cat 的 eat</span>      <span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span><span class="token comment">//向下转型</span>         c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用的是 Cat 的 work</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 类型判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token comment">// 猫做的事情 </span>            <span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>              c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 狗做的事情 </span>            <span class="token class-name">Dog</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>              c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token comment">//----------------接口环境和普通类环境都是可以的，这个实例是接口环境-----</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>      <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p>虚函数的存在是为了多态。</p><p>Java 中其实没有虚函数的概念，它的普通函数就相当于 C++ 的虚函数，动态绑定是Java的默认行为。如果 Java 中不希望某个函数具有虚函数特性，可以加上 final 关键字变成非虚函数。</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220707093804407.png" alt="虚函数例子"></p><h3 id="多态的实现方式"><a href="#多态的实现方式" class="headerlink" title="多态的实现方式"></a>多态的实现方式</h3><p>1、重写</p><p>2、接口</p><p>3、抽象类和抽象方法</p><h2 id="Java抽象类"><a href="#Java抽象类" class="headerlink" title="Java抽象类"></a>Java抽象类</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>尽管该类是抽象类，但是它仍然可以有多个成员变量，成员方法，构造函数</p><p>可以通过继承来实现抽象类的方法，核对抽象类的成员变量进行赋值</p><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>声明抽象方法会造成以下两个结果：</p><p>1、如果一个类包含抽象方法，那么该类必须是抽象类。</p><p>2、任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</p><p>最终必须有子类实现该抽象方法</p><h3 id="抽象关键字acstract不可以和那些关键字共存"><a href="#抽象关键字acstract不可以和那些关键字共存" class="headerlink" title="抽象关键字acstract不可以和那些关键字共存"></a>抽象关键字acstract不可以和那些关键字共存</h3><p><strong>private</strong>私有方法，子类是无法继承得到的</p><p><strong>final</strong>定义的方法不能被重写</p><p><strong>static</strong>静态方法不用实例化可直接调用</p><h3 id="抽象类总结规定"><a href="#抽象类总结规定" class="headerlink" title="抽象类总结规定"></a>抽象类总结规定</h3><p>1、抽象类不能被实例化</p><p>2、抽象类不一定包含抽象方法，但是有抽象方法的类必定是抽象类</p><p>3、抽象类中抽象方法只是声明，不包含方法体，就是不包含具体实现也就是方法的具体功能</p><p>4、构造方法，类方法（static修饰的方法）不能声明为抽象方法</p><p>5、抽象类的子类必须给出抽象类中的抽象方法的实现，除非该子类也是抽象类；子类重写父类的抽象方法的时候要去掉abstract关键字</p><p><strong>例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A_Per</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">hello_demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A_Stu</span> <span class="token keyword">extends</span> <span class="token class-name">A_Per</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">hello_demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java封装"><a href="#Java封装" class="headerlink" title="Java封装"></a>Java封装</h2><p><strong>狭义的封装，就是对类的当中定义的成员变量私有化设置</strong></p><p><strong>广义的封装，对一些可重复利用的代码都需要进行封装，对调用细节进行隐藏，对外暴露接口名称</strong></p><p>封装是指一种将抽象性函式的实现细节部分包装、隐藏起来的方法。</p><p>封装可以以为是保护屏障，防止该类的代码和数据被外部类定义的代码随机访问</p><p>要访问该类的代码和数据，都必须通过严格的接口控制</p><p>主要功能时在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序</p><h3 id="封装的优点"><a href="#封装的优点" class="headerlink" title="封装的优点"></a>封装的优点</h3><p>1、良好的封装能够减少耦合</p><p>2、类内部的结构可以自由修改</p><p>3、可以对成员变量进行更精准的控制</p><p>4、隐藏信息，实现细节</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>Spring —-&gt;反射+注解</p><h2 id="Java接口"><a href="#Java接口" class="headerlink" title="Java接口"></a>Java接口</h2><p>本质上它也是一种类，他称之为接口类，是一种特殊的类；作为一种功能集合，</p><p>时抽象方法的集合，通常使用interface来声明。一个类通过继承接口的方式，从而来实现接口的抽象方法。</p><p>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</p><p>接口无法别实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法</p><h3 id="接口与类的相似点"><a href="#接口与类的相似点" class="headerlink" title="接口与类的相似点"></a>接口与类的相似点</h3><p>1、一个接口可以有多个方法（方法可以是抽象方法，也可以是静态方法）；2、接口文件保存在.java结尾的文件中，文件名使用接口名；3、接口的字节码文件保存在.class结尾的文件中；4、接口相应的字节码文件必须在与包名称相匹配的目录结构中</p><h3 id="接口与类的区别"><a href="#接口与类的区别" class="headerlink" title="接口与类的区别"></a>接口与类的区别</h3><p>1、接口不能用于实例化对象；2、接口没有构造方法；3、所有方法必须是抽象方法（JDK8之后可以使用default关键字修饰非抽象方法）；4接口不能包含成员变量，除了static和final变量；5、接口不是被类继承了，而是被类实现；6、接口支持多继承</p><h3 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h3><p>接口中每一个方法也是隐式抽象的，被隐式指定为public abstract</p><p>接口中可以含有变量，变量会被隐式指定为public static final</p><h3 id="接口的意义"><a href="#接口的意义" class="headerlink" title="接口的意义"></a>接口的意义</h3><p>①扩展原有类的功能</p><p>②设定了规则</p><p>③降低了耦合性</p><h3 id="抽象类与接口的区别"><a href="#抽象类与接口的区别" class="headerlink" title="抽象类与接口的区别"></a>抽象类与接口的区别</h3><p>抽象类可以有方法体，接口中的不行；抽象类中的成员变量可以是各种类型，而接口中的变量只能是public static final类型；一个类可以继承一个抽象类，但是可以继承多个接口</p><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220707092334290.png" alt="接口例子"></p><h2 id="Java枚举enum"><a href="#Java枚举enum" class="headerlink" title="Java枚举enum"></a>Java枚举enum</h2><p><strong>类的对象只有有限个，确定的（不再更改的）。</strong></p><p>例如：星期（）、性别（）、季节（）、支付方式（）、就职状态（）、订单状态（）、线程状态（）</p><p><strong>当需要定义一组常量时，强烈建议使用枚举类</strong></p><p>定义枚举类</p><p>方式一：JDK5.0之前，自定义枚举类</p><p>方式二：JDK5.0,可以使用enum关键字定义枚举类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE<span class="token punctuation">;</span>     <span class="token comment">// 构造函数</span>    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Constructor called for : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">colorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Universal Color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>        <span class="token comment">// 输出</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Color</span> c1 <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">colorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//------输出------</span><span class="token class-name">Constructor</span> called <span class="token keyword">for</span> <span class="token operator">:</span> RED<span class="token class-name">Constructor</span> called <span class="token keyword">for</span> <span class="token operator">:</span> GREEN<span class="token class-name">Constructor</span> called <span class="token keyword">for</span> <span class="token operator">:</span> BLUERED<span class="token class-name">Universal</span> <span class="token class-name">Color</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Java的数据结构"><a href="#Java的数据结构" class="headerlink" title="Java的数据结构"></a>Java的数据结构</h1><h2 id="Java数据结构"><a href="#Java数据结构" class="headerlink" title="Java数据结构"></a>Java数据结构</h2><p>枚举：枚举接口定义了一种从数据结构中取回连续元素的方式</p><p>位集合：实现了一组可以单独设置和清除的位或标志</p><p>向量：Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。</p><p>栈：实现了后进先出的数据接口</p><p>字典：定义了键映射到值的数据结构</p><p>哈希表：在用户定义键结构的基础上来组织数据的手段</p><p>属性：属性列表中每个键及其对应值都是一个字符串</p><h2 id="Java的集合框架"><a href="#Java的集合框架" class="headerlink" title="Java的集合框架"></a>Java的集合框架</h2><p>集合框架被设计必须要满足以下几个目标：</p><p>1、该框架必须是高性能的，基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。2、该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。3、对一个集合的拓展和适应必须是简单的</p><h3 id="Set和List的区别"><a href="#Set和List的区别" class="headerlink" title="Set和List的区别"></a>Set和List的区别</h3><p>1、Set接口实例存储时无序的，不重复的数据。List接口实例存储的时有序的，可以重复的元素。</p><p>2、Set检索效率低下，删除和插入效率比较高，插入和删除，不会引起元素位置的改变(实现类有HashSet和TreeSet)</p><p>3、List和数组类似，可以动态增长，根据实际存储的数据长度自动增加List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置的改变（实现类有ArrayList,LinkedList,Vector）</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>一般遍历数组都会采用for循环或者增强for,这两种方法都可以用在集合框架，但是还有一种方法时采用迭代器，他是一个对象，实现了Iterator接口或ListIterator接口</p><p>允许双向遍历列表和修改元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一种：普通遍历，二次取值；</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.keySet遍历key和value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key="</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"and value="</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第二种</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet使用iterator迭代器遍历key和value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"and value="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第三种：推荐，尤其是容量大的时候</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet遍历key和value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" and value="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第四种</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.values()遍历所有的value,但是不能遍历key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> v<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value="</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-ArrayList"><a href="#Java-ArrayList" class="headerlink" title="Java ArrayList"></a>Java ArrayList</h2><p>ArrayList类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，可以添加和删除</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> objectName<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//例：</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sites<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"添加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"添加2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"添加3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取"</span><span class="token operator">+</span>sites<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除，删除之后，index后的元素都往前挪一位；</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size()方法，获取列表的长度"</span><span class="token operator">+</span>sites<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sites<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历列表</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sites<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token operator">:</span>sites<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过for-each遍历数组</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>E：泛型，用于设置objectName的数据类型，只能为引用数据类型</p><p>添加 add();  访问元素 get();修改元素set();删除元素remove();总长度size();</p><p>遍历元素for (int i =0;i&lt;objectName.size();i++){objectName.get(i)}或者使用for(E item:objectName){item}</p><p>我们要使用引用数据类型，这就需要<strong>基本类的包装类</strong></p><p>排序：sort，使用Collection.sort(arrayName)；复制 clone() 复制一份arrayList;截取 subList()截取</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>contains()；containsAll()</td><td>判断元素是否在arrayList;是否包含指定集合中的所有元素</td></tr><tr><td>ensureCapacity()</td><td>设置指定容量大小的arrayList</td></tr><tr><td>retainAll()</td><td>保留arrayList中指定集合中也存在的那些元素</td></tr><tr><td>trimToSize()</td><td>将arrayList的容量调整为元素的个数</td></tr><tr><td>removeRange()</td><td>删除指定索引之间存在的元素</td></tr></tbody></table><h2 id="Java-LinkedList"><a href="#Java-LinkedList" class="headerlink" title="Java LinkedList"></a>Java LinkedList</h2><p>链表是一种常见的基础数据结构，是一种线性表，每一个节点里都存到下一个节点的地址</p><p>链表有单向链表和双向链表</p><p><strong>ArrayList和LinkedList的适用范围：</strong></p><p>ArrayList:频繁访问列表中某一个元素。只需要在列表的末尾进行添加和删除操作</p><p>LinkedList:需要通过循环迭代来访问列表中的某些元素。需要频繁的在列表的开头，中间，末尾，等位置进行添加和删除操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sites<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"userlyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"github"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[userlyz, github, io]</span>sites<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"lyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[lyz, userlyz, github, io];还有addLast(E)添加到链表的末尾</span>sites<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[userlyz, github, io];还有removeLast()删除链表的末尾元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getFirst获取头部元素"</span><span class="token operator">+</span>sites<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getLast获取尾部元素</span><span class="token comment">//遍历方法和遍历ArrayList差不多</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>poll()；remove()</td><td>删除并返回第一个元素</td></tr><tr><td>contains(Object o)</td><td>判断是否含有某一元素</td></tr><tr><td>peek();peekFirst()返回头部元素；peekLast()返回尾部元素</td><td>返回第一个元素</td></tr><tr><td>element()</td><td>返回第一个元素</td></tr><tr><td>descendingIterator()</td><td>返回倒序迭代器</td></tr></tbody></table><h2 id="Java-HashSet"><a href="#Java-HashSet" class="headerlink" title="Java HashSet"></a>Java HashSet</h2><p>HashSet是基于HashMap来实现的，是一个不允许有重复元素的集合；HashSet允许有null值，HashSet是无序的，即不会记录插入的顺序；HashSet不是线程安全的，如果多线程尝试同时修改HashSet则最终结果是不确定的。必须要在多线程访问时显式同步对HashSet的并发访问；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sites<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"userlyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"github"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[github, io, userlyz]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contains:判断元素序列中是否有给定的值"</span><span class="token operator">+</span>sites<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"github"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"remove() 删除元素"</span><span class="token operator">+</span>sites<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//size()计算元素个数</span><span class="token comment">//for-each来迭代HashSet中的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-HashMap"><a href="#Java-HashMap" class="headerlink" title="Java HashMap"></a>Java HashMap</h2><p>Map是集合容器，由键和值两部分，键和值必须是引用类型，键唯一不能重复也没有顺序</p><p>HashMap是Map的一个实现类<strong>可以允许键和值是null</strong></p><p>Map的增删查：map.put(“1”,”Monday”);获取key对应的value：map.get(“1”);删除map.remove(“1”);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历map</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"邓超"</span><span class="token punctuation">,</span> <span class="token string">"孙俪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"李晨"</span><span class="token punctuation">,</span> <span class="token string">"范冰冰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"刘德华"</span><span class="token punctuation">,</span> <span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keySet<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span>keySet<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//删除元素 remove();删除所有键值对  clear();计算元素个数 size();</span><span class="token comment">//containsKey()containsValue() 检查hashMap中是否存在指定的key/value对应的映射关系</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-Iterator"><a href="#Java-Iterator" class="headerlink" title="Java Iterator"></a>Java Iterator</h2><p>Iterator（迭代器）不是一个集合，他是一种用于访问集合的方法，可以用于迭代ArrayList和HashSet等集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建集合</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sites <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Zhihu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取迭代器</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出集合中的第一个元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环集合元素</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-Object"><a href="#Java-Object" class="headerlink" title="Java Object"></a>Java Object</h2><p>Object类是所有类的父类，就是java中所有的类都继承Object，子类可以使用Object的所有方法。</p><p>拷贝 clone() ; 比较 equals();获取对象运行时的类getClass();获取对象的hash值hashCode()；唤醒在该对象上等待的某个线程notify();toString();</p><h2 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java 泛型"></a>Java 泛型</h2><p>泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。</p><p>泛型本身是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p>java中的泛型标记符：</p><p>E:Element(在集合中使用，因为集合中存放的是元素)</p><p>T:Type(java类)</p><p>K:Key（键）</p><p>V:Value(值)</p><p>N:Number(数据类型)</p><p>？：表示不确定的java类型；类型通配符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputarray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token operator">:</span>inputarray<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建不同类型数组： Integer, Double 和 Character</span>    <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doubleArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">4.4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'O'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"整型数组元素为:"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span> intArray  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传递一个整型数组</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"\n双精度型数组元素为:"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span> doubleArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传递一个双精度型数组</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"\n字符型数组元素为:"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span> charArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传递一个字符型数组</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> age<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> number<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"userlyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    age<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    number<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">919</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getUperNumber</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getUperNumber</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getUperNumber</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//限定泛型的范围</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-序列化"><a href="#Java-序列化" class="headerlink" title="Java 序列化"></a>Java 序列化</h2><p>一个对象可以被表示为一个字节序列，该细节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。</p><h3 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SerializeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DeserializeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//序列化对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">SerializeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Emloyee</span> e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Emloyee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"userlyz"</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">"河南郑州"</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>SSN<span class="token operator">=</span><span class="token number">111222333</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>SSN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token class-name">FileOutputStream</span> fileout<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"employee.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> out<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经保存完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//反序列化对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">DeserializeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Emloyee</span> e<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token class-name">FileInputStream</span> fileIn<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"employee.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Emloyee</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到员工类或者IO异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token operator">+</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"地址"</span><span class="token operator">+</span>e<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SSN"</span><span class="token operator">+</span>e<span class="token punctuation">.</span>SSN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Emloyee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> SSN<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mailCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送邮件到"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java网络编程"><a href="#Java网络编程" class="headerlink" title="Java网络编程"></a>Java网络编程</h2><p>java提供了两种常见的网络协议支持：</p><p><strong>TCP</strong>:一种面向连接的的、可靠的、基于字节流的传输层通信协议，TCP保障了两个应用程序之间的可靠通信。常用于互联网协议</p><p><strong>UDP</strong>一种无连接的协议，由于UDP缺乏可靠性且属于无连接协议，所以应用程序通常必须容许一些丢失、错误、或重复的数据包</p><p><strong>Socket编程</strong> ①套接字使用TCP提供了两台计算机之间的通信机制。客户端程序创建一个套接字，并尝试链接服务器的套接字；②当连接建立时服务器，会创建一个Socket对象。客户端和服务端现在可以通过对Socket对象的写入和读写进行通信</p><p>服务器端实例化一个ServerSocket对象，表示通过该服务器上的端口通信</p><p>服务器调用ServerSocket类的accept()方法，该方法一直等待，直到客户端连接到服务器给定的端口</p><p>服务器正在等待时；一个客户端实例化一个Socket对象，指定服务器名称和端口号来请求连接</p><p>Socket类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则客户端创建一个Socket对象与服务器进行通信。</p><p>在服务器端，accept()方法返回服务器上的一个新的socket引用，该socket连接到客户端的socket</p><p><strong>TCP是一个双向通信协议，因此数据可以通过两个数据流在同一时间发送。</strong></p><h3 id="ServerSocket类的方法"><a href="#ServerSocket类的方法" class="headerlink" title="ServerSocket类的方法"></a>ServerSocket类的方法</h3><h4 id="ServerSpcket的构造方法："><a href="#ServerSpcket的构造方法：" class="headerlink" title="ServerSpcket的构造方法："></a>ServerSpcket的构造方法：</h4><p>ServerSocket(int port) 创建绑定到指定端口的服务器套接字</p><p>ServerSocket(int port ,int backlog)利用指定的backlog创建服务器套接字并将其绑定到指定的本地端口号</p><p>ServerSocket(int port,int backlog , InetAddress address)使用指定的端口，侦听backlog和要绑定的本地IP地址创建服务器</p><p>ServerSocket()创建非绑定服务器套接字</p><h3 id="URL处理"><a href="#URL处理" class="headerlink" title="URL处理"></a>URL处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://www.runoob.com/index.html?language=cn#j2se"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"URL 为："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"协议为："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"验证信息："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名及请求参数："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主机名："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路径："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"端口："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认端口："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getDefaultPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求参数："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定位位置："</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url连接https/http协议的url。openConnection返回HttpURLConnection对象</p><p>如果你连接的URL为一个JAR文件。openConnection返回JarURLConnection对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">URLConnection</span> urlConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token class-name">HttpURLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>urlConnection <span class="token keyword">instanceof</span> <span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> urlConnection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入 URL 地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回URL的输入流，用于读取资源</span>    <span class="token class-name">String</span> urlString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> current<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>current <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        urlString <span class="token operator">+=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>urlString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-发送邮件"><a href="#Java-发送邮件" class="headerlink" title="Java 发送邮件"></a>Java 发送邮件</h2><p>安装JavaMail API 和Java Activation Framework(JAF)</p><p><a href="https://blog.csdn.net/qq_41251714/article/details/89254908">参考  java实现发送QQ邮箱_Q、三岁的博客</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始发送了啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建Properties 类用于记录邮箱的一些属性</span><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 表示SMTP发送邮件，必须进行身份验证</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.auth"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处填写SMTP服务器</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.host"</span><span class="token punctuation">,</span> <span class="token string">"smtp.qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//端口号，QQ邮箱端口587</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.port"</span><span class="token punctuation">,</span> <span class="token string">"587"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此处填写，写信人的账号</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.user"</span><span class="token punctuation">,</span> <span class="token string">"*********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此处填写16位STMP口令</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.password"</span><span class="token punctuation">,</span> <span class="token string">"*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 构建授权信息，用于进行SMTP进行身份验证</span><span class="token class-name">Authenticator</span> authenticator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Authenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">PasswordAuthentication</span> <span class="token function">getPasswordAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 用户名、密码</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mail.user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mail.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PasswordAuthentication</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 使用环境属性和授权信息，创建邮件会话</span><span class="token class-name">Session</span> mailSession <span class="token operator">=</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> authenticator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建邮件消息</span><span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>mailSession<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置发件人</span><span class="token class-name">InternetAddress</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mail.user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置收件人的邮箱</span><span class="token class-name">InternetAddress</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span><span class="token string">"*********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">setRecipient</span><span class="token punctuation">(</span><span class="token class-name">MimeMessage<span class="token punctuation">.</span>RecipientType</span><span class="token punctuation">.</span>TO<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置邮件标题</span>message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"这是一个标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置邮件的内容体</span>message<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"这是接下来的内容"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最后当然就是发送邮件啦</span><span class="token class-name">Transport</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://userlyz.gitee.io/imgs/imgs/d15866b723dfb4ab7113ca14add5ef8.jpg" alt="发送邮件"></p><h2 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h2><p><strong>关于守护进程问题；笔记5</strong></p><h3 id="通过实现Runable接口来创建线程"><a href="#通过实现Runable接口来创建线程" class="headerlink" title="通过实现Runable接口来创建线程"></a>通过实现Runable接口来创建线程</h3><p>主要就是实现接口中的run()方法；调用Thread(Runable threadOb,String threadName)构造方法：threadOb是一个实现Runable接口类的实例，threadName是指定新线程的名字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RunableDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> t<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> threadName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RunableDemo</span><span class="token punctuation">(</span><span class="token class-name">String</span> threadName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token operator">=</span>threadName<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建线程"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程运行了:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token operator">+</span><span class="token string">"退出了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Starting"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过继承Thread来创建线程"><a href="#通过继承Thread来创建线程" class="headerlink" title="通过继承Thread来创建线程"></a>通过继承Thread来创建线程</h3><p>继承类必须重写run()方法，该方法时新线程的入口，他也是必须调用start()方法才能执行；这个虽然是一种多线程实现的方式，但是本质上也是实现Runable接口的一个实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DisplayMessage</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token class-name">DisplayMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过Callable-和-Future创建线程"><a href="#通过Callable-和-Future创建线程" class="headerlink" title="通过Callable 和 Future创建线程"></a>通过Callable 和 Future创建线程</h3><p>FutureTask对象的get()方法来获得子线程执行结束后的返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo_Callable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//Thread.sleep(100);</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"|+|"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//主函数----------------------------------</span><span class="token class-name">Demo_Callable</span> demo_callable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Demo_Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ft<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>demo_callable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 的循环变量是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft<span class="token punctuation">,</span><span class="token string">"有返回值的线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程的返回值:"</span><span class="token operator">+</span>ft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用继承Thread类的方式创建多线程，编写简单，需要访问当前线程，则无需使用Thread.currentThread()方法，直接使用this即可获得当前线程</p><h2 id="Java-Applet基础"><a href="#Java-Applet基础" class="headerlink" title="Java Applet基础"></a>Java Applet基础</h2><h2 id="Java-文档注释"><a href="#Java-文档注释" class="headerlink" title="Java 文档注释"></a>Java 文档注释</h2><h2 id="Java-实例"><a href="#Java-实例" class="headerlink" title="Java 实例"></a>Java 实例</h2><h2 id="Java-Mysql链接"><a href="#Java-Mysql链接" class="headerlink" title="Java Mysql链接"></a>Java Mysql链接</h2><h1 id="常用类和方法"><a href="#常用类和方法" class="headerlink" title="常用类和方法"></a>常用类和方法</h1><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="笔记1：类中private方法在类外边的访问"><a href="#笔记1：类中private方法在类外边的访问" class="headerlink" title="笔记1：类中private方法在类外边的访问"></a>笔记1：类中private方法在类外边的访问</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">p</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Class</span> c1<span class="token operator">=</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Method</span> method<span class="token operator">=</span>c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"ppp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外部类中的private方法名是 ppp</span>            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="笔记2-break-out"><a href="#笔记2-break-out" class="headerlink" title="笔记2 break out"></a>笔记2 break out</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">out<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span> out<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跳出到out标记的循环；</p><h2 id="笔记3-成员变量和局部变量的区别"><a href="#笔记3-成员变量和局部变量的区别" class="headerlink" title="笔记3 成员变量和局部变量的区别"></a>笔记3 成员变量和局部变量的区别</h2><p><img src="http://userlyz.gitee.io/imgs/imgs/image-20220706151750833.png" alt="成员变量和局部变量的区别"></p><h2 id="笔记4-为什么在静态方法中，不能使用this"><a href="#笔记4-为什么在静态方法中，不能使用this" class="headerlink" title="笔记4 为什么在静态方法中，不能使用this"></a>笔记4 为什么在静态方法中，不能使用this</h2><p>静态的信息，当程序已启动是最先加载；</p><p>main(String[] args){</p><p>​        this调用的是对象当中的信息；对象的信息在堆当中存储，还没有开辟，这时候堆为空；</p><p>}</p><h2 id="笔记5-守护进程运行方式"><a href="#笔记5-守护进程运行方式" class="headerlink" title="笔记5 守护进程运行方式"></a>笔记5 守护进程运行方式</h2><p>这个问题的发现是：java多线程中发现的，有两个线程（都是死循环程序），当时都设置的守护进程，主程序结束之后就结束运行了；然后我就突发奇想，把其中一个改成用户进程，然后就发现主函数都结束好一会了，两个线程都还在运行；不管怎么设置setDaemon</p><p><strong>问题解决</strong></p><p><strong>一个守护线程什么时候结束不取决于主线程什么时候结束。守护线程的作用是在后台运行任务，只要还有一个以上非守护线程没有结束（即便此时主线程已结束），程序就不会结束。而程序没结束，守护线程当然还可以继续运行；反过来，当所有非守护线程都结束了后，即便还有未结束的守护线程，系统也会马上结束这些守护线程，然后结束程序。</strong></p><h2 id="笔记6"><a href="#笔记6" class="headerlink" title="笔记6"></a>笔记6</h2>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django学习</title>
      <link href="2022/06/17/django-xue-xi/"/>
      <url>2022/06/17/django-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>下载完成django</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>创建项目</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">django-admin startproject 项目名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/17/django-xue-xi/1655428815218.png" alt="创建完成的项目"></p><p>启动服务</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">cd 项目名python manage.py runserver python manage.py runserver 自定端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在项目路径中不能有中文名称，要不然会报错，找不到路径</p>]]></content>
      
      
      
        <tags>
            
            <tag> python Django学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity学习之模拟驾考</title>
      <link href="2022/04/21/unity-xue-xi-zhi-mo-ni-jia-kao/"/>
      <url>2022/04/21/unity-xue-xi-zhi-mo-ni-jia-kao/</url>
      
        <content type="html"><![CDATA[<p>@</p><p>这一部分待续</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="2022/04/09/vue-xue-xi/"/>
      <url>2022/04/09/vue-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vue基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token comment">&lt;!----&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">{</span>message<span class="token operator">:</span><span class="token string">"Hello Vue!"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el挂载点"><a href="#el挂载点" class="headerlink" title="el挂载点"></a>el挂载点</h2><p>el为挂载点，适用于css的各种选择器</p><p>id选择器# （在开发中尽量使用id）</p><p>class选择器.</p><p>还可以使用标签名</p><h2 id="data数据对象"><a href="#data数据对象" class="headerlink" title="data数据对象"></a>data数据对象</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vue基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{school.name}}{{school.mobile}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{campus[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{campus[3]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">{</span>message<span class="token operator">:</span><span class="token string">"Hello Vue!"</span><span class="token punctuation">,</span>school<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"userlyz"</span><span class="token punctuation">,</span>mobile<span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>campus<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"地区1"</span><span class="token punctuation">,</span><span class="token string">"地区2"</span><span class="token punctuation">,</span><span class="token string">"地区三"</span><span class="token punctuation">,</span><span class="token string">"地区四"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><h3 id="内容绑定，事件绑定"><a href="#内容绑定，事件绑定" class="headerlink" title="内容绑定，事件绑定"></a>内容绑定，事件绑定</h3><p>v-text</p><p>只有不会对标签原有的内容进行改变</p><p>设置标签的文本值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vue基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>userlyz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>userlyz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{txt}}userlyz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">{</span>message<span class="token operator">:</span><span class="token string">"Hello userlyz!"</span><span class="token punctuation">,</span>info<span class="token operator">:</span><span class="token string">"Vue学习"</span><span class="token punctuation">,</span>txt<span class="token operator">:</span><span class="token string">"hello Vue!"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v-html</p><p>跟v-text类似，当v-html中的有html标签内容的时候使用这个，v-text只会按照文本的方式进行显示</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vue基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://userlyz.github.io/2021/12/29/js-xue-xi/#toc-heading-53<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>userlyz1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cont<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">{</span>message<span class="token operator">:</span><span class="token string">"Hello userlyz!"</span><span class="token punctuation">,</span>content<span class="token operator">:</span><span class="token string">"Hello userlyz!"</span><span class="token punctuation">,</span>cont<span class="token operator">:</span><span class="token string">"&lt;a href='https://userlyz.github.io/2021/12/29/js-xue-xi/#toc-heading-53'&gt;userlyz2&lt;/a&gt;"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v-on为元素绑定事件</p><p>Vue中允许你v-on替换成@</p><p>点击事件，</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>事件绑定<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dolt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>事件绑定<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>monseenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dolt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>事件绑定<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>dblclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dolt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>事件绑定<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dolt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changfood<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{food}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">{</span>            message<span class="token operator">:</span><span class="token string">"Hello userlyz!"</span><span class="token punctuation">,</span>            food<span class="token operator">:</span><span class="token string">"userlyz"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">dolt</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"事件触发"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">changfood</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token operator">+=</span><span class="token string">"你好！"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例-计数器"><a href="#案例-计数器" class="headerlink" title="案例 计数器"></a>案例 计数器</h3><p>创建Vue实例时：el挂载点，data数据，methods方法</p><p>v-on指令的作用是绑定事件，简写为@</p><p>方法中通过this，关键字获取data中的数据</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">{</span>            message<span class="token operator">:</span><span class="token string">"Hello userlyz!"</span><span class="token punctuation">,</span>            num<span class="token operator">:</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">sub</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//alert("sub")</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"别减了"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//alert("add")</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"别加了"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="显示切换，属性绑定"><a href="#显示切换，属性绑定" class="headerlink" title="显示切换，属性绑定"></a>显示切换，属性绑定</h3><p>v-show根据表达式的真假，切换元素的显示和隐藏</p><p>v-show=”ture” 或v-show=”age&gt;=18”</p><p><strong>原理是</strong>修改元素的displaly的值，显示隐藏 ；值为true元素显示，值为false元素隐藏；数据变化之后，对应元素的显示状态会同步更新</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切换图片的显示和隐藏<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeisShow<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.jj20.com%2Fup%2Fallimg%2Ftp09%2F21042G4331941H-0-lp.jpg&amp;refer=http%3A%2F%2Fimg.jj20.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1642915250&amp;t=bf95b9745b8bf5cd6e5905306dd3014f<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">{</span>            message<span class="token operator">:</span><span class="token string">"Hello userlyz!"</span><span class="token punctuation">,</span>            isShow<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">changeisShow</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//alert(this.isShow);</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v-if</p><p>根据表达式的真假，切换元素的显示和隐藏（直接操纵dom元素）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切换显示<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeisShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>userlyz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">{</span>            message<span class="token operator">:</span><span class="token string">"Hello userlyz!"</span><span class="token punctuation">,</span>            isShow<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">changeisShow</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表循环，表单元素绑定"><a href="#列表循环，表单元素绑定" class="headerlink" title="列表循环，表单元素绑定"></a>列表循环，表单元素绑定</h3>]]></content>
      
      
      
        <tags>
            
            <tag> javaee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3d之塔防游戏</title>
      <link href="2022/03/19/unity3d-zhi-ta-fang-you-xi/"/>
      <url>2022/03/19/unity3d-zhi-ta-fang-you-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="学习地址"><a href="#学习地址" class="headerlink" title="学习地址"></a>学习地址</h1><p> <a href="http://www.sikiedu.com/course/46">如何制作塔防游戏（基于Unity5.5） - SiKi学院 - 生命不息，学习不止！ (sikiedu.com)</a> </p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1、开始创建工程</p><p>2、利用Cube创建基本的地图</p><p>3、创建敌人要走的路</p><p>4、控制游戏的视野</p><p>5、路径管理，以及创建敌人，控制敌人的移动</p><p>6、敌人孵化器管理敌人的生成改进敌人的生成策略</p><p>7、创建三种炮台的Prefab</p><p>8、创建炮台选择UI创建炮台数据类，监听炮塔选择事件</p><p>9、检测鼠标点击到那个Cube上，检查是否可以创建炮台、金钱的管理</p><p>10、完成炮台的实例化创建，显示没有钱的效果</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Unity3d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3d开发_课本</title>
      <link href="2022/03/14/unity3d-kai-fa-ke-ben/"/>
      <url>2022/03/14/unity3d-kai-fa-ke-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章游戏脚本"><a href="#第四章游戏脚本" class="headerlink" title="第四章游戏脚本"></a>第四章游戏脚本</h1><h2 id="使用OnGUI显示FPS"><a href="#使用OnGUI显示FPS" class="headerlink" title="使用OnGUI显示FPS"></a>使用OnGUI显示FPS</h2><p><img src="/2022/03/14/unity3d-kai-fa-ke-ben/image-20220314204737759.png" alt="显示FPS"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public float updateInterval = 0.5f;public int test;private float accum = 0;private int frames = 0;private float timeleft;private string stringFps;void Start(){    timeleft = updateInterval;}void Update(){    timeleft -= Time.deltaTime;    accum += Time.timeScale / Time.deltaTime;    ++frames;    if (timeleft &lt;= 0.0f)    {        float fps = accum / frames;        string format = System.String.Format("{0:F2} FPS", fps);        stringFps = format;        timeleft = updateInterval;        accum = 0.0f;        frames = 0;    }}void OnGUI(){    GUIStyle guistyle = GUIStyle.none;    guistyle.fontSize = 30;    guistyle.normal.textColor = Color.red;    guistyle.alignment = TextAnchor.UpperLeft;    Rect rt = new Rect(40, 0, 100, 100);    GUI.Label(rt, stringFps,guistyle);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下边的代码强制设置fps最高帧为30帧<strong>要使用int 而不能使用float类型的参数</strong></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Application.targetFrameRate=30;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Unity3d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3d开发</title>
      <link href="2022/03/05/unity3d-kai-fa/"/>
      <url>2022/03/05/unity3d-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>学习地址总结</p><p><a href="http://c.biancheng.net/view/2685.html">c语言中文网</a></p><h2 id="原生物体"><a href="#原生物体" class="headerlink" title="原生物体"></a>原生物体</h2><p>Cube 立方体</p><p>Sphere 球体</p><p>Capsule 胶囊体</p><p>Cylinder 圆柱体</p><p>Plane 平面</p><p>坐标栅格的一格默认为1米，为约定单位</p><p>原生的模型仅用于练习，真正的模型应该是在专业的建模的软件</p><h1 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h1><p>可以使用JavaScript也可以使用C#语言进行编写脚本</p><p>JavaScript之前已经又所了解，但是在之前也只是在网页的基础上进行学习在网页上如何使用JavaScript脚本进行编译</p><p><a href="https://userlyz.github.io/2021/12/29/js-xue-xi/">js学习 | 毛豆人很逗 (userlyz.github.io)</a></p><h2 id="C-脚本语言基础"><a href="#C-脚本语言基础" class="headerlink" title="C#脚本语言基础"></a>C#脚本语言基础</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>总共六种类型</p><h4 id="1、整数类型"><a href="#1、整数类型" class="headerlink" title="1、整数类型"></a>1、整数类型</h4><p>整数分成了八种类型</p><p>sbyte   有符号8为整数 ，取值范围为-128<del>127    ； byte 无符号8为整数，取值范围0</del>255   ；short  有符号16位整数，取值范围-32768-32767     nshort  无符号16位整数 ，取值范围0<del>65535  int 有符号32位整数，取值范围-2147489648</del>2147489647   nint无符号32位整数0<del>42994967295   long有符号64位整数，取值范围-2的63次方</del>2的63次方   nlong无符号64位整数0~2的64位整数</p><table><thead><tr><th>类型</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>sbyte</td><td>有符号8为整数</td><td>-128~127</td></tr><tr><td>byte</td><td>无符号8为整数</td><td>0~255</td></tr><tr><td>short</td><td>有符号16为整数</td><td>-32768-32767</td></tr><tr><td>nshort</td><td>无符号16为整数</td><td>0~65535</td></tr><tr><td>int</td><td>有符号32为整数</td><td>-2147489648~2147489647</td></tr><tr><td>nint</td><td>无符号32为整数</td><td>0~42994967295</td></tr><tr><td>long</td><td>有符号64为整数</td><td>-的2的63次方~2的63次方</td></tr><tr><td>nlong</td><td>无符号64为整数</td><td>0~~2的64次方</td></tr></tbody></table><h4 id="2、浮点类型"><a href="#2、浮点类型" class="headerlink" title="2、浮点类型"></a>2、浮点类型</h4><p>依然是延续了float double两种浮点类型</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">float angles=36.5f;double rate=0.253D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>类型</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>32位单精度浮点类型</td><td>-的2的128次方~2的128次方</td></tr><tr><td>double</td><td>64位双精度浮点类型</td><td>-的2的1024次方~2的1024次方</td></tr></tbody></table><h4 id="3、布尔类型"><a href="#3、布尔类型" class="headerlink" title="3、布尔类型"></a>3、布尔类型</h4><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">bool b=true;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、字符类型（char）"><a href="#4、字符类型（char）" class="headerlink" title="4、字符类型（char）"></a>4、字符类型（char）</h4><table><thead><tr><th>转义字符</th><th>含义</th><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td>'</td><td>单引号</td><td>\f</td><td>换页</td></tr><tr><td>"</td><td>双引号</td><td>\n</td><td>换行</td></tr><tr><td>\</td><td>反斜线</td><td>\r</td><td>回车</td></tr><tr><td>\0</td><td>空</td><td>\t</td><td>水平制表符</td></tr><tr><td>\a</td><td>报警</td><td>\v</td><td>垂直制表符</td></tr><tr><td>\b</td><td>空格</td><td></td><td></td></tr></tbody></table><h4 id="5、引用类型"><a href="#5、引用类型" class="headerlink" title="5、引用类型"></a>5、引用类型</h4><p>引用类型变量的赋值只复制对象的引用，而不复制对象本身</p><h4 id="6、枚举类型"><a href="#6、枚举类型" class="headerlink" title="6、枚举类型"></a>6、枚举类型</h4><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">enum 枚举类型名称{    常量1=值1;    常量2=值2;    ...   常量n=值n;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>修饰符的添加</p><p><strong>private（默认修饰符）</strong>，只能在本类中访问。</p><p>**protected ** 只能在类或者派生类中访问。</p><p>**internal ** 只能在本项目中访问。</p><p>如果想让脚本中定义的变量在unity3d中的inspector面板中显示，必须使用<strong>public</strong>修饰</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h4><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">if (表达式){    语句1}else{    语句2}###########switch(值){    case 值1：语句1;        break;    case 值n:语句n;        break;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">do{    语句}while(条件);while(条件){    语句}for(int i=1;i&lt;=10;i++){    Console.WriteLine("{0},i")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>在Unity3d中，C#脚本需要预先加载库类</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using UnityEngine;using System,Collection;public class NewBehaviourScript:MonoBehaviour{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所有游戏执行语句都包含在这个继承自MonoBehaviour类的自创脚本中</p><h5 id="常用函数如下"><a href="#常用函数如下" class="headerlink" title="常用函数如下"></a>常用函数如下</h5><p><strong>1、Update()</strong></p><p>正常更新，创建JavaScript脚本时默认添加这个方法，每一帧都会由系统调用该方法</p><p><strong>2、LateUpdate()</strong></p><p>推迟更新，此方法在Update()方法执行完之后调用，每一帧都调用一次</p><p><strong>3、FixedUpdate()</strong></p><p>置于这个函数中的代码每隔一定时间执行一次</p><p><strong>4、Awake()</strong></p><p>脚本唤醒，用于脚本初始化，在脚本周期内执行一次</p><p><strong>5、Start()</strong></p><p>在Update()之前,Awake()之后执行，Start()函数和Awake()函数的不同就在于Start()函数仅在脚本启用时执行</p><p><strong>6、OnDestory()</strong></p><p>当前脚本销毁时执行</p><p><strong>7、OnGUI()</strong></p><p>绘制游戏界面的函数，因为每一帧都要执行多次，所以一些时间相关的函数要尽量避免直接在该函数内部使用</p><p><strong>8、OnCollisionEnter()</strong></p><p>当一个游戏对象与另外的游戏对象碰撞时执行这个函数</p><p><strong>9、OnMouseDown()</strong></p><p>当鼠标在一个载有GUI元素或碰撞器的游戏对象上按下时执行该函数</p><p><strong>10、OnMouseOver()</strong></p><p>当鼠标在一个载有GUI元素或碰撞器的游戏对象上经过时执行该函数</p><p><strong>11、OnMouseEnter()</strong></p><p>鼠标进入物体范围时执行该函数，和上面有所不同，这个只执行一次</p><p><strong>12、OnMouseExit()</strong></p><p>鼠标离开物体范围时执行该函数</p><p><strong>13、OnMouseUp()</strong></p><p>鼠标释放时执行该函数</p><p><strong>14、OnMouseDrog()</strong></p><p>按住鼠标拖动对象时执行该函数</p><p><em><strong>注意：</strong></em></p><p>Awake()适合做初始化Start()才适合安全的访问其他脚本数据</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p><strong>使用CreatePrimitive方法创建Unity3D中系统自带的基本游戏对象</strong></p><p>使用C#脚本在unity3D中创建一个Cube模型和一个Sphere模型，通过屏幕上方的按钮控制Cube模型和Sphere模型的创建</p><p>创建脚本输入代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class CreatePrimitive : MonoBehaviour{    void OnGUI()    {        if (GUILayout.Button("CreateCube", GUILayout.Height(50)))        {            GameObject m_cube = GameObject.CreatePrimitive(PrimitiveType.Cube);            m_cube.AddComponent&lt;Rigidbody&gt;();            m_cube.GetComponent&lt;Renderer&gt;().material.color = Color.blue;            m_cube.transform.position = new Vector3(0, 10, 0);        }        if (GUILayout.Button("CreateSphere", GUILayout.Height(50)))        {            GameObject m_cube = GameObject.CreatePrimitive(PrimitiveType.Sphere);            m_cube.AddComponent&lt;Rigidbody&gt;();            m_cube.GetComponent&lt;Renderer&gt;().material.color = Color.red;            m_cube.transform.position = new Vector3(0, 10, 0);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/05/unity3d-kai-fa/image-20220309084140334.png" alt="具体实现结果"></p><p><strong>使用Instantiate实例化方法将预制体实例化位对象</strong></p><p>移动旋转缩放立方体</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class Myscript : MonoBehaviour{    //声明4个变量    public GameObject myCube;    public int transSpeed = 100;    public float rotaSpeed = 10.5f;    public float scale = 3;    void OnGUI()    {        if (GUILayout.Button("移动立方体"))        {            myCube.transform.Translate(Vector3.forward * transSpeed * Time.deltaTime, Space.World);        }        if (GUILayout.Button("旋转立方体"))        {            myCube.transform.Rotate(Vector3.up * rotaSpeed, Space.World);        }        if (GUILayout.Button("缩放立方体"))        {            myCube.transform.localScale = new Vector3(scale, scale, scale);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建之后把脚本赋给main Camera，然后在Main Camera的inspector下把创建的Cube拖到My Cube中</strong></p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220311104804199.png" alt="托的位置"></p><p>摄像机的前左右运动</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">transform.Translate(Input.GetAxis("Horizontal"), 0, Input.GetAxis("Vertical"));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第一人称漫游</strong></p><p>创建空的GameObject给这个空的Object创建Rigidbody，Character Controller</p><p>在Rigidbody中要将Use Gravity取消勾选，勾选is Kinenmatic 这个主要时用来不受重力影响，根据脚本的路线运行</p><p>在Character Controller中</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>Slope Limit</code></td><td align="center">坡度限制</td><td align="center">限制碰撞器只能爬小于等于该值的斜坡</td></tr><tr><td align="center"><code>Step Offset</code></td><td align="center">台阶高度</td><td align="center">角色可以迈上的最高台阶高度</td></tr><tr><td align="center"><code>Skin Width</code></td><td align="center">皮肤厚度</td><td align="center">皮肤厚度决定了两个碰撞器可以互相渗透的深度</td></tr><tr><td align="center"><code>Min Move Distance</code></td><td align="center">最小移动距离</td><td align="center">如果角色移动的距离小于该值，角色就不会移动</td></tr><tr><td align="center"><code>Center</code></td><td align="center">中心</td><td align="center">该值决定胶囊碰撞器在世界空间中的位置</td></tr><tr><td align="center"><code>Radius</code></td><td align="center">半径</td><td align="center">胶囊碰撞器的横截面半径</td></tr><tr><td align="center"><code>Height</code></td><td align="center">高度</td><td align="center">胶囊碰撞器的高度</td></tr></tbody></table><p><em><strong>目前已经解决好</strong></em></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//这段代码只能实现根据那个鼠标的状态去进行原地移动，已经解决//就跟那个创建的时候差不多，这次只是把main Camera放到那个Transform里边就可以啦using System.Collections;using System.Collections.Generic;using UnityEngine;public class Player : MonoBehaviour{    public Transform m_transform;    CharacterController m_ch;    float m_movSpeed = 3.0f;    float m_gravity = 2.0f;    //摄像机Transform    Transform m_camTransform;    //摄像机旋转角度    Vector3 m_camRot;    //摄像机高度    float m_camHeight = 1.4f;    //修改Start函数，初始化摄像机的位置和旋转角度    void Start()    {        m_transform = this.transform;        m_ch = this.GetComponent&lt;CharacterController&gt;();        //获取摄像机        m_camTransform =Camera.main.transform;        Vector3 pos = m_transform.position;        pos.y += m_camHeight;        m_camTransform.position = pos;        //设置摄像机的旋转方向和主角一致        m_camTransform.rotation = m_transform.rotation;        m_camRot = m_camTransform.eulerAngles;        //锁定鼠标        Screen.lockCursor = true;    }    private void Update()    {        Contorl();    }    void Contorl()    {        //定义3个值控制移动        float xm = 0, ym = 0, zm = 0;        //重力运动        ym = m_gravity * Time.deltaTime;        //前后运动        if (Input.GetKey(KeyCode.W))        {            zm += m_movSpeed * Time.deltaTime;        }else if ( Input.GetKey(KeyCode.S)){            zm -= m_movSpeed * Time.deltaTime;        }        if (Input.GetKey(KeyCode.A))        {            xm -= m_movSpeed * Time.deltaTime;        }else if (Input.GetKey(KeyCode.D)){            xm += m_movSpeed * Time.deltaTime;        }        //使用角色控制器提供的Move函数进行移动        m_ch.Move(m_transform.TransformDirection(new Vector3(xm, ym, zm)));        float rh = Input.GetAxis("Mouse X");        float rv = Input.GetAxis("Mouse Y");        //旋转摄像机        m_camRot.x -= rv;        m_camRot.y += rh;        m_camTransform.eulerAngles = m_camRot;        //使角色的面向方向与摄像机方向一致        Vector3 camrot = m_camTransform.eulerAngles;        camrot.x = 0;camrot.y = 0;        m_transform.eulerAngles = camrot;        //操作角色移动代码        //使摄像机位置与角色一致        Vector3 pos = m_transform.position;        pos.y += m_camHeight;        m_transform.position = pos;     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="图形用户界面"><a href="#图形用户界面" class="headerlink" title="图形用户界面"></a>图形用户界面</h1><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>按钮分为两种：普通按钮和图片按钮</p><p>系统默认显示的按钮，呈透明状，显示白色文字，使用方法如下：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Button button;   private void Start()   {       button.onClick.AddListener(delegate () {           Debug.Log("点击");       });   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先在ui创建一个button，之后在button下add component下添加刚才写好的脚本，之后给button添加进去就可以运行了</p><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><p>用于在屏幕上绘制一个图形化的盒子，可以显示文本内容，也可以绘制图片，或者两者同时存在</p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313094616185.png" alt="Box控件"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private void OnGUI(){    GUI.Box(new Rect(0, 0, 100, 50),"top-left");    GUI.Box(new Rect(Screen.width-100, 0, 100, 50),"top-Right");    GUI.Box(new Rect(0, Screen.height-50, 100, 50),"Buttom-left");    GUI.Box(new Rect(Screen.width-100, Screen.height-50, 100, 50),"buttom_right");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将脚本发连接到Main Camera上</p><p><strong>图片</strong></p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313095313988.png" alt="添加图片"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public GUIContent content;   private void OnGUI()   {       GUI.Box(new Rect(Screen.width-100, 0, 100, 50),content);   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><p>用于创建我呢本标签和纹理标签，和Box类似也可以显示文本内容或图片</p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313100207774.png" alt="Label"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Texture2D tectureToDisplay ;void OnGUI(){    GUI.Label(new Rect(10,10,100,20), "hello world");    GUI.Label(new Rect(10, 40, tectureToDisplay.width, tectureToDisplay.height), tectureToDisplay);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bakcground-Color"><a href="#Bakcground-Color" class="headerlink" title="Bakcground Color"></a>Bakcground Color</h2><p>主要就是用来渲染GUI的背景</p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313142600609.png" alt="backgroundColor"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System.Collections;using System.Collections.Generic;using UnityEngine;using Color = UnityEngine.Color;public class learn_backgroundColor : MonoBehaviour{    public System.Drawing.Color backgroundcolor;    void OnGUI()    {        GUI.backgroundColor= Color.red;        GUI.Button(new Rect(10, 110, 70, 30), "Button");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个主要是因为对于变量不清楚导致，一致在报错</p><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><p>Background Color控件类似，都是渲染GUI颜色的但是两者不同的是<strong>Color不但会渲染GUI背景的颜色，同时还会影响GUI.Text的颜色</strong></p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313143236533.png" alt="Color"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Color color;void OnGUI(){    GUI.color = Color.yellow;    GUI.Label(new Rect(10, 10, 100, 20),"helloworld");    GUI.Box(new Rect(10, 50, 50, 50), "Box");    GUI.Button(new Rect(10, 110, 70, 30), "Button");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个从实际的一个角度来看，应该是属于更针对于字体颜色的一个设置,backgroundColor更加像针对于背景的一个设置，但是Color的对于那个背景也是有一定的影响的</p><h2 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h2><p>用于绘制一个单行文本编辑框，用于可以在该单行文本编辑框中输入信息，输入内容的返回类型是String</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>位置及大小</td></tr><tr><td>maxlength</td><td>输入字符串的最大长度</td></tr><tr><td>text</td><td>默认显示的文本</td></tr><tr><td>style</td><td>使用样式</td></tr></tbody></table><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313144916147.png" alt="单行文本"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public string str = "helloworld";void OnGUI(){    str = GUI.TextField(new Rect(10, 10, 200, 20), str);    //Debug.Log(str);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TextArea"><a href="#TextArea" class="headerlink" title="TextArea"></a>TextArea</h2><p>用于创建多行文本编辑区，返回类型还是string</p><p><strong>参数和参数的描述跟TextField一样</strong></p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313145520878.png" alt="TextArea"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public string str = "helloworld\nI have two lines";    private void OnGUI()    {        str = GUI.TextArea(new Rect(10,10,200,100), str, 200);        //Debug.Log(str);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h2><p>当游戏界面的内容特别多，用于超出屏幕的显示范围，就可以使用Unity3D ScrollView滚动显示界面内的全部内容</p><p>滚动条又两部分组成<strong>GUI.BeginScrollView开始滚动视图，GUI.EndScrollView 结束滚动视图</strong></p><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>位置及大小</td></tr><tr><td>viewRect</td><td>设置滚动整体显示范围</td></tr><tr><td>HorizontalScrollbar</td><td>水平滚动条</td></tr><tr><td>VerticalScrollbar</td><td>垂直滚动条</td></tr><tr><td>ScrollPosition</td><td>显示滚动位置</td></tr><tr><td>alwaysShowHorizontal</td><td>可选参数，总是显示水平滚动条</td></tr><tr><td>alwaysShowVertical</td><td>可选参数，总是显示垂直滚动条</td></tr></tbody></table><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313150903857.png" alt="ScrollView"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Vector2 scrollposition = Vector2.zero;private void OnGUI(){    scrollposition = GUI.BeginScrollView(new Rect(10, 300, 100, 100), scrollposition, new Rect(0, 0, 220, 200));    GUI.Button(new Rect(0, 0, 100, 20), "左上角");    GUI.Button(new Rect(120, 0, 100, 20), "右上角");    GUI.Button(new Rect(0, 180, 100, 20), "左下角");    GUI.Button(new Rect(120, 180, 100, 20), "右下角");    GUI.EndScrollView();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Slide"><a href="#Slide" class="headerlink" title="Slide"></a>Slide</h2><p>两种状态水平滚动条 GUI.HorizontalSlider;垂直滚动条GUI.VerticalSlider</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>位置及大小</td></tr><tr><td>leftValue</td><td>设置滑块左端的值</td></tr><tr><td>slider</td><td>用于显示拖曳区域的GUI样式</td></tr><tr><td>value</td><td>设置滑动条显示的值</td></tr><tr><td>rightValue</td><td>滑块右端的值</td></tr><tr><td>thumb</td><td>设置显示可多同的滑块的GUI样式</td></tr></tbody></table><p>就是一个滑块在进度条上左右拖动，游戏中经常会有使用它来做英雄的血条</p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313151858331.png" alt="Slider"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">float hSliderValue = 0.0f;float VSliderValue = 0.0f;void OnGUI(){    hSliderValue = GUI.HorizontalSlider(new Rect(25, 25, 100, 30), hSliderValue, 0.0f, 10.0f);    VSliderValue = GUI.VerticalSlider(new Rect(50, 50, 100, 30), VSliderValue, 10.0f, 0.0f);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绑定脚本的方式和那个button是一样的</p><h2 id="ToolBar"><a href="#ToolBar" class="headerlink" title="ToolBar"></a>ToolBar</h2><p>用于创建工具栏</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>位置及大小</td></tr><tr><td>texts</td><td>显示的一组字符串</td></tr><tr><td>contents</td><td>显示的一组文本，图像和工具提示</td></tr><tr><td>selected</td><td>选择按钮的索引</td></tr><tr><td>images</td><td>按钮上显示的一组纹理</td></tr><tr><td>style</td><td>要使用的样式；如果忽略则使用GUISkin的按钮样式</td></tr></tbody></table><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313152941609.png" alt="ToolBar"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public int toolbarint = 0;public string[] toolbarStrings = { "toolbar1", "toolbar2", "toolbar2" };private void OnGUI(){    toolbarint = GUI.Toolbar(new Rect(25, 25, 250, 30), toolbarint, toolbarStrings);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ToolTip"><a href="#ToolTip" class="headerlink" title="ToolTip"></a>ToolTip</h2><p>主要使用来显示提示信息</p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313154406871.png" alt="Box显示信息"></p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313154439151.png" alt="button提示信息"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public string tool="";void OnGUI(){    GUI.Box(new Rect(5, 35, 210, 175), new GUIContent("Box", "this box has,a tooltip"));    GUI.Button(new Rect(30, 85, 100, 20), "no tooltip here");    GUI.Button(new Rect(30, 120, 100, 20), new GUIContent("这里有一tooltip", "The Button the box"));    GUI.Label(new Rect(10, 40, 100, 40), GUI.tooltip);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Drag-Windows"><a href="#Drag-Windows" class="headerlink" title="Drag Windows"></a>Drag Windows</h2><p>用于实现屏幕内可拖拽窗口的功能</p><p><strong>参数</strong></p><p>只有一个参数：position,设置可以拖动的窗口的一部分，这部分将被裁剪到实际的窗口中，这个可以使用鼠标拖动窗口</p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220313173900018.png" alt="Drag Windows"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Rect windowsRect = new Rect(20, 20, 120, 50);void OnGUI(){    windowsRect = GUI.Window(0, windowsRect,DoMyWindow, "My Windows");}private void DoMyWindow(int id){    GUI.DragWindow(new Rect(0, 0, 10000, 20));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>一个游戏界面可以又很多窗口组成，在每一个窗口可以添加不同的任意的功能组见，让窗口的使用丰富了游戏界面的内容</p><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Style</td><td>窗口的可选样式，如果不设置使用当前的GUISkin的窗口模式</td></tr><tr><td>clientRect</td><td>设置窗口可以拖动的一部分，这部分将被剪切到实际的窗口中</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>content</td><td>窗口内渲染的图片</td></tr><tr><td>title</td><td>设置文本在窗口标题栏的显示</td></tr><tr><td>id</td><td>设置窗口饿id号（可以是任何值，只要唯一）</td></tr><tr><td>func</td><td>设置显示窗口内容的脚本参数，回调函数的名称</td></tr><tr><td>image</td><td>窗口中渲染的图像</td></tr><tr><td>style</td><td>设置窗口的样式信息</td></tr></tbody></table><p><img src="/2022/03/05/unity3d-kai-fa/image-20220314083655126.png" alt="window控件"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Rect windowsRect0 = new Rect(20, 20, 120, 50);public Rect windowsRect1 = new Rect(20, 100, 120, 50);void OnGUI(){    GUI.color = Color.red;    windowsRect0 = GUI.Window(0, windowsRect0, DoMyWindow, "Red window");    GUI.color = Color.green;    windowsRect1 = GUI.Window(1, windowsRect1, DoMyWindow, "Green window");}private void DoMyWindow(int id){    if (GUI.Button(new Rect(20, 20, 100, 20), "helloworld"))    {        print("你点的窗口颜色是" + GUI.color);        GUI.DragWindow(new Rect(0, 0, 1000, 1000));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h2><p>选中图片，将Tecture type修改成sprit render格式，然后将其加载到Hierarchy视图中</p><p>Unity3D会自动分析图片的宽和高，然后依次规格将其加载进来</p><h2 id="Skin"><a href="#Skin" class="headerlink" title="Skin"></a>Skin</h2><p>用于给控件添加漂亮的皮肤</p><table><thead><tr><th>参数</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>Font</td><td>字体</td><td>用于图形界面中每一个控件使用的全局字体</td></tr><tr><td>Box</td><td>盒</td><td>应用于所有盒子控件的样式</td></tr><tr><td>Button</td><td>按钮</td><td>应用于所有按钮控件的样式</td></tr><tr><td>Toggle</td><td>切换开关</td><td>应用于所有切换开关的样式</td></tr><tr><td>Label</td><td>标签</td><td>应用于所有标签控件的样式</td></tr><tr><td>TextField</td><td>文本框</td><td>应用于所有文本框的样式</td></tr><tr><td>TextArea</td><td>文本区域</td><td>应用于所有多行文本域控件的样式</td></tr><tr><td>Window</td><td>窗口</td><td>应用于所有窗口控件的样式</td></tr><tr><td>Horizontal Slider</td><td>水平滑动条</td><td>应用于所有水平滑动条的样式</td></tr><tr><td>Horizontal Slider Thunb</td><td>水平滑块</td><td>应用于所有水平滑块控件的样式</td></tr><tr><td>Vertical Slider</td><td>垂直滑动条</td><td>应用于所有垂直滑块条的样式</td></tr><tr><td>Vertical Slider Thumb</td><td>垂直滑块</td><td>应用于所有垂直滑块控件的样式</td></tr><tr><td>Horizontal Scrollbar</td><td>水平滚动条</td><td>应用于所有水平滚动条的样式</td></tr><tr><td>Horizontal Scrollbar Thumb</td><td>水平滚动条滑块</td><td>应用于所有水平滚动条滑块的样式</td></tr><tr><td>Horizontal Scrollbar Left Button</td><td>水平滚动条左边按钮</td><td>应用于所有水平滚动条左边按钮的样式</td></tr><tr><td>Horizontal Scrollbar Right Button</td><td>水平滚动条右边按钮</td><td>应用于所有水平滚动条右边按钮的样式</td></tr><tr><td>Vertical Scrollbar</td><td>垂直滚动条</td><td>应用于所有垂直滚动条的样式</td></tr><tr><td>Vertical Scrollbar Thumb</td><td>垂直滚动条滑块</td><td>应用于所有垂直滚动滑块的样式</td></tr><tr><td>Vertical Scrollbar Up Button</td><td>垂直滚动条顶部按钮</td><td>应用于所有垂直滚动条顶部按钮的样式</td></tr><tr><td>Vertical Scrollbar Down Button</td><td>垂直滚动条底部按钮</td><td>应用于所有垂直滚动条底部按钮的样式</td></tr><tr><td>Custom 1-20</td><td>自定义</td><td>附加的自定义样式可以应用于任何控件</td></tr><tr><td>Custom Styles</td><td>自定义样式</td><td>一个可以应用于任何控件的自定义样式的集合</td></tr><tr><td>Settings</td><td>设定</td><td>所有图形用户界面的附加设定</td></tr></tbody></table><p><strong>各种属性的解释</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>控件的名称</td></tr><tr><td>Normal</td><td>设置文字默认显示的颜色和背景颜色</td></tr><tr><td>Hover</td><td>设置停留状态显示的颜色和背景颜色，可用于鼠标停留在那妞、输入框、选择框等上，但是没有点击时的显示</td></tr><tr><td>Active</td><td>设置激活状态的显示的颜色和背景颜色，用于按钮或者选择框点击后的显示</td></tr><tr><td>Focused</td><td>获得焦点状态，用于窗口的得到焦点后的显示</td></tr><tr><td>On Normal</td><td>默认状态，未选中状态，用于选择框控件显示的内容</td></tr><tr><td>On Hover</td><td>停留状态，用于选择框控件选中后文字的显示</td></tr><tr><td>On Active</td><td>激活状态，用于选择框控件选中时文字显示</td></tr><tr><td>On Focused</td><td>获得焦点状态</td></tr><tr><td>Border</td><td>处理边界，他不会影响在按钮平面显示的宽高</td></tr><tr><td>Padding</td><td>设置按钮显示的内容和按钮边缘的偏移位置</td></tr><tr><td>Margin</td><td>设置按钮显示的内容于边界的偏移位置</td></tr><tr><td>Overflow</td><td>设置按钮超出原来大小的距离</td></tr><tr><td>Font</td><td>设置针对于该控件的字体</td></tr><tr><td>Image Position</td><td>设置图片位置</td></tr><tr><td>Alignment</td><td>设置内容的对齐方式</td></tr><tr><td>Word Wrap</td><td>是否自动换行</td></tr><tr><td>Text Clipping</td><td>设置内容的裁剪方式</td></tr><tr><td>Context Offset</td><td>设置内容的偏移量</td></tr><tr><td>Fixed Width</td><td>设置边缘固定的宽度</td></tr><tr><td>Fixed Height</td><td>设置边缘固定的高度</td></tr><tr><td>Font Size</td><td>字体大小，默认大小为0</td></tr><tr><td>Font Style</td><td>字体风格</td></tr><tr><td>Stretch Width</td><td>是否伸展宽度</td></tr><tr><td>Stretch Height</td><td>是否伸展高度</td></tr></tbody></table><p><img src="/2022/03/05/unity3d-kai-fa/image-20220314095414223.png" alt="Skin"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public GUISkin[] s1;public int cont = 0;private void OnGUI(){    GUI.skin = s1[cont % s1.Length];    if (s1.Length == 0)    {        Debug.Log("至少放一个skin到列表中");        return;    }    GUI.Label(new Rect(10, 10, 100, 20), "Hello World!");    GUI.Box(new Rect(10, 50, 50, 50), "A Box");    GUI.Button(new Rect(10, 110, 70, 30), "A Button");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>csdn博客参考</p><p><img src="/2022/03/05/unity3d-kai-fa/image-20220314100317168.png" alt="Skin,参考"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public GUISkin myskin;private bool choose = false;public Rect windowRect = new Rect(20, 20, 120, 50);public string edit = "请输入字符串";private void OnGUI(){    GUI.skin = myskin;    GUI.Button(new Rect(100, 100, 100, 100), "自定义按钮");    choose = GUI.Toggle(new Rect(10, 50, 100, 30), choose, "单项选择");    edit = GUI.TextField(new Rect(200, 10, 200, 20), edit, 25);    windowRect = GUI.Window(0, windowRect, setwindow, "这是一个窗口");}private void setwindow(int id){    GUI.DragWindow();    GUI.Button(new Rect(10, 20, 100, 30), "小窗口自定义的按钮");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h2><p>用于在屏幕上绘制一个开关，通过开关的闭合来执行一些具体的指定操作，就会根据不同的切换动作来返回相应的布尔值</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>设置控件在屏幕上的位置及大小</td></tr><tr><td>image</td><td>设置控件显示的纹理图片</td></tr><tr><td>style</td><td>设置控件使用的样式</td></tr><tr><td>text</td><td>设置控件显示的文本</td></tr><tr><td>content</td><td>置控件的文本，图片和提示大小</td></tr><tr><td>value</td><td>设置开关时开启还是关闭</td></tr></tbody></table><p><img src="/2022/03/05/unity3d-kai-fa/image-20220314195558760.png" alt="toggle"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Texture atexture;private bool toggleTxt = false;private bool toggleImg = false;private void OnGUI(){    if (!atexture)    {        Debug.Log("请添加一个图片");        return;    }    toggleTxt = GUI.Toggle(new Rect(10, 10, 100, 30), toggleTxt, "a toggle text");    toggleImg = GUI.Toggle(new Rect(10, 50, 50, 50), toggleImg, atexture);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="UGUI系统"><a href="#UGUI系统" class="headerlink" title="UGUI系统"></a>UGUI系统</h1><p>灵活，快速，可视化</p><h2 id="Canvas画布"><a href="#Canvas画布" class="headerlink" title="Canvas画布"></a>Canvas画布</h2><h3 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h3><p><img src="/2022/03/05/unity3d-kai-fa/image-20220314200417936.png" alt="Render Mode"></p><h4 id="Screen-Space-Overlay渲染模式"><a href="#Screen-Space-Overlay渲染模式" class="headerlink" title="Screen Space-Overlay渲染模式"></a><strong>Screen Space-Overlay</strong>渲染模式</h4><p>该模式下不需要UI摄像机，UI将永远出现在所有摄像机的最前面，屏幕大小或者分辨率发生变化，画布会自动适配</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>Pixel Perfect</td><td>充值元素大小和坐标，使贴图的像素完美对应带屏幕像素上</td></tr><tr><td>Sort Order</td><td>排列顺序</td></tr></tbody></table><h4 id="Screen-Space-Camera渲染模式"><a href="#Screen-Space-Camera渲染模式" class="headerlink" title="Screen Space-Camera渲染模式"></a><strong>Screen Space-Camera</strong>渲染模式</h4><p>画布被放置在指定摄像机前的一个给定距离上，它支持在UI前面显示3D模型，等离子系统等内容，通过指定摄像机UI被呈现出来，画布会自定更改大小一适配屏幕</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>Pixel Perfect</td><td>重置元素大小和坐标，使贴图的像素完美对应到屏幕像素上</td></tr><tr><td>Render Camera</td><td>UI绘制所对应的摄像机</td></tr><tr><td>Plane Distance</td><td>UI距离摄像机镜头的距离</td></tr><tr><td>Sorting Layout</td><td>界面分层，越下方的层在界面显示时越在前面<img src="/2022/03/05/unity3d-kai-fa/image-20220314201620401.png" alt="位置"></td></tr><tr><td>Order Layer</td><td>界面顺序，该值越高，在姐买你显示时越在前面</td></tr></tbody></table><h4 id="World-Space渲染模式"><a href="#World-Space渲染模式" class="headerlink" title="World Space渲染模式"></a><strong>World Space</strong>渲染模式</h4><p>其屏幕大小将取决于拍摄的角度和相机的距离</p><p>是一个完全三维的UI，也就是把UI也当成三维对象</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>Event Camera</td><td>设置用来处理界面事件的摄像机</td></tr><tr><td>Sorting Layer</td><td>同上</td></tr><tr><td>Order Layer</td><td>同上</td></tr></tbody></table><h2 id="Event-System事件系统"><a href="#Event-System事件系统" class="headerlink" title="Event System事件系统"></a>Event System事件系统</h2><p>Event System 事件处理事件；将基于输入的世家您发送到应用程序中的对象</p><p>Standalone Input Module独立输入模块；基于InputManager管理器的状态发送事件</p><p>Touch Input Module触控输入模块</p><h2 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h2><p>面板，实际上就是一个容器；一个面板里还可以套用其他面板</p><p>面板创建时会默认包含一个Image(Script组件)</p><p><strong>Source Image</strong> 设置面板的图像</p><p><strong>Color</strong> 用于改变面板的颜色</p><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>文本框</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Font</td><td>设置字体</td></tr><tr><td>Font Style</td><td>设置字体样式</td></tr><tr><td>Font Size</td><td>设置字体大小</td></tr><tr><td>Line Spacing</td><td>设置行间距（多行）</td></tr><tr><td>Rich Text</td><td>设置富文本</td></tr><tr><td>Alignment</td><td>设置文本在Text框中的水平以及垂直方向上的对齐方式</td></tr><tr><td>Horizontal Overflow</td><td>设置水平方向上溢出时的处理方式 <strong>Wrap</strong>隐藏；<strong>Overflow</strong>溢出</td></tr><tr><td>Vertical Overflow</td><td>设置垂直方向上溢出时的处理方式：<strong>Truncate</strong>截断；<strong>Overflow</strong>溢出</td></tr><tr><td>Best Fit</td><td>设置当前文字多时自动缩小以适应文本框大小</td></tr><tr><td>Color</td><td>设置字体颜色</td></tr></tbody></table><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Color</td><td>设置应用在图片上的颜色</td></tr><tr><td>Material</td><td>设置应用在图片上的材质</td></tr><tr><td>Image Type</td><td>设置贴图类型</td></tr></tbody></table><h2 id="Raw-Image"><a href="#Raw-Image" class="headerlink" title="Raw Image"></a>Raw Image</h2><p>向用户显示了一个非交互式的图像，它可以用于装饰，图标</p><p>Raw Image控件类似于Image 控件，但是Raw Image可以显示任何纹理，而Image只能显示一个精灵</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Texture</td><td>设置要显示的图像纹理</td></tr><tr><td>Color</td><td>应用在图片上的颜色</td></tr><tr><td>Material</td><td>设置应用在图片上的材质</td></tr><tr><td>UV Rect</td><td>设置图像在控件矩形中的偏移和大小，范围0~1</td></tr></tbody></table><h2 id="Button-1"><a href="#Button-1" class="headerlink" title="Button"></a>Button</h2><p>不仅又公共的Rect Transform 与Canvas Renderer两个组件之外，Button组件默认拥有Image与Button两个组件</p><p>1、Interactable（是否启用交互）如果取消该选项，则该Button在运行时不可点击，失去了交互性</p><p>2、Transition （过渡方式）有四个选项，默认为Color Tint(颜色色彩)</p><p><strong>·</strong>None 没有过渡方式</p><p><strong>·</strong>Color Tint颜色过度，相关属性下面有表</p><p><strong>·</strong>Sprite Swap 精灵交换，需要使用相同功能，不同状态的贴图，相关属性参考下文列表</p><p><strong>·</strong>Animation 动画过渡</p><p><strong>Color Tint属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Target Graphic</td><td>设置目标对象</td></tr><tr><td>Normal Color</td><td>设置正常颜色</td></tr><tr><td>Highlighted Color</td><td>设置高亮颜色</td></tr><tr><td>Pressed Color</td><td>设置单击色</td></tr><tr><td>Disabled Color</td><td>设置禁用色</td></tr><tr><td>Color Multiplier</td><td>设置颜色倍数</td></tr><tr><td>Fade Duration</td><td>设置变化持续的时间</td></tr></tbody></table><p><strong>Sprite Swap</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Target Graphic</td><td>设置目标图像</td></tr><tr><td>Highlight Sprite</td><td>设置鼠标经过时的贴图</td></tr><tr><td>Pressed Sprite</td><td>设置鼠标单击是的贴图</td></tr><tr><td>Disabled Sprite</td><td>设置禁用时的贴图</td></tr></tbody></table><h2 id="Toggle-1"><a href="#Toggle-1" class="headerlink" title="Toggle"></a>Toggle</h2><table><thead><tr><th>参数</th><th>列表</th></tr></thead><tbody><tr><td>Is On</td><td>设置复选框默认是开还是关</td></tr><tr><td>Toggle Transition</td><td>设置渐变效果</td></tr><tr><td>Graphic</td><td>用于切换背景，更改为一个更合适的图像</td></tr><tr><td>Group</td><td>设置多选组</td></tr></tbody></table><p>实现group中实现多个toggle单选</p><p>创建一个空物体添加Add Component添加Toggle Group;</p><p>创建多个toggle将刚才创建的Toggle Group放入toggle group;之后将刚才创建的toggle拖到刚才的空物体下，这样就实现了单选框</p><h2 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h2><p>Slider需要注意的是参数<strong>Whole Number</strong>该参数表示滑块是否只为整数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Fill Rect</td><td>设置填充矩形区域</td></tr><tr><td>Handle Rect</td><td>设置手柄矩形区域</td></tr><tr><td>Direction</td><td>设置Slider的摆放方向</td></tr><tr><td>Max Value</td><td>设置最大数值</td></tr><tr><td>Min Value</td><td>设置最小数值</td></tr><tr><td>Value</td><td>设置滑块当前的数值</td></tr></tbody></table><h2 id="ScrollBar"><a href="#ScrollBar" class="headerlink" title="ScrollBar"></a>ScrollBar</h2><p>滚动控件可以垂直或者水平放置；最大值就是1（100%），最小值是0（0%）</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Handle Rect</td><td>设置最大值和最小值之间的范围</td></tr><tr><td>Direction</td><td>设置滑动条的方向为从左到右，从上至下，或者其他方向</td></tr><tr><td>Value</td><td>设置当前滚动条对应的值</td></tr><tr><td>Size</td><td>设置操作条矩形对应的缩放长度，取值0~1</td></tr><tr><td>Numbers Of Steps</td><td>设置滚动条可滚动的位置数目</td></tr><tr><td>On Value Changed</td><td>设置值改变时触发消息</td></tr></tbody></table><h2 id="Input-Field"><a href="#Input-Field" class="headerlink" title="Input Field"></a>Input Field</h2><p>也有Image组件另外包括Transition属性，其默认是Color Tint</p><p><img src="/2022/03/05/unity3d-kai-fa/Input_Field.jpg" alt="Input_Field"></p><p>另外两个特殊的参数</p><p><strong>Content Type</strong>输入域内容类型，包括数字密码等</p><p>1、Standard 允许输入任何字符</p><p>2、Autocorrected自动校正输入的未知单词</p><p>3、Integer Number只允许输入整数</p><p>4、Decimal Number 允许输入整数和小数</p><p>5、Alpha numeric允许输入数字和字母</p><p>6、Name 允许输入英文及其他文字</p><p>7、Email Address允许输入一个由最多一个@符号组成字母数字字符串</p><p>8、Password 输入字符被隐藏，只显示星号</p><p>9、Pin只允许输入整数，输入字符被隐藏，只显示星号</p><p>10、Custom 允许用户定义类型，输入类型，键盘类型，字符验证</p><p><strong>Line Type</strong>设置当输入内容超过边界时的换行方式</p><p>1、Single Line 超过边界也不换行，继续向右延伸此行</p><p>2、Muhi Line Submit 允许文本换行，只在需要的时候换行</p><p>3、Muti Line Newline 允许文本换行，用户可以按回车健来换行</p><h2 id="UGUI实例展示"><a href="#UGUI实例展示" class="headerlink" title="UGUI实例展示"></a>UGUI实例展示</h2><p><a href="https://blog.csdn.net/weixin_42915787/article/details/81814375">(5条消息) Unity3D界面按钮跳转（最新）_敏捷的山峰的博客-CSDN博客_unity页面跳转</a></p><h1 id="地形"><a href="#地形" class="headerlink" title="地形"></a>地形</h1><p>Resolution属性面板的参数列表</p><table><thead><tr><th>参数</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>Terrain Width</td><td>地形宽度</td><td>全局地形总宽度</td></tr><tr><td>Terrain Length</td><td>地形长度</td><td>全局地形总长度</td></tr><tr><td>Terrain Height</td><td>地形高度</td><td>全局地形允许的最大高度</td></tr><tr><td>Heightmap Resolution</td><td>高度分辨率</td><td>全局地形生成的高度图的分辨率</td></tr><tr><td>Detail Resolution</td><td>细节分辨率</td><td>全局地形生成的细节贴图的分辨率</td></tr><tr><td>Detail REsolution Per Patch</td><td>每个地形快的网格分辨率</td><td>全局地形中每个地形快的网格分辨率</td></tr><tr><td>Control Texture Resolution</td><td>控制纹理的分辨率</td><td>把地形贴图绘制地形上时所使用的贴图分辨率</td></tr><tr><td>Base Texture Resolution</td><td>基础纹理的分辨率</td><td>远处地形贴图的分辨率</td></tr></tbody></table><p>编辑地形有两种方法</p><p>通过地形编辑器编辑地形</p><p>通过导入一幅预先渲染好的灰度图来快速地为地形建模</p><h1 id="物理引擎"><a href="#物理引擎" class="headerlink" title="物理引擎"></a>物理引擎</h1><h2 id="刚体-Rigidbody"><a href="#刚体-Rigidbody" class="headerlink" title="刚体 Rigidbody"></a>刚体 Rigidbody</h2><p>通过参数来控制物体的各种物理状态，可控制的参数有</p><p><strong>Mass</strong>质量；<strong>Drag</strong>阻力；<strong>Angular Drag</strong>角阻力；<strong>Use Gravity</strong>是否使用重力；<strong>Is Kinematic</strong> 是否受物理影响；</p><p><strong>interpolate</strong> 插值;<strong>Collision Detection</strong>碰撞检测；<strong>Constraints</strong>约束</p><p><img src="/2022/03/05/unity3d-kai-fa/1649562003760.png" alt="截图"></p><h2 id="碰撞体Collider"><a href="#碰撞体Collider" class="headerlink" title="碰撞体Collider"></a>碰撞体Collider</h2><h2 id="触发器Trigger"><a href="#触发器Trigger" class="headerlink" title="触发器Trigger"></a>触发器Trigger</h2><h2 id="力Constant-Force"><a href="#力Constant-Force" class="headerlink" title="力Constant Force"></a>力Constant Force</h2><h2 id="角色控制器Charactor-Controller"><a href="#角色控制器Charactor-Controller" class="headerlink" title="角色控制器Charactor Controller"></a>角色控制器Charactor Controller</h2><table><thead><tr><th>参数</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>Slope Limit</td><td>坡度限制</td><td>控制对象的爬坡的高度</td></tr><tr><td>Step Offset</td><td>台阶高度</td><td>可以迈上的最大台阶高度</td></tr><tr><td>Skin Width</td><td>皮肤厚度</td><td>两个碰撞体碰撞后相互渗透的程度</td></tr><tr><td>Min Move Distance</td><td>最小移动距离</td><td>最小移动值</td></tr><tr><td>Center</td><td>中心</td><td>在世界坐标中的位置</td></tr><tr><td>Radius</td><td>半径</td><td>设置碰撞体的碰撞半径</td></tr><tr><td>Height</td><td>高度</td><td>设置碰撞体的碰撞高度</td></tr></tbody></table><h1 id="代码过程中的问题"><a href="#代码过程中的问题" class="headerlink" title="代码过程中的问题"></a>代码过程中的问题</h1><p>在之前会又代码给mainCamera然后没有办法给那个脚本添加public定义的参数，比如立方体呀什么的</p><p><strong>解决：先将脚本分配给对应的物体，然后在物体之下的inspector中找到该脚本在将物体拖拽过来就可以添加public定义的参数</strong></p><p><strong>在脚本放置到物体上的时候不要着急，要等他解析一会，出来定义的public参数之后才能运行</strong></p><p>Rect(左边框距离，上边框距离，宽，高)</p><h2 id="将图片转化成精灵"><a href="#将图片转化成精灵" class="headerlink" title="将图片转化成精灵"></a>将图片转化成精灵</h2><p>在图片的Inspector中的Texture Type改成 Sprite(2D and UI)然后点击下面的apply就完成了转化</p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p> <a href="https://assetstore.unity.com/packages/essentials/asset-packs/standard-assets-for-unity-2018-4-32351">Standard Assets (for Unity 2018.4) | 资源包 | Unity Asset Store</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity3d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-web</title>
      <link href="2022/02/06/spring-web-xue-xi/"/>
      <url>2022/02/06/spring-web-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="项目创建过程"><a href="#项目创建过程" class="headerlink" title="项目创建过程"></a>项目创建过程</h1><p>添加依赖关系</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>${project.groupId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WEB-INF/web.xml针对于spring环境的加载</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath*:database-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>database webapp创建过程是一样的，按照原来的步骤就可以完成</p><p><img src="/2022/02/06/spring-web-xue-xi/image-20220215171219693.png" alt="在项目结构中添加web"></p><p>把上下两个的路径都添加成…webapp\src\main\web…</p><p><img src="/2022/02/06/spring-web-xue-xi/image-20220215172030131.png" alt="添加运行调试配置"></p><p>把端口改成9000防止端口占用，另外添加部署记得要和项目文件同名  </p><p>创建index.html创建初始页面</p><p><img src="/2022/02/06/spring-web-xue-xi/image-20220215172502427.png" alt="添加至web的网页环境"></p><h1 id="整合ssm"><a href="#整合ssm" class="headerlink" title="整合ssm"></a>整合ssm</h1><p>添加依赖jstl</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml中添加配置DispathcherServlet</p><p>所有请求都被DispathcherServlet所拦截</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WEB-INF下创建和刚才DispathcherServlet中servlet-name同名的spring配置文件findlove-servlet.xml</p><p>在项目结构下查看是否自动检测到了配置文件</p><p><img src="/2022/02/06/spring-web-xue-xi/image-20220218100539764.png" alt="项目结构截图"></p><h2 id="创建并配置Controller"><a href="#创建并配置Controller" class="headerlink" title="创建并配置Controller"></a>创建并配置Controller</h2><p>在main/java下创建文件包com.findlove.<a href="http://www.controller文件包/">www.Controller文件包</a></p><p>写入跳转文件bookController</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">package com.spring.www.Controler;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.xml.ws.RequestWrapper;@Controllerpublic class bookController {    @RequestMapping (value="/index.html")    public String index(){        return "index";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建Java文件controller bookConntroller 在文件中进行注解@Controller 并在刚才创建的findlove-servlet.xml文件中添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.www<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以扫描到刚才创建的Controller类</p><h2 id="添加视图解析器"><a href="#添加视图解析器" class="headerlink" title="添加视图解析器"></a>添加视图解析器</h2><p>spring-servlet.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>viewClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/jsp/<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="我这个自己不知道怎么设置的他说的不用改啥地址也都能显示"><a href="#我这个自己不知道怎么设置的他说的不用改啥地址也都能显示" class="headerlink" title="我这个自己不知道怎么设置的他说的不用改啥地址也都能显示"></a><strong>我这个自己不知道怎么设置的他说的不用改啥地址也都能显示</strong></h2><h2 id="中间的一些jsp-路径，可以通过bookController进行设置"><a href="#中间的一些jsp-路径，可以通过bookController进行设置" class="headerlink" title="中间的一些jsp 路径，可以通过bookController进行设置"></a>中间的一些jsp 路径，可以通过bookController进行设置</h2><p>bookController不设置</p><p>jsp文件中的路径要写成标准地址</p><p><img src="/2022/02/06/spring-web-xue-xi/image-20220219140614228.png" alt="绝对地址"></p><p>但是如果设置了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>www<span class="token punctuation">.</span></span><span class="token class-name">Controler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>ws<span class="token punctuation">.</span></span><span class="token class-name">RequestWrapper</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> bookController <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span> <span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"booklist.html"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">booklist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"booklist"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"newBook.html"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token class-name">String</span> <span class="token function">newBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"newBook"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jsp文件中就可以设置成设置成</p><p><img src="/2022/02/06/spring-web-xue-xi/image-20220219140756460.png" alt="相对的地址"></p><h2 id="一些图片以及一些cssjs样式静态资源"><a href="#一些图片以及一些cssjs样式静态资源" class="headerlink" title="一些图片以及一些cssjs样式静态资源"></a>一些图片以及一些cssjs样式静态资源</h2><p>可以通过tomcat默认的default的servlet进行处理，不通过.DispatcherServlet进行处理</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不通过DispatcherServlet进行处理的话他图片的路径就要进行修改</p><p><strong>我的是在不添加那个defaultServlet前面的也能显示，添加defaultServlet之后两种方式都能显示图片</strong></p><pre class="line-numbers language-path" data-language="path"><code class="language-path">..、img/java.png要改成img/java.png例：&lt;div class="item"&gt;&lt;img src="img/javaee.png" alt="Second slide"&gt;&lt;/div&gt;&lt;div class="item"&gt;&lt;img src="../img/spring.png" alt="Third slide"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结：分三步走"><a href="#总结：分三步走" class="headerlink" title="总结：分三步走"></a>总结：分三步走</h2><p>Dispatcher拦截所有访问</p><p>静态资源特殊对待</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">通过<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c</span> <span class="token attr-name">url</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>写链接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据库中文乱码问题"><a href="#数据库中文乱码问题" class="headerlink" title="数据库中文乱码问题"></a>数据库中文乱码问题</h2><p>我的是在jdea中建立的数据库表，中间的中文并没有中文乱码，</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1、mysql-properties标红"><a href="#1、mysql-properties标红" class="headerlink" title="1、mysql.properties标红"></a>1、mysql.properties标红</h2><p><img src="/2022/02/06/spring-web-xue-xi/image-20220215180454612.png" alt="标红"></p><p>在项目结构中将resource也设置成源目录即可解决问题</p><p><img src="/2022/02/06/spring-web-xue-xi/image-20220228112711734.png" alt="项目结构截图"></p><h2 id="2、在表单收集过程中出现了中文乱码，不管是用post或者get方法都是中文乱码"><a href="#2、在表单收集过程中出现了中文乱码，不管是用post或者get方法都是中文乱码" class="headerlink" title="2、在表单收集过程中出现了中文乱码，不管是用post或者get方法都是中文乱码"></a>2、在表单收集过程中出现了中文乱码，不管是用post或者get方法都是中文乱码</h2><p><a href="https://blog.csdn.net/fuck487/article/details/79665374">get乱码解决办法</a></p><p>post乱码解决办法</p><p>添加一个过滤器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--加上一个过滤器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就解决了</p><h2 id="3、报错"><a href="#3、报错" class="headerlink" title="3、报错"></a>3、报错</h2><p><img src="/2022/02/06/spring-web-xue-xi/image-20220220110038243.png" alt="错误"></p><p>解决办法，在web.xml下所有的自己添加的配置之前添加就可以解决，问题spring的web包和webmvc包冲突，webmvc中包含了这个web的jar。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>absolute-ordering</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="显示数据库语句"><a href="#显示数据库语句" class="headerlink" title="显示数据库语句"></a>显示数据库语句</h1><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 打印查询语句 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在database-content.xml中添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置Mybatis--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--别名--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.lyz.com<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log4j.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置映射文件的路径--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath*:www/lyz/com/DAO/*Mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="一些资源ss"><a href="#一些资源ss" class="headerlink" title="一些资源ss"></a>一些资源ss</h1><p><a href="https://blog.csdn.net/yanhanhui1/article/details/114180010">Spring Boot实现文件上传</a></p><p><a href="https://blog.csdn.net/xingchenyv/article/details/122797602">springboot实现分页功能</a></p><p><a href="https://blog.csdn.net/qq_38939822/article/details/121677188">【Spring Boot学习】08、实现分页功能</a></p><p>在添加网上的登录页面之后会出现css模式加载不上，使用绝对地址</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/css/login.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <a href="https://blog.csdn.net/m0_37648645/article/details/98876693">(6条消息) 用git上传项目时，如果origin remote写错了怎么移除_adi1997的博客-CSDN博客</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> javaee学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring数据库连接</title>
      <link href="2022/01/27/spring-shu-ju-ku-lian-jie/"/>
      <url>2022/01/27/spring-shu-ju-ku-lian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库连接操作"><a href="#数据库连接操作" class="headerlink" title="数据库连接操作"></a>数据库连接操作</h1><p>创建好项目之后进行bean测试之后</p><p>再database_context.xml添加数据库依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/27/spring-shu-ju-ku-lian-jie/image-20220130160009477.png" alt="添加一个数据源"></p><p><img src="/2022/01/27/spring-shu-ju-ku-lian-jie/image-20220130193653378.png" alt="总视图"></p><hr><h1 id="以下是代码部分"><a href="#以下是代码部分" class="headerlink" title="以下是代码部分"></a>以下是代码部分</h1><p>**源文件链接：<a href="https://pan.baidu.com/s/1J20VDo06ZFj8kWnUzjg2yA">传送门</a><br>提取码：qwer **</p><h2 id="SaleService"><a href="#SaleService" class="headerlink" title="SaleService"></a>SaleService</h2><pre class="line-numbers language-javaee" data-language="javaee"><code class="language-javaee">package com.spring.www.Business;import com.spring.www.DAO.BookDAO;import com.spring.www.Model.Book;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class SaleService {    BookDAO bookDAO;    @Autowired    @Qualifier(value = "bookDaoImpl")    public void setBookDAO(BookDAO bookDAO) {        this.bookDAO = bookDAO;    }    public void insert(Book book){        bookDAO.insertBook(book);    }    public void onSale(float sale){        List&lt;Book&gt; bookList=bookDAO.queryAll();        for (Book b :bookList){            b.setPrice(b.getPrice()*sale);            bookDAO.modifyBook(b);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AbstractBookDAO"><a href="#AbstractBookDAO" class="headerlink" title="AbstractBookDAO"></a>AbstractBookDAO</h2><pre class="line-numbers language-javaee" data-language="javaee"><code class="language-javaee">package com.spring.www.DAO;import com.spring.www.Model.Book;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.JdbcTemplate;import javax.annotation.Resource;import java.util.List;public abstract class AbstractBookDAO implements BookDAO{    List&lt;Book&gt; books;    JdbcTemplate jdbcTemplate;    @Resource(name="list")    public void setBooks(List&lt;Book&gt; books) {        this.books = books;    }    @Autowired    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;    }    @Override    public void insertBook(Book book) {    }    @Override    public void modifyBook(Book book) {    }    @Override    public List&lt;Book&gt; queryAll() {        return null;    }    @Override    public void insertAll(List&lt;Book&gt; bookList) {    }    @Override    public void deleteBook(Book book) {    }    @Override    public void deleteAll(List&lt;Book&gt; bookList) {    }    @Override    public void deleteById(String id) {    }    @Override    public Book queryOneBook(Book book) {        return null;    }    @Override    public Book queryOneBookById(String id) {        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BookDAO"><a href="#BookDAO" class="headerlink" title="BookDAO"></a>BookDAO</h2><pre class="line-numbers language-javaee" data-language="javaee"><code class="language-javaee">package com.spring.www.DAO;import com.spring.www.Model.Book;import java.util.List;public interface BookDAO {    //定义了在数据库上的所有增删改查操作    void insertBook(Book book);    void modifyBook(Book book);    List&lt;Book&gt; queryAll();    void insertAll(List&lt;Book&gt; bookList);    void deleteBook(Book book);    void deleteAll(List&lt;Book&gt; bookList);    void deleteById(String id);    Book queryOneBook(Book book);    Book queryOneBookById(String id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BookDAOImpl"><a href="#BookDAOImpl" class="headerlink" title="BookDAOImpl"></a>BookDAOImpl</h2><pre class="line-numbers language-javaee" data-language="javaee"><code class="language-javaee">package com.spring.www.DAO;import com.spring.www.Model.Book;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.RowMapper;import org.springframework.stereotype.Repository;import java.util.List;@Repository(value = "bookDaoImpl")public class BookDAOImpl extends AbstractBookDAO{    @Override    public void insertBook(Book book) {        super.insertBook(book);        String INSERT_BOOK="INSERT INTO book (isdn,name,price) VALUES(?,?,?)";//预处理方式        Object[] args={book.getIsdn(),book.getName(),book.getPrice()};        jdbcTemplate.update(INSERT_BOOK,args);    }    @Override    public void modifyBook(Book book) {        super.modifyBook(book);        String MODIFY_BOOK="UPDATE book SET name=?,price=? where isdn=?";        Object[] args={ book.getName(),book.getPrice(),book.getIsdn()};        jdbcTemplate.update(MODIFY_BOOK,args);    }    @Override    public List&lt;Book&gt; queryAll() {        String QUERY_ALL="SELECT * FROM `book`";        RowMapper&lt;Book&gt; rowMapper=new BeanPropertyRowMapper&lt;&gt;(Book.class);        books=jdbcTemplate.query(QUERY_ALL,rowMapper);        return books;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>www<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> isdn<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Book{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", isdn='"</span> <span class="token operator">+</span> isdn <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getIsdn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> isdn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIsdn</span><span class="token punctuation">(</span><span class="token class-name">String</span> isdn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isdn <span class="token operator">=</span> isdn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="database-context-xml"><a href="#database-context-xml" class="headerlink" title="database-context.xml"></a>database-context.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.www<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置集合对象--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--加载数据库访问配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span>          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${driverClassName}<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.url}<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.yourName}<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>dataSource-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="javaee-sql"><a href="#javaee-sql" class="headerlink" title="javaee.sql"></a>javaee.sql</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">creat <span class="token keyword">database</span> javaee<span class="token keyword">create</span> <span class="token keyword">table</span> book<span class="token punctuation">(</span>    isdn  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    price <span class="token keyword">float</span>        <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql-properties"><a href="#mysql-properties" class="headerlink" title="mysql.properties"></a>mysql.properties</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">mysql.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/javaee?useSSL=false</span><span class="token attr-name">mysql.yourName</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">mysql.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Beantest"><a href="#Beantest" class="headerlink" title="Beantest"></a>Beantest</h2><pre class="line-numbers language-javaee" data-language="javaee"><code class="language-javaee">import com.spring.www.Business.SaleService;import com.spring.www.Model.Book;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;import org.testng.annotations.Test;import static org.testng.AssertJUnit.assertTrue;@ContextConfiguration("classpath*:database-context.xml")public class BeanTest extends AbstractTestNGSpringContextTests {    @Autowired    Book book;    @Autowired    SaleService service;    @Test    public void beantest(){        book.setName("java ee");        assertTrue(book!=null);    }    @Test    public void insert(){        book.setIsdn("890");        book.setName("123");        book.setPrice((float) 12.23);        service.insert(book);    }    @Test    public void onsale(){        service.onSale(0.5f);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/27/spring-shu-ju-ku-lian-jie/image-20220205202901805.png" alt="运行结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> javaee学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发</title>
      <link href="2022/01/24/android-kai-fa-1/"/>
      <url>2022/01/24/android-kai-fa-1/</url>
      
        <content type="html"><![CDATA[<h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><h1 id="项目文件的功能"><a href="#项目文件的功能" class="headerlink" title="项目文件的功能"></a>项目文件的功能</h1><p>app/src/main/java java代码</p><p>app/src/main/res 放一些资源文件</p><p>app/src/main/res/drawable 放置一些图片或者一些自定义的xml文件</p><p>app/src/main/res/layout 主要放置一些布局文件</p><p>app/src/main/res/mipmap-hdpi启动的图片或者logo放置在这个文件夹里</p><p>app/src/main/res/mipmap-mdpi</p><p>app/src/main/res/mipmap-xhdpi</p><p>app/src/main/res/mipmap-xxhdpi</p><p>app/src/main/res/mipmap-xxxhdpi</p><p>app/src/main/res/values 使用到的颜色呀文字呀</p><p>app/src/main/AndriodMainfext.xml 清单文件 我们应用中所使用到的所有activity都要在这里声明和注册</p><h1 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h1><h2 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局 LinearLayout"></a>线性布局 LinearLayout</h2><p>最常用的属性</p><p>android:id   相当于一个表示                                   android:layout_margin  外边距</p><p>android:layout_width     宽度                                android:layout_padding  内边距</p><p>android:layout_height     高度                               android:orientation   方向只有在特定的布局才会有</p><p>android:background   背景                        android:gravity居中 </p><hr><p>方向： vertical纵向； horizontal横向</p><p>android:layout_weight这个所占的比重</p><p>activity_main.xml</p><p>记得改前面的&lt;&lt;LinearLayout xmlns…..</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>              <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/accessibility_custom_action_11<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>paddingBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0033<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0066ff<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>              <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00FF7F<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0066ff<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>              <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00FF7F<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/24/android-kai-fa-1/image-20220222165345832.png" alt="效果"></p><h2 id="相对布局RalativeLayout"><a href="#相对布局RalativeLayout" class="headerlink" title="相对布局RalativeLayout"></a>相对布局RalativeLayout</h2><p>除了线性布局几种还有这些特有的</p><p>android:layout_toLeftOf 谁的左边                    android:layout_below在谁的下边</p><p>android:layout_toRightOf在谁的右边</p><p>android:layout_alignBottom跟谁底部对齐</p><p>android:layout_alignParentBottom跟父空间底部对齐</p><p>记得改前面的&lt;&lt;RelativeLayout xmlns…</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/view_1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentEnd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/view_2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff0000<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/view_3<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_toRightOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/view_2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/view_4<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/view_2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00ff00<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/view_4<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#40E0D0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#4169E1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/view_11<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff9900<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/view_12<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff9900<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_toRightOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/view_11<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/24/android-kai-fa-1/image-20220222171954962.png" alt="效果"></p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Textview"><a href="#Textview" class="headerlink" title="Textview"></a>Textview</h2><p><strong>文字大小，颜色</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">android:textColor="#000000"android:textSize="30sp" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>显示不下的问题</strong></p><p>使用android:ellipsize=”end”显示不下会在后边显示…</p><p><strong>文字+icon</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_3<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>drawableRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_arrow_off<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>drawablePadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>筛选<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>中划线，下划线</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mTv4<span class="token punctuation">.</span><span class="token function">getPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token class-name">Paint</span><span class="token punctuation">.</span>STRIKE_THRU_TEXT_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//中划线</span>mTv4<span class="token punctuation">.</span><span class="token function">getPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去掉锯齿</span>mTv5<span class="token punctuation">.</span><span class="token function">getPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token class-name">Paint</span><span class="token punctuation">.</span>UNDERLINE_TEXT_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下划线</span>mTv6<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_6<span class="token punctuation">)</span><span class="token punctuation">;</span>mTv6<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Html</span><span class="token punctuation">.</span><span class="token function">fromHtml</span><span class="token punctuation">(</span><span class="token string">"&lt;u&gt;userlyz&lt;/u&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下划线</span>xml    <span class="token operator">&lt;</span><span class="token class-name">TextView</span>        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_6"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">""</span>        android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"#000000"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"30sp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"10dp"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>跑马灯</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;TextView    android:id="@+id/tv_7"    android:layout_width="wrap_content"    android:layout_height="wrap_content"    android:text="userlyzuserlyzuserlyzuserlyzuserlyzuserlyz"    android:textColor="#000000"    android:textSize="30sp"    android:layout_marginTop="10dp"    android:singleLine="true"//单行显示    android:ellipsize="marquee"//设置跑马灯样式    android:marqueeRepeatLimit="marquee_forever"//跑马灯运行时间    android:focusable="true"    android:focusableInTouchMode="true"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p><strong>文字大小，颜色</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/btn_1<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ffff00<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮1<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff0000<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/24/android-kai-fa-1/image-20220222203857403.png" alt="效果"></p><p><strong>自定义背景形状</strong></p><p>圆角</p><p>drawable/bg_button2.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span>        <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff9900<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span>        <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>layout/activity_button.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/btn_2<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/btn_1<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_button2<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮2<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff0000<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/24/android-kai-fa-1/image-20220223102753881.png" alt="圆角"></p><p><strong>自定义按压效果</strong></p><p>bg_button4.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selector</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>state_pressed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ffff00<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span> <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>state_pressed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span> <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selector</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>activity_button.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/btn_4<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/btn_3<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_button4<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮4触摸效果<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff99<span class="token punctuation">"</span></span>    <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>点击事件 两种方法</strong></p><p>点击事件基本适用于所有的组件</p><p>在activity_button.xml中添加一行onclick</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">android:onClick="showToast"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在ButtonActivity中编写showToast方法</p><p>遇到的问题，没有加参数，导致识别不到showToast方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"我被点击了"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/24/android-kai-fa-1/image-20220223135957607.png" alt="点击事件效果"></p><p>上面这种是一种不常用的方法</p><p>常用的方法还还是</p><p>ButtonActivity</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Button</span> mbut3<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_button<span class="token punctuation">)</span><span class="token punctuation">;</span>    mbut3<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_3<span class="token punctuation">)</span><span class="token punctuation">;</span>    mbut3<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">ButtonActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"button3我被点击了"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/24/android-kai-fa-1/image-20220223200159546.png" alt="Button3被点击"></p><p><img src="/2022/01/24/android-kai-fa-1/image-20220223200128596.png" alt="TextView被点击效果"></p><h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><p>可以输入的一个控件</p><p><strong>常用属性</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.EditTextActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/et_1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>maxLines</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#EEEE11<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_username<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>drawableStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/username<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>drawablePadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/et_2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/et_1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_username<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>maxLines</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textPassword<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#09F768<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>drawableLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/password<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>drawablePadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/et_3<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#3D11EE<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/et_2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>手机号<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_username<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Edit_but<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/et_3<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_button_edit_l<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>监听事件</strong></p><p>主要是对于editText内容的监听</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EditTextActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Button</span> mbut4<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">EditText</span> mEdirUsername<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_edit_text<span class="token punctuation">)</span><span class="token punctuation">;</span>        mbut4<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>Edit_but<span class="token punctuation">)</span><span class="token punctuation">;</span>        mbut4<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">EditTextActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"登陆成功！"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mEdirUsername<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>et_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        mEdirUsername<span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeTextChanged</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTextChanged</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"edittext"</span><span class="token punctuation">,</span>charSequence<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出当前内容</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTextChanged</span><span class="token punctuation">(</span><span class="token class-name">Editable</span> editable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>制作登录界面</strong></p><p><img src="/2022/01/24/android-kai-fa-1/image-20220224215236377.png" alt="登录界面"></p><h2 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h2><p><strong>自定义样式</strong></p><p>上为默认样式下面是自定义样式</p><p><img src="/2022/01/24/android-kai-fa-1/image-20220225193951031.png" alt="运行结果"></p><p>android:button=”@null”是消除前面的圆圈，但是还是与选中效果的</p><p>android:checked=”true”设置默认选择，前提是要设置好组内的所有的RadioButton的id</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.RadioButtonActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioGroup</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/rg_1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/rb_1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00FF00<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/rb_2<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RadioGroup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioGroup</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/rg_2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/rg_1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/rb_3<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>button</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_radiobutton<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/rb_4<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>button</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_radiobutton<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RadioGroup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>监听事件</strong></p><p>RadioButtonActivity</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadioButtonActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RadioGroup</span> mRg1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_radio_button<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRg1<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>rg_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRg1<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RadioGroup<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">RadioGroup</span> radioGroup<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">RadioButton</span> radioButton<span class="token operator">=</span>radioGroup<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">RadioButtonActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> radioButton<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复选框CheckBox"><a href="#复选框CheckBox" class="headerlink" title="复选框CheckBox"></a>复选框CheckBox</h2><p>经典</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/cb_1<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/tv_title<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25sp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义样式</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/cb_5<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编程<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>button</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bg_checkbox<span class="token punctuation">"</span></span>    <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bg_checkbox</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selector</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>state_checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/unchosed<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>state_checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/chosed<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selector</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>监听事件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mcb5<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>cb_5<span class="token punctuation">)</span><span class="token punctuation">;</span>mcb5<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> compoundButton<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">CheckBoxActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token string">"5选中"</span><span class="token operator">:</span><span class="token string">"5未选中"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><p><strong>Button的其他衍生控件：ToggleButton,Switch</strong></p><p><strong>常用属性</strong></p><p><em>android:src 图片控件中的图片来源</em></p><p><em>android:scaleType图片的抻拉模式，图片有可能会被拉伸</em></p><p>fitXY:撑满控件，宽高比可能发生变化</p><p>fitCenter：保持宽高比缩放，直至能够完全显示</p><p>centerCrop:保持宽高比，直至完全覆盖控件，裁剪显示</p><p><strong>加载网络图片</strong></p><p>在bulid.gradle添加</p><pre class="line-numbers language-glide" data-language="glide"><code class="language-glide">repositories {    google()    mavenCentral()}dependencies {    implementation 'com.github.bumptech.glide:glide:4.13.0'    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.0'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样会报错，解决方法在下面问题中有解</p><p>在ImageViewActivity中</p><p>load(图片的网路地址).into(插入的位置)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mIv3<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>imv_3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>mIv3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意要添加INTERNET权限</strong></p><h2 id="列表视图ListView"><a href="#列表视图ListView" class="headerlink" title="列表视图ListView"></a>列表视图ListView</h2><p>常用属性</p><p>listSelector设置点击时候的样式</p><p>divider用于设置两个listview中间的条的样式</p><p>dividerHeight用于设置中间条的样式</p><p>Adapter接口  设置一个适配器 用于设置每一条目的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MylistAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> mcontext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LayoutInflater</span> mlayoutInflater<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MylistAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mcontext<span class="token operator">=</span>context<span class="token punctuation">;</span>        mlayoutInflater<span class="token operator">=</span><span class="token class-name">LayoutInflater</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数据的长度</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">ImageView</span> imageView<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TextView</span> tv_title<span class="token punctuation">,</span>tv_time<span class="token punctuation">,</span>tv_content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> viewGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义每一行长得什么样子</span>        <span class="token class-name">ViewHolder</span> viewHolder<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>view<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            view<span class="token operator">=</span>mlayoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_list_item<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            viewHolder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            viewHolder<span class="token punctuation">.</span>imageView<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span>            viewHolder<span class="token punctuation">.</span>tv_title<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>litem_title<span class="token punctuation">)</span><span class="token punctuation">;</span>            viewHolder<span class="token punctuation">.</span>tv_time<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>litem_time<span class="token punctuation">)</span><span class="token punctuation">;</span>            viewHolder<span class="token punctuation">.</span>tv_content<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>litem_content<span class="token punctuation">)</span><span class="token punctuation">;</span>            view<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>viewHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            viewHolder<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ViewHolder</span><span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//给控件赋值</span>        viewHolder<span class="token punctuation">.</span>tv_title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"这是标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewHolder<span class="token punctuation">.</span>tv_time<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"2088-08-80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewHolder<span class="token punctuation">.</span>tv_content<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"这是新换的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>mcontext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>viewHolder<span class="token punctuation">.</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Demo演示</p><p>点击或者长按会有响应事件</p><p><img src="/2022/01/24/android-kai-fa-1/image-20220227000450025.png" alt="效果"></p><h2 id="网格视图GridView"><a href="#网格视图GridView" class="headerlink" title="网格视图GridView"></a>网格视图GridView</h2><p> android:numColumns=”3”每行的item数<br> android:horizontalSpacing=”10dp”列边距<br> android:verticalSpacing=”15dp”行边距</p><p>大致和上面的ListView差不多，都是要设置Adapter</p><p>结果也是差不多的</p><p><img src="/2022/01/24/android-kai-fa-1/image-20220227181741415.png" alt="运行结果"></p><h2 id="滚动视图ScrollView"><a href="#滚动视图ScrollView" class="headerlink" title="滚动视图ScrollView"></a>滚动视图ScrollView</h2><p><strong>垂直滚动ScrollView</strong></p><p><strong>水平滚动HorizontalScrollView</strong></p><p>控件中的直接子元素只能有一个</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;ScrollView xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:app="http://schemas.android.com/apk/res-auto"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:orientation="vertical"    tools:context=".MainActivity"&gt;    &lt;LinearLayout        android:layout_width="match_parent"        android:layout_height="match_parent"        android:orientation="vertical"&gt;        &lt;HorizontalScrollView            android:layout_width="wrap_content"            android:layout_height="wrap_content"&gt;            &lt;LinearLayout                android:layout_width="wrap_content"                android:layout_height="wrap_content"                android:orientation="horizontal"&gt;                &lt;Button                    android:layout_width="200dp"                    android:layout_height="300dp"                    android:text="Test"                    android:textAllCaps="false"/&gt;                &lt;Button                    android:layout_width="200dp"                    android:layout_height="300dp"                    android:text="Test"                    android:textAllCaps="false"/&gt;                &lt;Button                    android:layout_width="200dp"                    android:layout_height="300dp"                    android:text="Test"                    android:textAllCaps="false"/&gt;            &lt;/LinearLayout&gt;        &lt;/HorizontalScrollView&gt;        &lt;Button            android:layout_width="match_parent"            android:layout_height="wrap_content"            android:text="Test"            android:textAllCaps="false"            android:layout_marginTop="8000dp"/&gt;    &lt;/LinearLayout&gt;&lt;/ScrollView&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><p><strong>RecyclerView能够灵活实现大数据集的展示，视图的复用管理比ListView更好，能够显示列表、网格、瀑布流等形式，且不同的ViewHolder能够实现item的多元化的功能</strong></p><p><strong>但是使用起来会稍微麻烦一点，并且没有类似于ListView的onItemClickListener监听事件，需要开发者自己实现</strong></p><h3 id="LinearLayoutManager"><a href="#LinearLayoutManager" class="headerlink" title="LinearLayoutManager"></a>LinearLayoutManager</h3><p>两个item中间并没有下划线，要想有下滑线要自己进行绘制创建ItemDecoration,间隔颜色不设置就是背景颜色，也可以自己设置</p><p>LinearRecyclerViewActivity</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearRecyclerViewActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RecyclerView</span> mRvMain<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_linear_recycler_view<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRvMain<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>rv_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRvMain<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token class-name">LinearRecyclerViewActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mRvMain<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyDecoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mRvMain<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyLinearAdapter</span><span class="token punctuation">(</span><span class="token class-name">LinearRecyclerViewActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//创建下划线，这个并不只可以创建下划线</span>    <span class="token keyword">class</span> <span class="token class-name">MyDecoration</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ItemDecoration</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getItemOffsets</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Rect</span> outRect<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView</span> parent<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getItemOffsets</span><span class="token punctuation">(</span>outRect<span class="token punctuation">,</span>view<span class="token punctuation">,</span>parent<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimensionPixelOffset</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>dividerHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyLinearAdapter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLinearAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyLinearAdapter<span class="token punctuation">.</span>LinrearViewHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> mcontext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyLinearAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mcontext<span class="token operator">=</span>context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">MyLinearAdapter<span class="token punctuation">.</span>LinrearViewHolder</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinrearViewHolder</span><span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mcontext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_linear_item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">MyLinearAdapter<span class="token punctuation">.</span>LinrearViewHolder</span> holder<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置点击事件</span>         holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mcontext<span class="token punctuation">,</span> <span class="token string">"click...."</span><span class="token operator">+</span>position<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnLongClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mcontext<span class="token punctuation">,</span> <span class="token string">"longclick---"</span><span class="token operator">+</span>position<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">LinrearViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">TextView</span> textView<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">LinrearViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> itemView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span><span class="token punctuation">;</span>            textView<span class="token operator">=</span>itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>linear_tv_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>activity_linear_recycler_view.xml和layout_linear_item.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">activity_linear_recycler_view.xm   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.recyclerview.widget.RecyclerView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/rv_main<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/gray<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>layout_linear_item.xml    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/linear_tv_title<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/black<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25sp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击事件也可以这样做</p><p>LinearRecyclerView</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    mRvMain<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyLinearAdapter</span><span class="token punctuation">(</span><span class="token class-name">LinearRecyclerViewActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyLinearAdapter<span class="token punctuation">.</span>OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onclick</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">LinearRecyclerViewActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token operator">+</span>pos<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/24/android-kai-fa-1/image-20220301102117266.png" alt="最终效果"></p><h3 id="GridLayoutManager"><a href="#GridLayoutManager" class="headerlink" title="GridLayoutManager"></a>GridLayoutManager</h3><h3 id="StaggeredGridLayoutManager"><a href="#StaggeredGridLayoutManager" class="headerlink" title="StaggeredGridLayoutManager"></a>StaggeredGridLayoutManager</h3><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView]"></a>WebView]</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><a href="https://blog.csdn.net/pan2635376816/article/details/116789912"> 安卓应用布局Missing Constraints in ConstraintLayout错误解决方法</a></p><p><a href="https://blog.csdn.net/shangmingchao/article/details/70312824?utm_source=app&amp;app_version=5.0.0&amp;utm_source=app">安卓权限管理</a></p><h2 id="按照直接在bulid-gradle添加glide依赖时候报错解决办法"><a href="#按照直接在bulid-gradle添加glide依赖时候报错解决办法" class="headerlink" title="按照直接在bulid.gradle添加glide依赖时候报错解决办法"></a>按照直接在bulid.gradle添加glide依赖时候报错解决办法</h2><p><a href="https://blog.csdn.net/ancientear/article/details/81582708">添加glide</a></p><h2 id="自己创建activity-不使用一键创建的empty-activity"><a href="#自己创建activity-不使用一键创建的empty-activity" class="headerlink" title="自己创建activity,不使用一键创建的empty activity"></a>自己创建activity,不使用一键创建的empty activity</h2><p>创建在包目录下创建java class文件</p><p><strong>例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>first<span class="token punctuation">.</span></span><span class="token class-name">ListView</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">androidx<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>first<span class="token punctuation">.</span></span><span class="token class-name">R</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListViewActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_listview<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在layout下创建对应的布局文件</p><p><img src="/2022/01/24/android-kai-fa-1/image-20220226221346516.png" alt="创建布局文件"></p><p>在androidMainfest.xml下声明创建的acticity</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.ListView.ListViewActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Android-连接数据库"><a href="#Android-连接数据库" class="headerlink" title="Android 连接数据库"></a>Android 连接数据库</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span>  <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态加载类</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"127.0.0.1:3306/public"</span><span class="token punctuation">;</span>            <span class="token comment">//上面语句中 mysql://mysql.lianfangti.top为你的mysql服务器地址 3306为端口号   public是你的数据库名 根据你的实际情况更改</span>            <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用 DriverManger.getConnection链接数据库  第一个参数为连接地址 第二个参数为用户名 第三个参数为连接密码  返回一个Connection对象</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//判断 如果返回不为空则说明链接成功 如果为null的话则连接失败 请检查你的 mysql服务器地址是否可用 以及数据库名是否正确 并且 用户名跟密码是否正确</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"调试"</span><span class="token punctuation">,</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据返回的Connection对象创建 Statement对象</span>                <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span> <span class="token comment">//要执行的sql语句</span>                <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用executeQury方法执行sql语句 返回ResultSet对象 即查询的结果</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"调试"</span><span class="token punctuation">,</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> android开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis学习及上传git</title>
      <link href="2022/01/19/spring-mybatis-xue-xi/"/>
      <url>2022/01/19/spring-mybatis-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>database下的pom.xml添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>###########################################<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205210256960.png" alt="项目细览"></p><p>中间可能的错误</p><p>1、Mapper.xml文件并没有在target/classes/com/spring/www/DAO下</p><p>那就是在第一步中的**##后边的内容没有粘贴，导致找不到配置文件**</p><p>2、在Mapper.xml文件中mapper的namespace位置并没有到位</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">mapper namespace="com.spring.www.DAO.BookDAO"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、在有返回值的情况下要使用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205210230730.png" alt="运行结果"></p><h1 id="动态sql的生成"><a href="#动态sql的生成" class="headerlink" title="动态sql的生成"></a>动态sql的生成</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"queryAllByIf"</span> resultType<span class="token operator">=</span><span class="token string">"Book"</span> parameterType<span class="token operator">=</span><span class="token string">"String"</span><span class="token operator">&gt;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> <span class="token boolean">true</span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"Bname!=null and Bname!=''"</span><span class="token operator">&gt;</span>    <span class="token operator">and</span> Bname <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token comment">#{name},'%')</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果满足if条件那就将if后边sql语句进行拼接上去生成的sql语句是</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Preparing: <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> <span class="token boolean">true</span> <span class="token operator">and</span> Bname <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span>?<span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意where之后要要使用一个真值</strong></p><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>适用于传入的参数是一个列表，用于多个值的筛选</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"querryAllByforeach"</span> parameterType<span class="token operator">=</span><span class="token string">"List"</span> resultType<span class="token operator">=</span><span class="token string">"Book"</span><span class="token operator">&gt;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> Bisdn <span class="token operator">in</span>    <span class="token operator">&lt;</span>foreach item<span class="token operator">=</span><span class="token string">"item"</span> <span class="token keyword">index</span><span class="token operator">=</span><span class="token string">"index"</span> collection<span class="token operator">=</span><span class="token string">"list"</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">"("</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token keyword">close</span><span class="token operator">=</span><span class="token string">")"</span><span class="token operator">&gt;</span>     <span class="token comment">#{item}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拼接的sql语句是</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> Preparing: <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> Bisdn <span class="token operator">in</span> <span class="token punctuation">(</span> ? <span class="token punctuation">,</span> ? <span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> Parameters: <span class="token number">001</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">002</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="bind元素"><a href="#bind元素" class="headerlink" title="bind元素"></a>bind元素</h2><p>进行模糊查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"querryAllByBind"</span> parameterType<span class="token operator">=</span><span class="token string">"Book"</span> resultType<span class="token operator">=</span><span class="token string">"Book"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>bind name<span class="token operator">=</span><span class="token string">"paran_name"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"'%'+Bname+'%'"</span><span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> Bname <span class="token operator">like</span> <span class="token comment">#{paran_name}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拼接的sql语句是</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> Bname <span class="token operator">like</span> ?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="下面就是代码展示"><a href="#下面就是代码展示" class="headerlink" title="下面就是代码展示"></a>下面就是代码展示</h1><h2 id="完整展示"><a href="#完整展示" class="headerlink" title="完整展示"></a>完整展示</h2><p>链接：<a href="https://pan.baidu.com/s/1ReDMcpGz6WcMM0hq5nxK0Q">https://pan.baidu.com/s/1ReDMcpGz6WcMM0hq5nxK0Q</a><br>提取码：qwer </p><h1 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h1><p>database-context.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置事务管理器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>dataSource-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在SaleService中的OnSale前添加注释@Transactional</p><p>添加测试类</p><p>TransactionTest</p><pre class="line-numbers language-javaee" data-language="javaee"><code class="language-javaee">import com.spring.www.Business.SaleService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests;import org.testng.annotations.Test;@ContextConfiguration("classpath*:database-context.xml")public class TransactionTest extends AbstractTransactionalTestNGSpringContextTests {    @Autowired    SaleService service;    @Test    public void transTest(){        service.onSale(0.5f);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205212119834.png" alt="运行结果"></p><p>这样是不能改变数据库中的值的。这样主要是为了避免”脏数据“影响其他业务</p><p>要是就是想看运行的结果，那就要在测试类中添加@Rollback(value = false),这样就能直观的看到测试的结果了</p><h1 id="提交远端仓库"><a href="#提交远端仓库" class="headerlink" title="提交远端仓库"></a>提交远端仓库</h1><p>创建公开的代码仓库</p><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205214929722.png" alt="创建远端仓库"></p><p>添加git</p><p>在上传项目的问价夹下</p><pre class="line-numbers language-git" data-language="git"><div class="caption"><span>bush</span></div><code class="language-git">git init git remote add origin 远端仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205215126405.png" alt="添加git"></p><p>提交目录</p><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205215206221.png" alt="提交目录"></p><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205215628897.png" alt="推送"></p><p><img src="/2022/01/19/spring-mybatis-xue-xi/image-20220205215702055.png" alt="上传成功"></p>]]></content>
      
      
      
        <tags>
            
            <tag> javaee学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目创建</title>
      <link href="2022/01/17/spring-xiang-mu-chuang-jian/"/>
      <url>2022/01/17/spring-xiang-mu-chuang-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><p>啥都不选，直接next</p><p><img src="/2022/01/17/spring-xiang-mu-chuang-jian/image-20220117085716950.png" alt="image-20220117085716950"></p><p>输入文件名和组名继续点击next</p><p><img src="/2022/01/17/spring-xiang-mu-chuang-jian/image-20220117201927487.png" alt="image-20220117201927487"></p><p>创建文件成功</p><p>为主文件添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file.encoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file.encoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">&gt;</span></span>4.3.14.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.testng/testng --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.testng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>testng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.14.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.8.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>到这里基本上也算是创建完成了</strong></p><p>要创建多模块的程序，所以要删除src文件夹,在文件下创建module</p><p><img src="/2022/01/17/spring-xiang-mu-chuang-jian/image-20220117202127230.png" alt="image-20220117202127230"></p><p><img src="/2022/01/17/spring-xiang-mu-chuang-jian/image-20220128140943499.png" alt="image-20220128140943499"></p><p>Book类记得声明**@Component**，这样在database-context.xml才能访问的到</p><p>创建Spring模块的上下文配置文件</p><p><img src="/2022/01/17/spring-xiang-mu-chuang-jian/image-20220117202344735.png" alt="image-20220117202344735"></p><p>database-context.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span>  <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.www<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javaee学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算学习1</title>
      <link href="2022/01/14/yun-ji-suan-xue-xi-1/"/>
      <url>2022/01/14/yun-ji-suan-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="vlan技术"><a href="#vlan技术" class="headerlink" title="vlan技术"></a>vlan技术</h1><h2 id="PVID"><a href="#PVID" class="headerlink" title="PVID"></a>PVID</h2><p>有且只能有一个 PVID值，为不带tag的数据帧进入交换机时后打tag用的（交换机内部都是带tag的帧，交换机按照tag进行数据帧的正切转发）</p><p>access端口的PVID：该端口所属的vlanid，无法更改</p><p>trunk端口的PVID：默认是1，可以更改</p><p>hybird端口的PVID：默认是1，可以更改</p><h2 id="收发原则"><a href="#收发原则" class="headerlink" title="收发原则"></a>收发原则</h2><h3 id="access端口："><a href="#access端口：" class="headerlink" title="access端口："></a>access端口：</h3><p>1、pc端发送数据，不带标签（untagged帧）</p><p>2、从端口进入交换机，该端口将为该数据帧打上端口PVID的vlan标签进入交换机</p><p>3、交换机根据摸底mac地址寻找出接口，检查出接口，是否与数据所携带的vlan相同，通过该接口发送这个数据，剥离标签发送普通untagged的帧</p><h3 id="trunk端口"><a href="#trunk端口" class="headerlink" title="trunk端口"></a>trunk端口</h3><p>1、pc端发送数据，不带标签（untagged帧）</p><p>2、从端口进入交换机，该端口将为该数据帧打上端口PVID的vlan标签进入交换机</p><p>trunk端口发</p><p>比较帧的vlanid和端口pvid的关系</p><p>如果相同–剥离标签发出普通帧</p><p>如果不同–直接透传</p><p>trunk端口收</p><p>如果是不带tag的帧–打上端口的pvid的标签，进入交换机</p><p>如果是带tag表签的帧–检查tag的vlan是否再端口的允许列表中（端口所属的vlan列表）</p><p><strong>默认交换机上所有的端口都是hybird端口，根据需要设置端口类型</strong></p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220114112037095.png" alt="image-20220114112037095"></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">vlan batch 2 to 3或者vlan barch 2 3interface Ethernet0/0/1 port link-type access port default vlan 2#interface Ethernet0/0/2 port link-type trunk port trunk allow-pass vlan 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候是ping不通的</p><p>更改trunk的默认pvid</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">port trunk pvid vlan 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220114112244571.png" alt="image-20220114112244571"></p><p>![视频截图001](云计算学习1/屏幕截图 2022-01-17 110422.jpg)</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/IMG_2358.PNG" alt="IMG_2358"></p><p>![视频截图002](云计算学习1/屏幕截图 2022-01-12 115024.jpg)</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/%E5%AE%89%E5%85%A8%E7%BB%84.jpg" alt="视频截图003"></p><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/%E5%AD%98%E5%82%A8.jpg" alt="视频截图004"></p><p>##数据存储类型</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220117155355854.png" alt="视频截图005"></p><h2 id="创建并绑定磁盘"><a href="#创建并绑定磁盘" class="headerlink" title="创建并绑定磁盘"></a>创建并绑定磁盘</h2><p>1、类型 </p><p>普通：磁盘只能挂在给一个虚拟机使用</p><p>共享：可以挂载在多个虚拟机上使用，但是会损失很多高级特性</p><p>2、配置模式</p><p>普通：要多大，就得给多大    <strong>性能最优</strong></p><p>普通延迟置零：要多大，就得给多大，区别 <strong>性能次优</strong></p><p>精简：用多大给多大，真实没有分那么多  <strong>性能最差的</strong></p><p>3、磁盘模式</p><p>从属：独立持久：独立非持久：</p><p>从属和独立：从属的磁盘，虚拟机快照是会记录从属模式的磁盘</p><p>持久和非持久：持久虚拟机关机，数据不会丢失；</p><p>​                            非持久磁盘，虚拟机关机，数据会丢失</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220117162909615.png" alt="视频截图006"></p><h1 id="虚拟机的迁移（人为）"><a href="#虚拟机的迁移（人为）" class="headerlink" title="虚拟机的迁移（人为）"></a>虚拟机的迁移（人为）</h1><p>基于主机迁移–虚拟机所在主机改变，虚拟机磁盘不动</p><p>​        迁移要求源主机和目的主机必须cpu同构（一样）—-为了实现虚拟机异构场景也可以热迁移引出IMC机制–作用：实现异构cpu场景下虚拟机的热迁移</p><p>​        开启场景：虚拟机需要在主机间迁移，但是cpu异构</p><p>实验1（windows）</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220119201953203.png" alt="image-20220119201953203"></p><p>实验2（linux）<strong>命令可以tab键进行补全</strong></p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">TMOUT=0mkdir /etc/toolsmount /dev/sr0 /etc/tools/cd /etc/toolslscp vmtools-x.x.tar.bz2 /rootcd /root/lstar -xjvf vmtool-x.tar.bz2//报错没有bz2服务umount /etc/tools//安装bz2服务mount /dev/sr0 /mut/cd /mut/lscd /package/ls bz2*rpm -ivh 安装包.rmp//三个都安装安装啊之后再进行解压操作更改设置默认IPBOOTPROTO=staticONBOOT=yes//添加IPADD=10.0.90.59NETMASK=255.255.255.0GATEWAY=10.0.90.254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>l01:10.0.90.60</p><p>l02:10.0.90.61</p><p>l01和l02互通</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120201431341.png" alt="image-20220120201431341"></p><p>热添加cpu和内存</p><p>cpu</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">cat /proc/cpuinfo |grep name |cut -f2 -d:|uniq -clscpu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120203532589.png" alt="image-20220120203532589"></p><p>内存</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">cat /proc/meminfofree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120203935647.png" alt="image-20220120203935647"></p><p>网卡</p><p>添加网卡，还要进入之后拷贝一份eth0，命名为新网卡eth1</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120204749070.png" alt="image-20220120204749070"></p><p>将linux02的虚拟机网卡换到端口组为中继模式下的vlan16端口组，此时是ping不通的<strong>这时候就相当于图二那种情况，一端是access口另一端是trunk口,一般就是该trunk口的pvid但是虚拟交换机不支持更改pvid,所以就从pc端更改</strong></p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120205117719.png" alt="image-20220120205117719"></p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120205537305.png" alt="图二"></p><p>更改步骤</p><p>更改eth1</p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120205915434.png" alt="image-20220120205915434"></p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">ip link add link eth1 name eth1.16 type vlan id 16ip addr add 10.0.16.61/24 brd 10.0.16.255 dev eth1.16ip link set dev eth1.16 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120212146198.png" alt="image-20220120212146198"></p><p><img src="/2022/01/14/yun-ji-suan-xue-xi-1/image-20220120212333111.png" alt="用户权限管理"></p><p>NUMA和NODE </p>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架</title>
      <link href="2022/01/13/spring-kuang-jia/"/>
      <url>2022/01/13/spring-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>1、非侵入式开发</p><p>2、方便解耦，简化开发</p><p>3、支持AOP</p><p>4、支持声明式的事务处理</p><p>5、方便程序的测试</p><p>6、方便集成各种优秀框架</p><p>7、降低JAVAEE API的使用难度</p><h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p>采用了分层框架，一系列的功能要素被分成20个模块，又把这20个模块分成了四个部分：1、核心模块；2、数据处理；3、web；4、其他</p><h2 id="1、核心容器"><a href="#1、核心容器" class="headerlink" title="1、核心容器"></a>1、核心容器</h2><p>Beans：提供了BeanFactory,spring将管理对象成为Bean</p><p>Core：提供了Spring框架的基本组成部分，包括IoC和DI功能。IoC控制反转，DI</p><p>Context：建立再Core和Beans模块的基础上，他是访问，定义以及配置的任何对象的媒介</p><p>SpEL：Spring3.0之后新增的模块是运行时查询和操作对象的强大的表达式语言</p><h2 id="2、数据处理"><a href="#2、数据处理" class="headerlink" title="2、数据处理"></a>2、数据处理</h2><p>JDBC:提供了一个JDBC的一个抽象层的一个封装，大幅度减少再开发过程中对数据库操作的编码</p><p>ORM：对象关系映射：对流行的关系对象映射API，包括JPA，JDO和Hibernate提供了集成层支持</p><p>oxm: 提供了一个支持对象/XML映射层的抽象层实现，如JAXB，Castor,XMLBeans,JiBX和XStream</p><p>JMS: 指java信息床底服务，包含使用和产生信息的特性，自4.1版本之后支持域Spring-message模块集成</p><p>Transaction:支持对实现特殊接口以及所有POJO类的编程和声明式的事务管理</p><h2 id="3、Web"><a href="#3、Web" class="headerlink" title="3、Web"></a>3、Web</h2><p>Servlet:也称Spring-webmvc模块，包含Spring模型-视图-控制器（MVC)和REST Web Services实现的Web程序</p><p>Web:提供了基本的Web开发集成特性，如：文件上传，使用servlet监听器来初始化IoC容器以及Web应用上下文。</p><p>portlet：提供了再protlet环境中使用MVC实现，类似于Servlet模块的功能</p><h2 id="4、其他模块"><a href="#4、其他模块" class="headerlink" title="4、其他模块"></a>4、其他模块</h2><p>AOP:提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，降低耦合性</p><p>Aspects:提供了与AspectJ的集成功能，ApsectJ是一个功能强大且成熟的面向切面编程（AOP）框架</p><p>Test:提供了单元测试和集成测试的支持</p><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><p><a href="">Spring项目创建步骤及可能的错误</a></p><h1 id="狂神说java"><a href="#狂神说java" class="headerlink" title="狂神说java"></a>狂神说java</h1><h2 id="ioc本质"><a href="#ioc本质" class="headerlink" title="ioc本质"></a>ioc本质</h2><p>无论怎么增加接口事项类，主动权在用户，用户选择调用什么</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># userServiceImpl<span class="token keyword">public</span> <span class="token keyword">class</span> userServiceimpl <span class="token keyword">implements</span> userService<span class="token punctuation">{</span>    <span class="token keyword">private</span> userdao userdao<span class="token punctuation">;</span>    <span class="token comment">//利用set进行动态值的注入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserdao</span><span class="token punctuation">(</span>userdao userdao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userdao <span class="token operator">=</span> userdao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userdao<span class="token punctuation">.</span><span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># mytest<span class="token keyword">public</span> <span class="token keyword">class</span> mytest <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//用户实际调用的是业务层，dao层他们不接触</span>        userServiceimpl userServiceimpl<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">userServiceimpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceimpl<span class="token punctuation">.</span><span class="token function">setUserdao</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">usermysqlimpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceimpl<span class="token punctuation">.</span><span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2>]]></content>
      
      
      
        <tags>
            
            <tag> javaee学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BootStrap前端框架</title>
      <link href="2022/01/13/bootstrap-qian-duan-kuang-jia/"/>
      <url>2022/01/13/bootstrap-qian-duan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Bootstrap支持响应式开发，解决了移动互联网前端开发问题（为不同的分辨率打造不同的样式）</p><p>响应式布局：使得网站仅适用于一套样式，就可以在不同分辨率下展示出不同的舒适效果，大大降低了网站开发维护成本，并且能带给用户更好的体验性</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>css</strong></p><p>bootstrop.css完整版应用于源码学习，不适用于网络间传递</p><p>bootstrop.min.css压缩版适用于网络间的传递，将完整版大量的空格和回车换行删除掉，节约了大量的空间，没有了空格和回车不利于阅读</p><p><strong>js</strong></p><p>特效的</p><p>bootstrop.js</p><p><strong>简介模板</strong></p><p><a href="https://v3.bootcss.com/getting-started/#template">起步 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)</a>入门\基本模板</p><p>依赖的样式可以使用本地地址也可以使用网络地址</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--html页面使用的是中文简体--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--设置html页面的字符集为 utf-8--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--使用ie最新的渲染模式，展示页面，知道即可--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    viewport :视口，即浏览器网页上的可视区域    视口作用：用于移动设备，将大型界面进行比例缩放显示        以下的设置旨在移动设备上生效    width=device-width 设置视口宽度   device-width设备的宽度     initial-scale=1 初始化的缩放设置  移动设备打开网页是，缩放级别 1就是100%正常         设置区间就是1~5 1就是100% 5就是500%        minimum-scale=1 最小缩放级别    maximum-scale=1 最大缩放的级别    user-scaleble=no移动设备上，禁止缩放；如果设置了这个，则minimum-scale和maximum-scale都无效    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--以下三个是Botstrap依赖的样式和脚本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>          你好，世界！      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h1><p>Bootstrap必须需要至少一个布局容器，才能为页面进行封装和方便的样式控制。相当于一个画板。</p><p>全局css布局模板//概览//布局容器</p><p>任意元素使用了布局容器的样式，都会成为一个布局容器，建议使用div作为布局容器</p><p>.container 类用于固定宽度并支持响应式布局容器</p><p>.container-fluid类用于100%宽度，占据全部视口的容器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--布局容器:container   特点：居中，两端留白--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--布局容器2：container-fluid   特点：占据了视口100%的视口宽度--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h1><p>提供了一套专门用于响应式开发布局的栅格系统；栅格系统将一行分为12列，通过设定元素占用的列数来，布局元素在页面上的展示位置</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!doctype html&gt;&lt;html lang="zh-CN"&gt;  &lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;title&gt;Bootstrap 101 Template&lt;/title&gt;    &lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous"&gt;    &lt;script src="https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js" integrity="sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ" crossorigin="anonymous"&gt;&lt;/script&gt;    &lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js" integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd" crossorigin="anonymous"&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;&lt;!--定义一个布局容器--&gt;&lt;div class="container"&gt;&lt;!--在布局容器中，定义一行--&gt;&lt;div class="row"&gt;&lt;!--在行上，定义列,栅格参数 "col-屏幕尺寸-占用列数"--&gt;&lt;div class="col-lg-2" style="border: 1px solid red;"&gt;11111111111111111&lt;/div&gt;&lt;div class="col-lg-4" style="border: 1px solid red;"&gt;22222222222222222&lt;/div&gt;&lt;div class="col-lg-6" style="border: 1px solid red;"&gt;33333333333333333&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="屏幕尺寸设置及注意事项"><a href="#屏幕尺寸设置及注意事项" class="headerlink" title="屏幕尺寸设置及注意事项"></a>屏幕尺寸设置及注意事项</h2><h2 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h2><h1 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h1><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><h1 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h1><h1 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h1><h1 id="排版方式"><a href="#排版方式" class="headerlink" title="排版方式"></a>排版方式</h1><h1 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h1><h1 id="分页条"><a href="#分页条" class="headerlink" title="分页条"></a>分页条</h1><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1>]]></content>
      
      
      
        <tags>
            
            <tag> javaee学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy全站爬取</title>
      <link href="2021/12/30/scrapy-quan-zhan-pa-qu/"/>
      <url>2021/12/30/scrapy-quan-zhan-pa-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><pre class="line-numbers language-note" data-language="note"><code class="language-note">-基于Spider的全站数据爬取   -基于网站中某一模板下的全部页码对应的页面数据进行爬取   -需求：爬取校花网中的照片的名称   -实现方式：        -将所有的url添加到start_urls  不推荐使用        -自行手动进行请求的发送            # 手动请求发送 callback回调函数是专门用作与数据解析             yield scrapy.Request(url=new_url,callback=self.parse) -CrawlSpider的使用        -创建一个工程        -cd xxx        -创建爬虫文件(CrawlSpider):            -Scrapy genspider -t crawl xxx www.xxx.com            -链接提取器                -作用：根据指定的规则(allow)进行指定链接的提取            -规则解析器                -作用：将连接踢球去提取到的链接进行指定规则(callback)的解析            -follow                -follow=True; 可以将连接提取器，继续作用到链接提取器提取到的链接，所对用的页面中                   即使有重复的url请求，我们的调度器中的过滤器，也会帮我们给过滤掉-五大核心组件Spider:主要进行数据解析引擎: 所有的流数据都会流经引擎1、用作数据流处理的2、可以触发事务调度器:过滤器：将送过来的请求进行去重，去重之后放入队列等待下一步操作队列：最终给下载器中下载器:从互联网上去请求网页资源 异步的操作管道:进行持久化存储-请求传参    -使用场景：如果爬取解析的数据不在同一张页面中。（深度爬取）    -需求：爬取boss直聘的岗位名称，岗位描述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/30/scrapy-quan-zhan-pa-qu/image-20211230234901924.png" alt="视频截图"></p><h1 id="图片爬取"><a href="#图片爬取" class="headerlink" title="图片爬取"></a>图片爬取</h1><p><strong>需求：爬取站长素材的高清图片的爬取<a href="https://sc.chinaz.com/tupian/">https://sc.chinaz.com/tupian/</a></strong></p><p><strong>笔记</strong></p><hr><p>基于scrapy框架爬取字符串类型的数据和爬取图片类型的数据有什么区别</p><p>​        1、字符串，只需要xpath解析且提交管道进行持久化存储</p><p>​        2、图片：xpath解析到图片src属性值。单独对图片地址发起请求获取图片二进制类型的数据数据</p><p>ImagesPipeline:</p><p>​        只需要将img的src属性值进行解析，提交到管道，管道就会对图片的src进行请求发送获取到图片的二进制类型的数据，且话可以帮我们进行持久化存储</p><p>需求：爬取站长素材的图片爬取<a href="https://sc.chinaz.com/tupian/">https://sc.chinaz.com/tupian/</a></p><p>使用流程：</p><p>​        1、数据解析（图片的地址）</p><p>​        2、将存储图片地址的item提交到指定的管道类</p><p>​        3、管道文件之中自指定一个基于ImagesPipeLine的一个管道类</p><pre class="line-numbers language-note" data-language="note"><code class="language-note">def get_media_requests(self, item, info):    #就是可以根据图片地址，进行图片数据的请求def file_path(self, request, response=None, info=None, *, item=None):    #指定图片储存的路径def item_completed(self, results, item, info):    return item#返回给下一个即将执行的管道类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        4、在配置文件中：</p><p>​                    指定图片二点存储目录：IMAGES_STORE=’./imgs_lyz’</p><p>​                    指定开启的管道：自定制的管道类</p><hr><p><strong>img.py</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">import scrapyfrom imgsPro.items import ImgsproItemclass ImgSpider(scrapy.Spider):    name = 'img'    allowed_domains = ['www.xxx.com']    start_urls = ['https://sc.chinaz.com/tupian/']    def parse(self, response):        div_list=response.xpath('//*[@id="container"]/div')        for div in div_list:            # 注意：使用伪属性（这具体体现为，图片没在当前页面显示的话，就使用伪属性，显示出来之后才会去使用src属性）            src=div.xpath('./div/a/img/@src2').extract_first()#//*[@id="container"]/div[1]/div/a/img/@src            print(src)            item = ImgsproItem()            item ['src']='https:'+src#https://scpic1.chinaz.net/Files/pic/pic9/202112/apic37626_s.jpg            yield item        pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>pipelines.py</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"># Define your item pipelines here## Don't forget to add your pipeline to the ITEM_PIPELINES setting# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html# useful for handling different item types with a single interfaceimport scrapyfrom itemadapter import ItemAdapter# class ImgsproPipeline:#     def process_item(self, item, spider):#         return itemfrom scrapy.pipelines.images import ImagesPipelineclass imgsPipeline(ImagesPipeline):    #重写父类中的三个方法    def get_media_requests(self, item, info):        #就是可以根据图片地址，进行图片数据的请求        yield  scrapy.Request(item['src'])    def file_path(self, request, response=None, info=None, *, item=None):        #指定图片储存的路径        img_name=request.url.split('/')[-1]        return img_name        pass    def item_completed(self, results, item, info):        return item#返回给下一个即将执行的管道类        pass    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>items.py</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"># Define here the models for your scraped items## See documentation in:# https://docs.scrapy.org/en/latest/topics/items.htmlimport scrapyclass ImgsproItem(scrapy.Item):    # define the fields for your item here like:    #    src = scrapy.Field()    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>setting.py</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">USER_AGENT = 'ua检测'ROBOTSTXT_OBEY = FalseLOG_LEVEL='ERROR'#去除注释，更改成自己写的管道类名ITEM_PIPELINES = {    'imgsPro.pipelines.imgsPipeline': 300,}#指定图片存储的目录IMAGES_STORE='./imgs_lyz'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>引擎和下载中间的是<strong>下载中间件</strong> |||||<strong>重点</strong></p><p>引擎和spider中间的是<strong>爬虫中间件</strong></p><p>下载中间件：</p><p>​        作用：批量拦截到到整个工程中所有的请求和响应</p><p>​        拦截请求：</p><p>​                1、UA伪装  process_request <br>                2、代理IP的设定 process_exception  <strong>return request</strong></p><p>​        拦截响应：</p><p>​                1、篡改响应数据，相应对象</p><h2 id="拦截请求"><a href="#拦截请求" class="headerlink" title="拦截请求"></a>拦截请求</h2><p>爬取百度模拟拦截之后使用ua伪装和ip代理进行爬取</p><p><strong>middlewares.py</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">class MiddleproDownloaderMiddleware:    user_agent_list = [        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 "        "(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1",        "Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 "        "(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11",        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 "        "(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6",        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 "        "(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6",        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 "        "(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1",        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 "        "(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5",        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 "        "(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5",        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",        "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "        "(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3",        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 "        "(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24",        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 "        "(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"    ]    PROXY_http = [        '153.180.102.104:80',        '195.208.131.189:56055',    ]    PROXY_https = [        '120.83.49.90:9000',        '95.189.112.214:35508',    ]    def process_request(self, request, spider):        #拦截请求的        #ua伪装        request.headers['User-Agent']=random.choice(self.user_agent_list)        return None    def process_response(self, request, response, spider):        #拦截所有的响应        # Called with the response returned from the downloader.        # Must either;        # - return a Response object        # - return a Request object        # - or raise IgnoreRequest        return response    def process_exception(self, request, exception, spider):        #拦截发生异常的请求        #代理IP，请求被拦截之后，换一个ip进行爬取        if request.url.split(':')[0]=='http':            request.meta['proxy']='http://'+random.choice(self.PROXY_http)        else:            request.meta['proxy']='https://'+random.choice(self.PROXY_https)        return request#将修正之后的请求对象进行重新的请求发送<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>settings.py</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">ROBOTSTXT_OBEY = FalseDOWNLOADER_MIDDLEWARES = {    'middlePro.middlewares.MiddleproDownloaderMiddleware': 543,}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>middle.py</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">import scrapyclass MiddleSpider(scrapy.Spider):    #请求的拦截，爬取百度    name = 'middle'    #allowed_domains = ['www.xxx.com']    start_urls = ['https://www.baidu.com/s?wd=ip']    def parse(self, response):        page_txt=response.text        with open ('ip.html','w',encoding='utf-8')as fp:            fp.write(page_txt)        pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拦截响应"><a href="#拦截响应" class="headerlink" title="拦截响应"></a>拦截响应</h2><p>需求爬取网易新闻中的新闻数据（标题和内容）</p><p>1、通过网易新闻的首页解析出来五大板块对应的详情页url（没有动态加载）</p><p>2、每一个板块对应的新闻标题都是动态加载出来的（动态加载）</p><p>3、通过解析出每一个新闻详情页的url获取详情页的页面源码，解析出来新闻内容</p><p>需求：爬取网易新闻<a href="https://www.cnblogs.com/sxy-blog/p/13216168.html">基于Scrapy爬取网易新闻中的新闻数据 </a></p><hr><p>wangyi.py</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">import scrapyfrom selenium import webdriverfrom wangyiPro.items import WangyiproItemclass WangyiSpider(scrapy.Spider):    name = 'wangyi'    allowed_domains = ['www.xxx.com']    start_urls = ['https://news.163.com/']    model_url_list=[]#存储五大板块对应详情页的url    #解析五大板块对应详情页的url    def parse(self, response):        li_list=response.xpath('//*[@id="index2016_wrap"]/div[1]/div[2]/div[2]/div[2]/div[2]/div/ul/li')        alist=[2,3,5,6,8]        for index in alist:            li=li_list[index]            model_url=li.xpath('.//a/@href').extract_first()            print(model_url)            self.model_url_list.append(model_url)        #依次对每一个板块对应的页面进行请求        for url in self.model_url_list:            yield scrapy.Request(url,callback=self.parse_model)            print('第一步完成')    #每一个板块的对应的新闻标题相关内容都是动态加载出来的    def parse_model(self,response):        #解析灭一个板块页面中对应的新闻的标题和新闻详情页的url        print('第二步')        div_list=response.xpath('/html/body/div/div[3]/div[4]/div[1]/div[1]/div/ul/li/div/div')        for div in div_list:            title=div.xpath('/div/div[1]/h3/a/text()').extract_first()            new_detail_url=div.xpath('./a/@href').extract_first()            item=WangyiproItem()            item['title']=title            yield scrapy.Request(url= new_detail_url, callback=self.parse_detail,meta={'item':item})        pass    def parse_detail(self,response):        print('第三步')        content=response.xpath('//*[@id="content"]/div[2]//text()').extract()        content=''+content        item=response.meta['item']        item['content']=content        yield item        pass    # 实例化一个浏览器对象    def __init__(self):        self.bro=webdriver.Chrome(executable_path='chromedriver.exe')        pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>items.py</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">import scrapyclass WangyiproItem(scrapy.Item):    # define the fields for your item here like:    title=scrapy.Field()    content= scrapy.Field()    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>middlewares.py</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">from itemadapter import is_item, ItemAdapterfrom scrapy.http import HtmlResponsefrom time import sleepclass WangyiproDownloaderMiddleware:    def process_response(self, request, response, spider):        #通过该方法拦截五大板块对应的响应对象，进行篡改        #挑选出指定的响应对象进行篡改        #spider是爬虫的对象        bro=spider.bro#获取了爬虫类中定义的浏览器对象        if request.url in spider.model_url_list:            # response#五大板块对应的响应对象            #针对定位到这些的response进行篡改            #实例化一个新的响应对象（符合需求：包含动态加载出来的新闻数据），代替原来旧的响应对象            #如何获取动态加载的数据            # 基于selenium便捷的获取动态加载的数据            bro.get(request.url)  # 五大板块对应的url进行请求发送            sleep(5)            page_text = bro.page_source  # 包含了动态记载的新闻数据            new_response=HtmlResponse(url=request.url,body=page_text,encoding='utf-8',request=request)            return new_response        else:            #response#其他请求对应的响应对象            return response    def process_exception(self, request, exception, spider):        pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pipelines.py</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">class WangyiproPipeline:    # 专门用来处理item类型对象    # 该方法可以接受爬虫文件提交过来的item对象    # 该方法没接收到一个item就会被调用一次    def process_item(self, item, spider):       print(item)       return item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h1><p>他就是一个基于spider的一个子类CrawlSpider；专门去做的全站数据的爬取</p><h2 id="全站数据爬取的方式"><a href="#全站数据爬取的方式" class="headerlink" title="全站数据爬取的方式"></a>全站数据爬取的方式</h2><p>基于spider：手动请求发送（利用页面通用的url进行页面的请求的发送）</p><p>基于CrawlSpider: </p><h2 id="CrawlSpider的具体使用"><a href="#CrawlSpider的具体使用" class="headerlink" title="CrawlSpider的具体使用"></a>CrawlSpider的具体使用</h2><p>1、创建一个工程</p><p>2、cd XXX</p><p>3、创建爬虫文件（CrawlSpider）:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建爬虫文件</span>scrapy genspider <span class="token operator">-</span>t crawl xxx www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>链接提取器：根据指定规则（allow=r’Items/   r’Items/‘是一个正则表达式)进行指定连接的提取，<strong>根据指定规则allow，进行连接爬取</strong></p><p>规则解析器：将链接解析器提取到的链接进行制定规则（callback）的解析操作</p><p><strong>找不到url链接提取去没有用没有再看</strong></p><p><strong>demo</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment">#这个就是全站爬取的demo</span><span class="token comment">#5.18这个针对于个人信息，可以利用他的搜索进行查找到每一个人对应的数据，这个将大大降低我们搜索的时间和难度；针对于他的题库类型要使用全站爬取的这种方式进行爬取</span><span class="token keyword">class</span> <span class="token class-name">DemoproSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'demoPro'</span>    <span class="token comment">#allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://acm.zzuli.edu.cn/ranklist.php'</span><span class="token punctuation">]</span>    <span class="token comment"># 实例化了一个规则解析器;</span>    <span class="token comment"># 三个参数所表示的意思</span>    <span class="token comment"># LinkExtractor链接提取器:根据指定规则(allow="正则表达式")，进行指定连接的提取</span>    link<span class="token operator">=</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'start=\d+'</span><span class="token punctuation">)</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment">#规则解析器 将链接提取器提取到的链接进行制定规则(callback)的解析操作</span>        <span class="token comment">#链接提取器提取到的链接，callback就会执行几次</span>        Rule<span class="token punctuation">(</span>link<span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">#follow=True; 可以将连接提取器，继续作用到链接提取器提取到的链接，所对用的页面中</span>        <span class="token comment">#即使有重复的url请求，我们的调度器中的过滤器，也会帮我们给过滤掉</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#大概就是做数据分析的</span>        item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment">#item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span>        <span class="token comment">#item['name'] = response.xpath('//div[@id="name"]').get()</span>        <span class="token comment">#item['description'] = response.xpath('//div[@id="description"]').get()</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        page_txt <span class="token operator">=</span> response<span class="token punctuation">.</span>text        <span class="token comment"># /html/body/div[1]/div/table/tbody</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_txt<span class="token punctuation">)</span>        tr_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[1]/div/table/tbody/tr'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> tr_list<span class="token punctuation">:</span>            userid <span class="token operator">=</span> item<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./td[2] / div / a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            username <span class="token operator">=</span> item<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./td[3]/div/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            adad <span class="token operator">=</span> item<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./td[4]/div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            qweqwe <span class="token operator">=</span> item<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[5]/div/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            bilv <span class="token operator">=</span> item<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[6]/div/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            jibie <span class="token operator">=</span> item<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[7]/div/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment">#if userid == "201908064618":</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>userid <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> adad <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> qweqwe <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> bilv <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> jibie<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tr_list<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>时间长没有做python了，又重装了系统，这爬虫这部分就一直在搁置，这打开程序发现终端识别不到scrapy程序命令。但是在pycharm确实是下载的又这个库</p><p><strong>解决</strong></p><p>就是在终端删除这个库，我的是他就提示这个库它本身就没有下载，然后我就先下载了一下</p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js学习</title>
      <link href="2021/12/29/js-xue-xi/"/>
      <url>2021/12/29/js-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript的入门案例"><a href="#JavaScript的入门案例" class="headerlink" title="JavaScript的入门案例"></a>JavaScript的入门案例</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">/*javascript代码*/</span>        <span class="token comment">//int a=10;</span>        <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//int b=20;</span>        <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment">//int temp=a+b;</span>        <span class="token keyword">var</span> temp<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token comment">//System.out.println(temp);</span>        <span class="token function">alert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="可以看到JavaScript的语言特征和编程注意事项"><a href="#可以看到JavaScript的语言特征和编程注意事项" class="headerlink" title="可以看到JavaScript的语言特征和编程注意事项"></a>可以看到JavaScript的语言特征和编程注意事项</h1><h2 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h2><p>1、JavaScript无需编译，直接被浏览器解释并执行</p><p>2、JavaScript无法单独运行，必须镶嵌在html代码中运行</p><p>3、JavaScript的执行过程是从上到下的</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>1、JavaScript没有访问系统文件的权限</p><p>2、由于JavaScript无需编译，是上到下执行的解释执行，所以在保证可读性的情况下，允许使用链式编程</p><p>3、JavaScript和java没有直接关系</p><h1 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h1><p>JavaScript是由三部分组成：ECMAScript、DOM、BOM</p><p>ECMAScript(核心)：规定了js的语法和基本对象</p><p>DOM  文档对象模型：处理网页内容的方法和接口</p><p>BOM 浏览器对象模型：与浏览器交互的方法和接口</p><h1 id="JavaScript的引入方式"><a href="#JavaScript的引入方式" class="headerlink" title="JavaScript的引入方式"></a>JavaScript的引入方式</h1><h2 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h2><p>在html文本内部 script脚本语言可以放在head之中后者在html之后，一般建议在head之中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">/*javascript代码*/</span>        <span class="token comment">//int a=10;</span>        <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//int b=20;</span>        <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment">//int temp=a+b;</span>        <span class="token keyword">var</span> temp<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token comment">//System.out.println(temp);</span>        <span class="token function">alert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h2><p><strong>01demo02.html</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>01demo1.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token comment">/*这部分代码不会被执行，因为会被引入的01demo01.js的代码覆盖*/</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>/*src="01demo1.js"是写的是js的地址*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="script标签放置位置"><a href="#script标签放置位置" class="headerlink" title="script标签放置位置"></a>script标签放置位置</h2><p>body的结束标签之前</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"内部的hello"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><p>保证html展示内容优先考虑。最后加载脚本，增强用户体验</p><h1 id="JavaScript语法及规则"><a href="#JavaScript语法及规则" class="headerlink" title="JavaScript语法及规则"></a>JavaScript语法及规则</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释是**//注释内容**</p><p>多行注释是**/<em>注释内容</em>/**</p><p>HBuilder多行注释快捷键 ctrl+shift+/</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的声明和赋值："><a href="#变量的声明和赋值：" class="headerlink" title="变量的声明和赋值："></a>变量的声明和赋值：</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">var 变量名;变量赋予默认值，默认值是undefined(未定义的)var 变量名=值;命名javascript严格区分大小写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">"nihao"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token string">"helo"</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//string</span>    <span class="token keyword">var</span> flag1<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> flag2<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//boolean</span>    <span class="token keyword">var</span> num1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num2<span class="token operator">=</span><span class="token number">1.55</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num3<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Number</span>    <span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//object就这一个是比较特殊的</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//undefined</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//会输出true，不会输出100;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">var a=new String();var a=new String;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>其他都是一样的</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">运算符 === 只有值和类型两个都相等才是相等的  == 仅比对值var str1=10;var str2="10";str1==str2  truestr1===str2  false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则对象"><a href="#正则对象" class="headerlink" title="正则对象"></a>正则对象</h2><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">var reg=new RegExp("表达式")//(开发基本不用)var reg=/^表达式$/   只要有有一个字符不满足正则即为false,全部合格那就是true/表达式/     只要有成立的字符那就是true，qvar reg=/^\s*$/;//0-多个空格var string="      ";alert(reg.test(string))//true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js数组对象"><a href="#js数组对象" class="headerlink" title="js数组对象"></a>js数组对象</h2><p>js数组可以看作java中的arraylist集合</p><p>数组中每一个成员都没有限制，可以存放任意类型</p><p>数组成都可以自动修改</p><h3 id="创建方式-1"><a href="#创建方式-1" class="headerlink" title="创建方式"></a>创建方式</h3><p>1、var arr=[1,2,3,”a,true];//常用的js数组</p><p>2、var arr=new Array();//创建一个数组对象，数组默认长度为0</p><p>3、var arr=new Array(4);//数组长度是4，长度是动态可调的</p><p>4、var arr=new Array(1,2);//数组元素是1，2</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>属性：length   数组中的元素数目</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var arr=['hello','你好',1,2];alert(arr.length)//4arr[1]="nihao";alert(arr.length)//4arr[4]=123alert(arr.length)//5arr[10]=123alert(arr.length)//11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法：join():将数组的所有元素放入一个字符串，元素通过指定的分隔符进行分隔</p><p>​            pop():删除并返回最后一个元素</p><p>​            push():向数组末尾添加一个或者更多的元素，并返回新的长度</p><p>​            reverse():颠倒数组中元素的顺序</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var arr=[123,456,789]var str=arr.join("+")alert(str)//123+456+789alert(arr.length)//3//reverse将数组进行物理反转var arr2=arr.reverse()alert(arr2)//789,456,123//pop删除并返回最后一个元素var arr=[123,456,789]var po=arr.pop()alert(po)alert(arr.length)//push向数组末尾添加一个或者更多的元素，并返回新的长度var arr=['a','b','c','d']var push=arr.push('e')alert(push+"||"+arr+"||"+arr.length)var push=arr.push('e','f','g')alert(push+"||"+arr+"||"+arr.length)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h2><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">var x=10;alert(x)var y=10+20;alert(y);eval("var z=10")//eval可以把传入的字符串，作为JavaScipt代码执行//可以扩展程序功能//新只能去传递基本数据类型的字符串，而不能床底字符串对象alert(z)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h3><p>encodeURI():把字符串编码为URI，将字符串中的中文进行编码</p><p>decodeURI():解码某个编码的URI，</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">var msg="https:www.baidu.com/index.html?username=张三&amp;password=123";alert(msg)var temp=encodeURI(msg)//https:www.baidu.com/index.html?username=%E5%BC%A0%E4%B8%89&amp;password=123alert(temp)alert(decodeURI(temp))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h3><p>URI:统一资源标识符，标识资源详细名称，必须包含资源名</p><p>URL:统一资源定位器，定义资源的网络位置，包含http://</p><p>简单来说就是网址的前面的主网址的就是url,后面的详细地址就是uri</p><h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><p>parseInt(string):解析一个字符串并返回一个整数</p><p>parseFloat(string):解析一个字符串并返回一个整数</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var str="10.99"alert(parseInt(str))//10alert(parseFloat(str))//10.99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="自定义函数-自定义方法"><a href="#自定义函数-自定义方法" class="headerlink" title="自定义函数/自定义方法"></a>自定义函数/自定义方法</h2><h3 id="函数格式"><a href="#函数格式" class="headerlink" title="函数格式"></a>函数格式</h3><p>function 方法名(参数列表){</p><p>​    函数体</p><p>}</p><p><strong>注意：</strong></p><p><strong>函数定义函数必须是小写的function</strong></p><p><strong>函数无需返回值类型，直接在function后面书写 方法名</strong></p><p><strong>参数列表中的参数值不用写var,直接写参数名就好</strong></p><p><strong>这个可以返回值，也可以不返回值，也可以返回空值三种 ： return 具体值；不写return；return；</strong></p><h3 id="函数的注意事项"><a href="#函数的注意事项" class="headerlink" title="函数的注意事项"></a>函数的注意事项</h3><p><strong>不存在方法重载，只有方法覆盖，最后定义的函数覆盖之前的定义</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">function getSum(a,b){return a+b}alert(getSum(10,20))//针对于重名的函数，后定义的函数会覆盖掉前面定义的函数//只能调用到最后定义的函数，即使形参不匹配也不影响使用//对于那一些缺失的参数，会默认为undefinedfunction print(a,b){alert(a+'-'+b)}function print(a,b,c){alert(a+'-'+b+'-'+c)}print(1,2)print(1,2,3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><h3 id="创建方式1–function构造函数"><a href="#创建方式1–function构造函数" class="headerlink" title="创建方式1–function构造函数"></a>创建方式1–function构造函数</h3><p>引用数据类型都是对象，而对象在JavaScript中可以用函数来表示</p><p>function 对象名(){</p><p>​        函数体</p><p>}</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//方法1，无参构造function Person(){//定义一个对象this.name='小刘';//声明了一个name属性，this指代的就是当前的person对象this.age=18;}var per=new Person()alert(per.name+'||'+per.age)//方法1、有参构造function Person(n,a){//定义一个对象this.name=n;//声明了一个name属性，this指代的就是当前的person对象this.age=a;}var per=new Person('小张',18)alert(per.name+'||'+per.age)//方法2function Person(n,a){//定义一个对象this.name=n;//声明了一个name属性，this指代的就是当前的person对象this.age=a;}var per=new Person('小张',18)per.sex="男"alert(per.name+'||'+per.age+'||'+per.sex)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造方式2–对象直接量"><a href="#构造方式2–对象直接量" class="headerlink" title="构造方式2–对象直接量"></a>构造方式2–对象直接量</h3><p>var 对象名={属性名1：”属性值1”，属性名2：”属性值2”，属性名3：”属性值3”}</p><p>该方式直接创建出来实例对象，无需构造函数，无需再new创建实例对象，直接使用即可</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var per={name:"张三",age:18,}per.sex="男"alert(per.name+'||'+per.age+'||'+per.sex)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h1><p>BOM(Browser Object Model)浏览器对象模型，用来执行浏览器的相关操作</p><p><img src="/2021/12/29/js-xue-xi/Screenshot_20220106_153850_tv.danmaku.bili.png" alt="windows对象方法"></p><h2 id="消息框"><a href="#消息框" class="headerlink" title="消息框"></a>消息框</h2><p>1、alert（）警告框</p><p>2、confirm() 确认框，用于告知用户信息，并收集用户的选择</p><p>例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//有返回值，返回值类型为boolean 确定时ture，取消时falsevar flag=confirm("您好呀")alert(flag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="启动循环定时器"><a href="#启动循环定时器" class="headerlink" title="启动循环定时器"></a>启动循环定时器</h3><p>格式</p><p>setlnterval(调用方法，毫秒值)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">function run1(){alert('hello,')}setInterval("run1()",3000)function run1(){alert('hello,')}var vvid=setInterval("run1()",3000)clearInterval(vvid)//clearInterval(循环定时器ID) 取消循环定时器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需求：两秒之后显示，显示之后删除对应的循环计时器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var id;function run1(){alert('helllo,world');clearInterval(id);}id=setInterval("run1()",2000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一次性定时器"><a href="#一次性定时器" class="headerlink" title="一次性定时器"></a>一次性定时器</h3><p>启动：setTimeout(方法名,毫秒值)</p><p>取消 ：clearTimeout(id)//取消一次性定时器</p><h2 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h2><p>href属性，设置了href属性那就会跳转到该网页</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var url=location.href;alert(url)location.href='demo2.html'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需求：两秒之后跳转到百度</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">function jump(){location.href='http://www.baidu.com'}setTimeout("jump()",2000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h1><p>每一个标签会被加载成DOM树上的一个元素节点对象</p><p>每一个标签的属性会被加载成DOM树上的一个属性节点对象</p><p>每一个标签的内容体会被加载成DOM树上的一个文本节点对象</p><p>整个DOM树，是一个文档节点对象，即DOM对象</p><p><strong>一个html文档加载到内存中就会形成一个DOM对象</strong></p><h2 id="获取元素对象的四种方式"><a href="#获取元素对象的四种方式" class="headerlink" title="获取元素对象的四种方式"></a>获取元素对象的四种方式</h2><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById()"></a>getElementById()</h3><p>   通过元素的id获取元素对象，<strong>如果找不到，那就返回null</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> t1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>     <span class="token keyword">var</span> t2 <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getElementByName"><a href="#getElementByName" class="headerlink" title="getElementByName()"></a>getElementByName()</h3><p> 通过元素的name属性获取符合要求的所有元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> arr<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token comment">//返回的是元素接待你对象 数组</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getElementByTagName"><a href="#getElementByTagName" class="headerlink" title="getElementByTagName()"></a>getElementByTagName()</h3><p>  通过元素名属性(标签名)获取符合要求的所有元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>javaee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>android<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>ios<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> arr<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getElementByClassName"><a href="#getElementByClassName" class="headerlink" title="getElementByClassName()"></a>getElementByClassName()</h3><p>元素的class属性获取符合要求的所有元素,找不到返回空数组</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>h1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>h1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> arr<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元素对象常见属性"><a href="#元素对象常见属性" class="headerlink" title="元素对象常见属性"></a>元素对象常见属性</h2><p>value：获取或者更改元素对象的value值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你好<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> t1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'t1'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> text<span class="token operator">=</span>t1<span class="token punctuation">.</span>value     <span class="token function">alert</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"你好吗"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>classname：获取和更改class属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.ys1</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.ys2</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>s1<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ys1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>今天心情还是很不错的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> t1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'s1'</span><span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>className<span class="token punctuation">)</span>        t1<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'ys2'</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>checked：获取或者设置元素的checked属性值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> hobby<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span>hobby<span class="token punctuation">.</span>checked<span class="token punctuation">)</span>        <span class="token comment">//复选框默认选中</span>        hobby<span class="token punctuation">.</span>checked<span class="token operator">=</span><span class="token boolean">true</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>innerHTML：获取或者设置对象的内容体</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>今天天气好晴朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> span<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>span<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    span<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"你好呀"</span>    <span class="token function">alert</span><span class="token punctuation">(</span>span<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token comment">//追加</span>    span<span class="token punctuation">.</span>innerHTML<span class="token operator">+=</span><span class="token string">",我不是很好"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a>JS事件</h1><p><strong>入门案例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你点到我了啊"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我啊<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="驱动机制简述"><a href="#驱动机制简述" class="headerlink" title="驱动机制简述"></a>驱动机制简述</h2><p>1、事件源：专门产生世家你的组件</p><p>2、事件:事件源产生的动作或者事情</p><p>3、监听器：专门处理事件源所产生的事件</p><p>4、注册/绑定监听器：监听事件源，是否有指定事件产生</p><h2 id="常见的js事件"><a href="#常见的js事件" class="headerlink" title="常见的js事件"></a>常见的js事件</h2><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>onclick属性onclick=”执行的方法名”</p><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><h4 id="获取焦点事件（onfocuse）"><a href="#获取焦点事件（onfocuse）" class="headerlink" title="获取焦点事件（onfocuse）"></a>获取焦点事件（onfocuse）</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"获取到焦点了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--获取焦点时弹出对话框--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">onfocuse</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>&lt;/body<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="失去焦点事件（onblur）"><a href="#失去焦点事件（onblur）" class="headerlink" title="失去焦点事件（onblur）"></a>失去焦点事件（onblur）</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"获取到焦点了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--获取焦点时弹出对话框--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>&lt;/body<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="域内容改变事件（onchange）"><a href="#域内容改变事件（onchange）" class="headerlink" title="域内容改变事件（onchange）"></a>域内容改变事件（onchange）</h3><p>元素组件的值发生改变时触发</p><p>onchange属性onchange=”定义的方法函数”</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"域内容中的值改变了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>S<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SH<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载完毕事件（onload）"><a href="#加载完毕事件（onload）" class="headerlink" title="加载完毕事件（onload）"></a>加载完毕事件（onload）</h3><p>元素组件加载完毕之后会触发</p><p>onload属性onload=”定义的函数方法”</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完了啊"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是主体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表单提交事件（onsubmit）"><a href="#表单提交事件（onsubmit）" class="headerlink" title="表单提交事件（onsubmit）"></a>表单提交事件（onsubmit）</h3><p>表单表格提交按钮被点击之后会触发,通常适用于表单数据的校验</p><p>onsubmit</p><p><strong>注意，该事件需要返回boolean类型的值来执行  提交或者阻止 表单数据的操作</strong></p><p><strong>事件得到true，提交表单数据提交</strong></p><p><strong>事件得到false，阻止表单数据的提交</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"要提交了奥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键位弹起事件（onkeyup）"><a href="#键位弹起事件（onkeyup）" class="headerlink" title="键位弹起事件（onkeyup）"></a>键位弹起事件（onkeyup）</h3><p>在组件中输入某些内容时，键盘键位弹起时触发该方法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"键位谈起了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">onkeyup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h2><h3 id="鼠标移入事件（onmouseover）"><a href="#鼠标移入事件（onmouseover）" class="headerlink" title="鼠标移入事件（onmouseover）"></a>鼠标移入事件（onmouseover）</h3><p>鼠标移入某一个元素组件时触发</p><h3 id="鼠标移出事件（onmouseout）"><a href="#鼠标移出事件（onmouseout）" class="headerlink" title="鼠标移出事件（onmouseout）"></a>鼠标移出事件（onmouseout）</h3><p>鼠标移出某一个元素组件时触发</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"鼠标移入了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"鼠标移出了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>移入<span class="token punctuation">"</span></span>  <span class="token attr-name">onmouseover</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>移出<span class="token punctuation">"</span></span>  <span class="token attr-name">onmouseout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run2()<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="js事件的两种绑定方式"><a href="#js事件的两种绑定方式" class="headerlink" title="js事件的两种绑定方式"></a>js事件的两种绑定方式</h1><h2 id="元素事件句柄绑定"><a href="#元素事件句柄绑定" class="headerlink" title="元素事件句柄绑定"></a>元素事件句柄绑定</h2><p>将事件以元素的方式写到标签的内部，进而绑定对应的函数</p><p>绑定一个无参函数，绑定一个有参函数，绑定一个参数函数（对象）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run1"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">run3</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">run4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run4"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">run5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run5"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>111<span class="token punctuation">"</span></span>  <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>222<span class="token punctuation">"</span></span>  <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run2(<span class="token punctuation">'</span>你好啊<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>333<span class="token punctuation">"</span></span>  <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run3(this)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>111<span class="token punctuation">"</span></span>  <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1(),run4(),run5()<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM绑定"><a href="#DOM绑定" class="headerlink" title="DOM绑定"></a>DOM绑定</h2><p><strong>原事件绑定的方法</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完毕"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>run1()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>DOM绑定</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完毕"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//DOM绑定方式 对象.事件属性</span>window<span class="token punctuation">.</span>onload<span class="token operator">=</span>run1<span class="token punctuation">;</span><span class="token comment">//DOM绑定方式 匿名函数 可绑定多共和函数</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DOM绑定联系</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> input<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javaee开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习</title>
      <link href="2021/12/27/css-xue-xi/"/>
      <url>2021/12/27/css-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>今天天气好晴朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">font-size</span><span class="token punctuation">:</span>120px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>今天天气好晴朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h2><p>放置规范</p><p>在style中写入css样式的代码，<styple>标签放置在标签之中</styple></p><p>格式：</p><p>选择器名称{ 属性名：属性值；</p><p>属性名：属性值；·······}</p><p><strong>选择器就是css样式指定的作用在那些标签上；如果一个属性名有多个值，多个值之间使用   空格    隔开</strong></p><p>css注释</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/*注释内容*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><p><strong>选择器严格区分大小写，属性和属性值不区分大小写；<br>属性和属性之间使用分号隔开，最后一个可以省略。<br>如果一个属性名有多个值，多个值之间使用   空格    隔开</strong></p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">span</span><span class="token punctuation">{</span>            <span class="token comment">/*css注释*/</span>            <span class="token property">font-size</span><span class="token punctuation">:</span>120px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>今天天气好晴朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">font-size</span><span class="token punctuation">:</span>120px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>今天天气好晴朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--标准--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>11111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>22222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        div111    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        div222    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>.类名{}</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.redF</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.three</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>span1:我是黑色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>redF<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>span2:我是红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>div1:我是黑色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>redF three<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>div2:我是红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>#id号</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">#d1</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>span1:我是黑色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">&gt;</span></span>span2:我是红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>div1:我是黑色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>div2:我是红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本选择器的组合方式"><a href="#基本选择器的组合方式" class="headerlink" title="基本选择器的组合方式"></a>基本选择器的组合方式</h3><h4 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h4><p>例如：html标签的子标签是body标签</p><p>格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器1 选择器2....{/*css样式代码*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>选择器1 下的 选择器2</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">div font</span> <span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我要变成红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>        我要是黑色    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我要保持黑色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并集选择器  </p><p>选择器1，选择器2{}</p><h3 id="不常用的选择器"><a href="#不常用的选择器" class="headerlink" title="不常用的选择器"></a>不常用的选择器</h3><p>后代选择器 **选择器1 选择器2{}**会找到选择器1下的选择器1的所有后代</p><p>子元素选择器 <strong>选择器1&gt;选择器2{}<strong>选择器1下的所有</strong>子标签</strong>符合选择器2的条件</p><p>交集选择器 <strong>选择器1选择器2{}</strong></p><p>相邻兄弟选择器 <strong>选择器1+选择器1{}</strong></p><p>通用兄弟选择器 <strong>选择器1~选择器2{}</strong></p><p>选中同一个级别的第一个标签 <strong>标签：first-child{}</strong></p><p>选中同级别中同类型的第一个标签 <strong>标签：first-of-type{}</strong></p><p>选中同级别中同类型的最后一个标签 <strong>标签：last-of-type{}</strong></p><p>选中同级别的第几个标签 <strong>标签nth-child(3){}</strong></p><p>选中同级别同类型的第几个标签  <strong>标签:nth-of-type(3)</strong></p><h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><p>所有的html标签都是有边框的，，只是默认的边框是不显示的</p><h3 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h3><p><strong>border 用于设置边框的样式</strong></p><p>格式：宽度 样式 颜色</p><p>例如：1px solid red</p><p>样式：solid实现，none无边，double双线</p><p><strong>width 用于设置标签的宽度</strong></p><p><strong>height 用于设置边框的高度</strong></p><p><strong>background-color 用于设置背景的颜色</strong></p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="浮动文档流"><a href="#浮动文档流" class="headerlink" title="浮动文档流"></a>浮动文档流</h4><p>格式 选择器{float:属性值}</p><p>none:元素不浮动  left:元素向左浮动 right:元素向右浮动</p><p>设置浮动之后会出现下面的情况</p><p><img src="/2021/12/27/css-xue-xi/image-20211228212124906.png" alt="浮动可能出现的错误"></p><h4 id="标签文档流"><a href="#标签文档流" class="headerlink" title="标签文档流"></a>标签文档流</h4><p>标准流：页面默认加载的一种流方式  从上到下，从左到右</p><p>​                把页面中的标签分为两种类型：块级标签、行内标签</p><p>​                                    块级标签：独占一行，可以设置宽高常见的块级元素有h系列、p、div、ul等</p><p>​                                    行级标签：不独占一行，不可以设置宽高；常见的行内元素有span、a等<strong>不会自动换行</strong></p><p>​                块级标签从上到下；行级标签从左到右</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p><strong>块级元素</strong>以区域块的方式出现，每一个块标签独自占据一整行或多行。在块结束的时候会自动换行</p><p>常见的块级元素有h系列、p、div、ul等</p><p>常见的行内元素有span、a等<strong>不会自动换行</strong></p><p><strong>格式</strong></p><p>选择器{display:属性值}</p><p>常见属性值：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">block:将元素显为块状元素（块状元素的默认属性值）inline:将元素显示为行内元素（行内元素的默认属性值）inline-block:行内块标签none:此元素将被隐藏，不显示，也不占用页面空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p><strong>font-size</strong>用于设置字体大小，取值是像素</p><p><strong>color</strong>用于设置字体的颜色</p><p><strong>font-style</strong>设置字体样式取值为<strong>italic</strong>和<strong>normal</strong></p><p><strong>font-weight</strong>设置文字的粗细，常用取值<strong>lighter</strong>,<strong>bold</strong>和<strong>bolder</strong>还可以进行数字取值<em>100</em>，<em>900</em></p><p><strong>font-family</strong>设置字体，*”宋体”<em>或者</em>“微软雅黑”*</p><p><strong>连写形式</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">font: italic bold 100px "楷体"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>text-decoration</strong>文本装饰属性，常用取值<strong>underline(下划线)</strong> <strong>line-through(删除线)</strong> <strong>overline(上划线)</strong> **none(什么都没有)**可以用none去掉a标签的下划线</p><h2 id="css盒子模型"><a href="#css盒子模型" class="headerlink" title="css盒子模型"></a>css盒子模型</h2><p>所有的html元素，我们都可以看作一个四边形，一个盒子</p><p>用css设置盒子的内边距，边框，外边距的样式<strong>内边距padding 边框border 外边距margin</strong></p><h3 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h3><p>border-top     border-left       border-bottom      border-right</p><p>通用设置 border:1px solid red;</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">div{border-top:1px solid #FF0000;border-bottom: 1px double #0000FF;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距padding</h3><p>padding-top    padding -left    padding-bottom    padding-right</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">padding-top: 100px;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通用设置：padding:100px</p><h3 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h3><p>margin-top   margin -left    margin-bottom    margin-right</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">margin-top:100px<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通用设置：margin:100px</p><p><img src="/2021/12/27/css-xue-xi/image-20211228214955507.png" alt="边距整体运行截图"></p><h2 id="css和html的结合方式"><a href="#css和html的结合方式" class="headerlink" title="css和html的结合方式"></a>css和html的结合方式</h2><h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><h4 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h4><p>格式</p><p><strong>&lt;html标签 style=”css样式代码”/&gt;</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>userlyz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="style标签样式"><a href="#style标签样式" class="headerlink" title="style标签样式"></a>style标签样式</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">a</span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更加有复用性</p><h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo.css<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>demo.css</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">a{font-size: 100px;color: blue;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不同文件之间的样式复用</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaee开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习</title>
      <link href="2021/12/24/html-xue-xi-1/"/>
      <url>2021/12/24/html-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>你好像是个憨批<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>你好像是个憨批<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>你好像是个憨批<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20211224102537704.png" alt="运行"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>今天天气好晴朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>head之中存放的都是网页的说明性内容，例标题等。</p><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20211224103031352.png" alt="2"></p><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><h3 id="h系列-标题标签"><a href="#h系列-标题标签" class="headerlink" title="h系列  标题标签"></a>h系列  标题标签</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>一级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>六级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--只有1-6级标签，设置h7会不识别，而当作普通文字进行解析--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="p"><a href="#p" class="headerlink" title="p"></a>p</h3><p>划分段落，自动在段前段后自动加空行</p><p>align段落的对齐方式，默认为居左</p><h3 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h3><p>分隔符标签，会在页面上显示一条分割线</p><p>size属性：水平分割线的高度</p><h3 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h3><p>显示文本，不会单独占据一行</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>span标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><p><strong>font-size</strong>用于设置字体大小，取值是像素</p><p><strong>color</strong>用于设置字体的颜色</p><p><strong>font-style</strong>设置字体样式取值为<strong>italic</strong>和<strong>normal</strong></p><p><strong>font-weight</strong>设置文字的粗细，常用取值<strong>lighter</strong>,<strong>bold</strong>和<strong>bolder</strong>还可以进行数字取值<em>100</em>，<em>900</em></p><p><strong>font-family</strong>设置字体，*”宋体”<em>或者</em>“微软雅黑”*</p><p><strong>连写形式</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">font: italic bold 100px "楷体"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>text-decoration</strong>文本装饰属性，常用取值<strong>underline(下划线)</strong> <strong>line-through(删除线)</strong> <strong>overline(上划线)</strong> **none(什么都没有)**可以用none去掉a标签的下划线</p><p>颜色</p><p>大小 1-7</p><p>字体</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>今天天气怎么样：    <span class="token comment">&lt;!--size属性：1~7，默认是3  color属性：可以是#xxxxxx表示三原色，也可以是red blue green等，如果红绿蓝两位取值相同，可省略成一位，例如#FF1133简化为#F13--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>楷体<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>今天好晴朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="br"><a href="#br" class="headerlink" title="br/"></a>br/</h3><p>换行</p><h3 id="b标签"><a href="#b标签" class="headerlink" title="b标签"></a>b标签</h3><p>粗体标签，不会独占一行</p><h3 id="i标签"><a href="#i标签" class="headerlink" title="i标签"></a>i标签</h3><p>斜体标签，不会独占一行</p><h3 id="空格符"><a href="#空格符" class="headerlink" title="空格符"></a>空格符</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--注释内容--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**src路径 **</p><p>​        图片路径的写法：</p><p>​        第一种内网路径，</p><p>​                绝对路径，文件在硬盘上的具体位置<strong>一般不用</strong></p><p>​                相对路径，../img/001-1.jpg</p><p>​                        ../表示上一层</p><p>​                        ./表示本层</p><p>​        第二种互联网路径 必须在前面加上https://</p><p><strong>alt属性</strong>：图片无法显示的时候显示的文字</p><p><strong>width  height</strong></p><p>可以是400也可以是百分比，百分比是父标签的百分比</p><p><strong>width</strong>=”200”    <strong>width</strong>=”50%”</p><p><strong>title</strong>一般是给搜索引擎提供值的</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--图片--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img/001-1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img/001-2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.jj20.com%2Fup%2Fallimg%2Ftp09%2F21042G4331941H-0-lp.jpg&amp;refer=http%3A%2F%2Fimg.jj20.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1642915250&amp;t=bf95b9745b8bf5cd6e5905306dd3014f<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><p>无序列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">type disc(实心圆)、circle(空心圆)、square(方块)、none(去掉)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>电脑数码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>电脑办公<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>家具饰品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有序列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">是组合标签，ol标签内部嵌套li标签type属性：取值范围，"A","a","I","i","l"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>电脑数码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>电脑办公<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>家具饰品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/image-20211224184927824.png" alt="image-20211224184927824"></p><h2 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h2><p>内联框架标签</p><p>iframe元素会创建一个包含另一个文档的内联框架（）</p><p>name属性：指定iframe的名称，如果 a 标签的中的 target 属性值是其 name 属性的时候,点击a标签,对应 的链接内容会出现在 iframe 中 </p><p>src属性：指的是iframe中显示的内容的连接</p><p>frameborder属性：取值为0（不显示边框）和1（显示边框）</p><p>scrolling属性：取值为yes（可以滚动）no（不可以滚动）auto（自动）</p><p>width属性：宽度</p><p>height属性：高度</p><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><p><strong>a</strong></p><p>超链接标签连接的空间可以不经过对方允许，直接打开</p><p><strong>防盗设置</strong></p><p>超链接是无法直接访问的，当你访问该页面时，我会进行先行判断，先获取你的上一个链接地址，判断这上一个链接地址是不是从我当前的服务器内部发起的，如果是，可以正常访问；如果不是，给你一个指定的页面，项目首页。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">href属性指定点击后跳转的路径（url)，如果需要点击之后没有反应西药写为：javascript:void(0)target属性：指定跳转模式：_blank表示新建窗口，_self表示当前页，默认是_self，也可以在指定区域打开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>列表标签.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转到列表页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo03.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../img/001-1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../img/001-1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击之后没有反应<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p>border:表格边框的宽度，</p><p>width:宽度；可以是像素也可以是百分比</p><p>height:高度；可以是像素也可以是百分比</p><p>align:水平对齐方式 常用left center right；都可以设置</p><p>valign:垂直对齐方式 常用 top middle bottom；valign可以设置tr td</p><p>cellspacing:外边距，单元格与单元格之间的距离，只能给table设置默认是2px</p><p>cellpadding:内边距，单元格内容与单元格之间的距离，只能给table设置默认是1px</p><p>bgcolor:背景颜色</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500px<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6px<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aqua<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>lyz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><p>普通的标签，独自使用没有任何效果，主要用于网页中区域的划分，会单独占据一行</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    适用于大量信息的展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>适用于少量信息的展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--例如密码错误--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--一个div在效果中默认占满一行--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    我是div111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    我是div222222222222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--span有多少东西，就占多少空间，不会自动换行--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>我是span33333333333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>我是span44444444444<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>一般用来提交用户数据，提交给服务器程序，相当于一个WEB程序的入口；</p><p>action属性表示请求的路径，表单提交到服务器的具体url,可以填写①服务器地址②文件地址</p><p>method属性表示请求方式一般取值是POST和GET，GET是默认值，提交的数据会追加到请求路径上../..servrvlet?username=userlyz&amp;password=123,数据以这种格式进行提交多个数据用&amp;进行连接。因为请求路径长度有限制，所以GET请求提交的数据有限，GET提交的数据会追加到路径上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    用户id：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    密&amp;nbsp&amp;nbsp&amp;nbsp码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    性&amp;nbsp&amp;nbsp&amp;nbsp别: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>人    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>物<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>编程    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>羽毛球    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>la<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交爱好<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    照片：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--需要配合js事件使用--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p><img src="https://gitee.com/userlyz/imgs/raw/master/imgs/Screenshot_20211225_104559_tv.danmaku.bili.jpg" alt="input的type属性值"></p><p><strong>readonly设置该标签值为只读标签，用户无法手动更改，数据可以正常提交<br>disabled:设置该标签不可用，参数值无法更改，参数值也无法提交</strong></p><p><strong>size</strong>：大小 用于设置文本框的大小</p><p><strong>maxlength</strong>: 允许输入的最大长度，一般用于显示文本框中文本内容的长度</p><p><strong>placeholder</strong>:占位符属性，用于设置文本框的占位符：提示信息</p><h3 id="选项标签"><a href="#选项标签" class="headerlink" title="选项标签"></a>选项标签</h3><p>select</p><p>name属性：发送到服务器的名称</p><p>multiple属性：不写默认单选，取值multiple表示多选，一般只使用单选</p><p>size属性：可见选项的数目</p><p><strong>对于option标签，如果不屑value,默认提交option的文本内容，写了就提交value内容</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">选择框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>默认第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>设置为默认第二个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--多选选项框--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>设置为默认第二个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交选择框<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="textarea标签"><a href="#textarea标签" class="headerlink" title="textarea标签"></a>textarea标签</h3><p>文本域，用于多行输入文本</p><p>cols属性：文本域的列数</p><p>rows属性：文本域的行数</p><p>name属性：发送给服务器的名称</p><p>value属性：textarea的内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">表单文本域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>个人简介:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文本域<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>XXXXXXXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交文本域<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="button标签（不常用）"><a href="#button标签（不常用）" class="headerlink" title="button标签（不常用）"></a>button标签（不常用）</h3><p>按钮标签，根据不同的type属性不同，功能会不同，完全可以使用input进行替代，所以一般不会使用button type属性可以有三个值  button  submit  reset;</p><p>button相当于input的button需要使用js进行事件绑定，submit相当于input的submit功能，reset相当于input的reset功能</p><h3 id="from中有两个属性action-method"><a href="#from中有两个属性action-method" class="headerlink" title="from中有两个属性action method"></a>from中有两个属性action method</h3><p>action是将表单数据提交到那个页面</p><p>method是传输数据的方法get和post</p><p>Get将数据拼接到地址栏中，get相对不安全 ，get提交数据量有限</p><p>Post不会将数据拼接到地址栏将数据上传到请求体中 相对安全，理论上是无限的</p><p><strong>尽量使用post方式提交表单</strong></p><h3 id="提交表单的注意事项"><a href="#提交表单的注意事项" class="headerlink" title="提交表单的注意事项"></a>提交表单的注意事项</h3><p>①需要提交服务器中的数据，必须都要放到form表单中，否则是提交不过去的</p><p>②最后的提交形式就是 name=value&amp;name=value&amp;name=value</p><p>③form中不需要的提交内容，不设置name属性，如果按钮本身就是作为提交功能的出发，那么就不需要设置name属性</p><p>使用url编码</p><p>主要解决的是中文和特殊符号，以防止数据读取会少的问题<strong>更好的区分name和value不至于将他们切割开</strong></p><h4 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h4><p>1、进行普通编码【使用的是页面规定的字符集，例如 utf-8】</p><p>2、将字符数组中的每一个元素，都会从十进制，转换为十六进制</p><p>3、把已经转换为16进制的字节数组，以%进行拼接，拼接成字符串就是url编码后的结果</p><p>META 元—-&gt;属性</p><h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><p>区域分割标签，普通的标签 独占一行，主要使用div标签进行区域划分；</p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><h2 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h2><pre class="line-numbers language-note" data-language="note"><code class="language-note">&lt;head&gt; 头标签  语义化特征，存放一些控制元素  css样式、js脚本&lt;meta&gt; 元标签 charset字符集   utf-8 还可以设置很多；&lt;title&gt; 标题标签---&gt;窗口标题&lt;body&gt; 主体标签  躯干标签：存放的是页面中需要展示的内容&lt;footer&gt;  脚步标签  ：一般都是备注、友情链接、备案号、等等一些<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h2><p>子标签可以继承宽度值，不能直接继承高度值</p><p>但是有一些标签是例外例如 iframe需要父标签同时设置</p><h2 id="笔记2"><a href="#笔记2" class="headerlink" title="笔记2"></a>笔记2</h2><p>常用的响应状态码</p><table><thead><tr><th>常用状态码</th><th>意义</th></tr></thead><tbody><tr><td>200</td><td>请求成功</td></tr><tr><td>302</td><td>重定向</td></tr><tr><td>304</td><td>读取本地缓存文件</td></tr><tr><td>404</td><td>请求的页面不存在</td></tr><tr><td>500</td><td>服务端程序出错</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> javaee开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty学习</title>
      <link href="2021/12/07/netty-xue-xi/"/>
      <url>2021/12/07/netty-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="netty学习"><a href="#netty学习" class="headerlink" title="netty学习"></a>netty学习</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><img src="/2021/12/07/netty-xue-xi/image-20211207181706124.png" alt="执行流程示意图"></p><p>server启动  parentGroup 可以简单的理解一个为一个线程池  NioEventLoop可以理解为一个线程，它本身不是一个线程，但是会绑定一个线程  NioEventLoop对指定的port进行连接监听</p><p>client启动 执行步骤二    eventLoopGroup和那个parentGroup是一样的</p><p>Pipeline是一个双向链表，包含很多的处理器</p><p>parentGroup childGroup  parentGroup相当于迎宾员，childgroup相当于服务员。parentGroup只是管客户端链接的，childGroup后续所有的服务</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="Channael"><a href="#Channael" class="headerlink" title="Channael"></a>Channael</h3><p>管道，其实对Socket的封装</p><h3 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h3><p>是一个eventloop池，包含很多eventloop。<strong>EventLoop本身只是一个线程驱动，在生命周期之内只绑定一个线程</strong></p><p>netty为每一个Channnel分配一个EventLoop，用于处理用户连接，对用户请求处理等所有事件<strong>Channel和EventLoop的关系是n:1,而EventLoop和线程的关系是1:1</strong>,一个EventLoop可以和很多的Channel绑定</p><h3 id="serverBootstrap"><a href="#serverBootstrap" class="headerlink" title="serverBootstrap"></a>serverBootstrap</h3><p>服务端使用的是ServerBootstrap;客户端是Bootstrap。相当于粘合剂，将各个组件关联起来      </p><h3 id="ChannelHeader和ChannelPipeline"><a href="#ChannelHeader和ChannelPipeline" class="headerlink" title="ChannelHeader和ChannelPipeline"></a>ChannelHeader和ChannelPipeline</h3><p>ChannelHeader是对Channel中数据的处理器，可以是系统本身定义好的编码器也可以是用户定义的。这些处理器会被统一添加到一个ChannelPipeline的对象中，然后按照顺序对Channel中的数据进行一次处理</p><h3 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h3><p><strong>Netty中的所有I/O操作都是异步的</strong>Netty中定义了ChannelFuture对象作为异步操作的代言人，表示异步操作本身。如果想获取该异步操作的的返回值，可以通过该异步对象中的addListener()方法为该异步操作添加监听器，为其注册回调，当结果出来之后马上调用执行</p><p>回调：当结果出来之后立马启用</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>io<span class="token punctuation">.</span>netty<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>netty<span class="token operator">-</span>all<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">4.1</span><span class="token number">.63</span><span class="token punctuation">.</span>Final<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span>         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cnblogs.com/128-cdy/p/12608779.html">IDEA的maven项目的netty包的导入（其他jar同） - CccccDi - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/hyy9527/p/13060023.html">IDEA引入Netty包 - 亲爸爸 - 博客园 (cnblogs.com)</a></p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><h3 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h3><pre class="line-numbers language-SomeServer" data-language="SomeServer"><code class="language-SomeServer">package com.lyz.server;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.string.StringDecoder;import io.netty.handler.codec.string.StringEncoder;public class SomeServer {    public static void main(String[] args){        // 创建一个group，用于处理客户端连接请求        NioEventLoopGroup parentGroup=new NioEventLoopGroup();        // 创建一个group，用于处理客户端连接上sever之后的后续请求        NioEventLoopGroup childGroup=new NioEventLoopGroup();        try {            //bootstrap用于初始化channel            ServerBootstrap bootstrap=new  ServerBootstrap();            //指定两个要使用的group            bootstrap.group(parentGroup,childGroup)                    //指定创建的channel的类型                    .channel(NioServerSocketChannel.class)                    //指定要使用的处理器                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {                        //初始化channel方法                        @Override                        protected void initChannel(SocketChannel ch) throws Exception {                            //channel一旦创建完毕就会同时绑定一个pipeline                            ChannelPipeline pipeline=ch.pipeline();                            //添加编码器                            pipeline.addLast(new StringEncoder());                            //添加解码器                            pipeline.addLast(new StringDecoder());                            //添加自定义的处理器                            pipeline.addLast(new SomeServerHeadler());                        }                    });            //创建channel,绑定指定的主机(hostName,port)            //sync() 将异步变成同步的            ChannelFuture future =null;            future=bootstrap.bind(8888).sync();//这个方法不执行完毕不往下执行，这就是为啥给他从异步变成同步            System.out.println("服务器8888已经启动");            //当channel被关闭之后，会触发closeFuture()的执行,去完成一些首位工作            future.channel().closeFuture().sync();        }catch (InterruptedException e){            e.printStackTrace();        }finally {            //将两个group进行优雅关闭            parentGroup.shutdownGracefully();            childGroup.shutdownGracefully();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SomeServerHeadler" data-language="SomeServerHeadler"><code class="language-SomeServerHeadler">package com.lyz.server;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import java.util.UUID;import java.util.concurrent.TimeUnit;//自定义服务端处理器，用于处理来自客户端的数据public class SomeServerHeadler extends ChannelInboundHandlerAdapter {    //一种回调方法：当client将数据写入到channel并发送到server后，server就会触发该方法的执行    /**     * @param ctx 表示当前处理器（其实他就是当前处理器封装的一个节点）     * @param msg client发来的数据     * @throws Exception     * **/    @Override    public void channelRead(ChannelHandlerContext ctx,Object msg)throws Exception{        //输出client的地址与发送来的数据        System.out.println(ctx.channel().remoteAddress()+","+msg);        //向客户端发送一个随机的uuid        //UUID.randomUUID()        ctx.channel().writeAndFlush("from server"+msg);        TimeUnit.MICROSECONDS.sleep(500);    }    //一旦在服务器端发生异常，就会触发该方法的运行    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        cause.printStackTrace();        //关闭channel        ctx.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class="line-numbers language-SomeClinet" data-language="SomeClinet"><code class="language-SomeClinet">package com.lyz.client;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;import io.netty.handler.codec.string.StringDecoder;import io.netty.handler.codec.string.StringEncoder;public class SomeClient {    public static void main(String[] args) {        NioEventLoopGroup group =new  NioEventLoopGroup();        try{            //对比server端使用的是ServerBootstrap            Bootstrap bootstrap=new Bootstrap();            bootstrap.group(group)                    //指定要创建的channel的类型                    //server指定的是NioServerSocketChannel                    .channel(NioSocketChannel.class)                    .handler(new ChannelInitializer&lt;SocketChannel&gt;() {                        @Override                        protected void initChannel(SocketChannel ch) throws Exception {                            ChannelPipeline pipeline=ch.pipeline();                            pipeline.addLast(new StringEncoder());//pipeline.addLast("可以自定义处理器名，不添加默认为类名",new StringEncoder());                            pipeline.addLast(new StringDecoder());                            pipeline.addLast(new SomeClientHeadler());                        }                    });            ChannelFuture future=bootstrap.connect("localhost",8888).sync();            future.channel().closeFuture().sync();        }catch (InterruptedException e){            e.printStackTrace();        }finally {            group.shutdownGracefully();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SomeClientHeadler" data-language="SomeClientHeadler"><code class="language-SomeClientHeadler">package com.lyz.client;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import java.time.LocalDateTime;import java.util.Scanner;import java.util.concurrent.TimeUnit;//自定义客户端处理器，处理来自于server的数据public class SomeClientHeadler extends ChannelInboundHandlerAdapter {    @Override    public void channelRead(ChannelHandlerContext ctx,Object msg)throws Exception{        System.out.println(ctx.channel().remoteAddress()+","+msg);        Scanner in =new Scanner(System.in);        System.out.println("请输入您要发送的信息");        String data=in.nextLine();        ctx.channel().writeAndFlush("from client:"+ data);        TimeUnit.MILLISECONDS.sleep(500);    }    //当channel被激活的时候会触发该方法的执行，该方法指挥执行一次    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        super.channelActive(ctx);        ctx.channel().writeAndFlush("send the first data");    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        cause.printStackTrace();        ctx.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="课程设计结果"><a href="#课程设计结果" class="headerlink" title="课程设计结果"></a>课程设计结果</h1><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><pre class="line-numbers language-SomeServer" data-language="SomeServer"><code class="language-SomeServer">package com.lyz.server;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.string.StringDecoder;import io.netty.handler.codec.string.StringEncoder;import java.util.HashMap;import java.util.Map;public class SomeServer {    public static Map&lt;String, ChannelHandlerContext&gt; user_list=new HashMap&lt;&gt;();    public static void main(String[] args){        // 创建一个group，用于处理客户端连接请求        NioEventLoopGroup parentGroup=new NioEventLoopGroup();        // 创建一个group，用于处理客户端连接上sever之后的后续请求        NioEventLoopGroup childGroup=new NioEventLoopGroup();        try {            //bootstrap用于初始化channel            ServerBootstrap bootstrap=new  ServerBootstrap();            //指定两个要使用的group            bootstrap.group(parentGroup,childGroup)                    //指定创建的channel的类型                    .channel(NioServerSocketChannel.class)                    //指定要使用的处理器                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {                        //初始化channel方法                        @Override                        protected void initChannel(SocketChannel ch) throws Exception {                            //channel一旦创建完毕就会同时绑定一个pipeline                            ChannelPipeline pipeline=ch.pipeline();                            //添加编码器                            pipeline.addLast(new StringEncoder());                            //添加解码器                            pipeline.addLast(new StringDecoder());                            //添加自定义的处理器                            pipeline.addLast(new SomeServerHeadler());                        }                    });            //创建channel,绑定指定的主机(hostName,port)            //sync() 将异步变成同步的            ChannelFuture future =null;            future=bootstrap.bind(8888).sync();//这个方法不执行完毕不往下执行，这就是为啥给他从异步变成同步            System.out.println("服务器8888已经启动");            //当channel被关闭之后，会触发closeFuture()的执行,去完成一些首位工作            future.channel().closeFuture().sync();        }catch (InterruptedException e){            e.printStackTrace();        }finally {            //将两个group进行优雅关闭            parentGroup.shutdownGracefully();            childGroup.shutdownGracefully();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SomeServerHeadler" data-language="SomeServerHeadler"><code class="language-SomeServerHeadler">package com.lyz.server;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import java.util.HashMap;import java.util.Map;import java.util.concurrent.TimeUnit;//自定义服务端处理器，用于处理来自客户端的数据public class SomeServerHeadler extends ChannelInboundHandlerAdapter {    //一种回调方法：当client将数据写入到channel并发送到server后，server就会触发该方法的执行    /**     * @param ctx 表示当前处理器（其实他就是当前处理器封装的一个节点）     * @param msg client发来的数据     * @throws Exception     * **/    public static Map&lt;String, ChannelHandlerContext&gt; user_list=new HashMap&lt;&gt;();    public void sendto(ChannelHandlerContext ctx,Object msg)throws Exception{        ctx.channel().writeAndFlush("from server"+msg);        TimeUnit.MICROSECONDS.sleep(500);    }    @Override    public void channelRead(ChannelHandlerContext ctx,Object msg)throws Exception{        //输出client的地址与发送来的数据        System.out.println(ctx.channel().remoteAddress()+","+msg);        msg=msg.toString().replaceAll("[\\r\\n]","");        //登录        String username="";        if (msg.toString().startsWith("LOGIN:")){            username=msg.toString().split(":")[1];            if (user_list.containsKey(username)){                System.out.println(username+"登录失败");                String data="失败，请重新登录";                sendto(user_list.get(username),data);            }            else{                System.out.println(username+"登录成功");                user_list.put(username,ctx);                String data=username+"登录成功";                sendto(user_list.get(username),data);            }        }        else if (msg.toString().startsWith("SENDTO:")){//SENDTO:1;MSG:HELLO,I AM 1            String sendto_name=msg.toString().split(";")[0].split(":")[1];            String data=msg.toString().split(";")[1].split(":")[1];            System.out.println(sendto_name+"------"+data);            sendto(user_list.get(sendto_name),data);        }        else if (msg.toString().startsWith("SENDALL:")){            Set&lt;String&gt; keys=user_list.keySet();            String data=msg.toString().split(":")[1];            for(String key:keys){                sendto(user_list.get(key),data);            }        }        else if(msg.toString().startsWith("QUERY")){            String data=user_list.toString();            sendto(ctx,data);        }        else if (msg.toString().startsWith("EXIT")){            user_list.remove(username);            String data="退出成功";            sendto(ctx,data);            ctx.close();        }        else{            String data="失败，请重新输入";            sendto(ctx,data);        }    }    //一旦在服务器端发生异常，就会触发该方法的运行    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        cause.printStackTrace();        //关闭channel        ctx.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><pre class="line-numbers language-Someclient" data-language="Someclient"><code class="language-Someclient">package com.lyz.client;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;import io.netty.handler.codec.string.StringDecoder;import io.netty.handler.codec.string.StringEncoder;public class SomeClient {    public static void main(String[] args) {        NioEventLoopGroup group =new  NioEventLoopGroup();        try{            //对比server端使用的是ServerBootstrap            Bootstrap bootstrap=new Bootstrap();            bootstrap.group(group)                    //指定要创建的channel的类型                    //server指定的是NioServerSocketChannel                    .channel(NioSocketChannel.class)                    .handler(new ChannelInitializer&lt;SocketChannel&gt;() {                        @Override                        protected void initChannel(SocketChannel ch) throws Exception {                            ChannelPipeline pipeline=ch.pipeline();                            pipeline.addLast(new StringEncoder());//pipeline.addLast("可以自定义处理器名，不添加默认为类名",new StringEncoder());                            pipeline.addLast(new StringDecoder());                            pipeline.addLast(new SomeClientHeadler());                        }                    });            ChannelFuture future=bootstrap.connect("localhost",8888).sync();            future.channel().closeFuture().sync();        }catch (InterruptedException e){            e.printStackTrace();        }finally {            group.shutdownGracefully();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-clientheadler" data-language="clientheadler"><code class="language-clientheadler">package com.lyz.client;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import java.time.LocalDateTime;import java.util.Scanner;import java.util.concurrent.TimeUnit;//自定义客户端处理器，处理来自于server的数据public class SomeClientHeadler extends ChannelInboundHandlerAdapter {    @Override    public void channelRead(ChannelHandlerContext ctx,Object msg)throws Exception{        System.out.println(ctx.channel().remoteAddress()+","+msg);        sendto(ctx,msg);    }    //当channel被激活的时候会触发该方法的执行，该方法指挥执行一次    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        super.channelActive(ctx);        Scanner in =new Scanner(System.in);        System.out.println("请输入您的LOGIN:");        String Login=in.nextLine();        ctx.channel().writeAndFlush("LOGIN:"+Login);    }        public void sendto(ChannelHandlerContext ctx,Object msg)throws Exception{        if(msg.toString().equals("登录失败，请重新登录"))        {            System.out.println("请输入您的LOGIN:");            Scanner in =new Scanner(System.in);            String Login=in.nextLine();            ctx.channel().writeAndFlush("LOGIN:"+Login);        }        else if (msg.toString().equals("退出成功")){            ctx.channel().closeFuture().sync();        }        else {            System.out.println("请输入您要发送的信息");            Scanner in =new Scanner(System.in);            String data = in.nextLine();            ctx.channel().writeAndFlush(data);            TimeUnit.MILLISECONDS.sleep(500);        }    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        cause.printStackTrace();        ctx.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 开发实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习资料汇总—大三</title>
      <link href="2021/12/02/fu-xi/"/>
      <url>2021/12/02/fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><h2 id="tcp-ip"><a href="#tcp-ip" class="headerlink" title="tcp/ip"></a>tcp/ip</h2><p>[socket编程](<a href="http://c.biancheng.net/cpp/html/3029.html">socket是什么意思_C语言中文网 (biancheng.net)</a>)</p><p><a href="https://blog.csdn.net/u012842273/article/details/70318991"> windows socket编程五种模型_u012842273的博客-CSDN博客</a>)</p><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><h4 id="1、什么是软件危机"><a href="#1、什么是软件危机" class="headerlink" title="1、什么是软件危机"></a>1、什么是软件危机</h4><p>软件危机是指落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题的现象。</p><h4 id="2、软件生存期，各阶段工作"><a href="#2、软件生存期，各阶段工作" class="headerlink" title="2、软件生存期，各阶段工作"></a>2、软件生存期，各阶段工作</h4><p><strong>1、软件生命周期</strong></p><p>软件生命周期又称为软件生存周期或系统开发生命周期，是软件的产生直到报废的生命周期，周期内有<strong>可行性分析和项目开发计划、需求分析、概要设计，详细设计，软件构造，测试，维护</strong>，这种按时间分程的思想方法是软件工程中的一种思想原则，即按部就班、逐步推进，每个阶段都要有定义、工作、审查、形成文档以供交流或备查，以提高软件的质量。 但随着新的面向对象的设计方法和技术的成熟，软件生命周期设计方法的指导意义正在逐步减少。 生命周期的每一个周期都有确定的任务，并产生一定规格的文档（资料），提交给下一个周期作为继续工作的依据。 按照软件的生命周期，软件的开发不再只单单强调“编码”，而是概括了软件开发的全过程。</p><p><strong>2、各阶段工作</strong></p><p>1、可行性研究和项目开发计划</p><p>确定好要解决的问题是什么（what），通过对客户的访问调查，系统分析员扼要的写出关于问题性质、工程目标和工程规模的书面报告，经过讨论和必要的修改之后这份报告应该得到客户的确认</p><p>确定该问题是否存在一个可以解决的方案。可行性研究的结果是客户做出是否继续进行这项工程的决定的重要依据，一般来说，只有投资可能取得较大的效益的那些工程项目才值得继续进行下去。</p><p>3、需求分析</p><p>深入具体的了解用户的需求，在所开发的系统要做什么这个问题上和用户想法完全一致。明确目标系统必须做什么，确定目标系统必须具备哪些功能。通常用数据流图、数据字典和简要的算法表示系统的逻辑模型。用《规格说明书》记录对目标系统的需求。</p><p>4、概要设计（总体设计）</p><p>概括的说，应该怎样实现目标系统，设计出实现目标系统的几种可能方案，设计程序的体系结构，也就是确定程序由哪些模块组成以及模块之间的关系。</p><p>5、详细设计 </p><p>实现系统的具体工作，编写详细规格说明，程序员可以根据它们写出实际的程序代码。详细设计也称模块设计，在这个阶段将详细的设计每个模块，确定实现模块功能所需的算法和数据结构。</p><p>6、软件维护</p><p>通过各种必要的维护活动使系统持久的满足用户的需求。主要分为 改正性维护、适应性维护、完善性维护、预防性维护。</p><p><img src="https://iknow-pic.cdn.bcebos.com/79f0f736afc37931c588a87ce4c4b74542a91186"></p><h3 id="3、软件过程模型，几种模型的特点和适应情况"><a href="#3、软件过程模型，几种模型的特点和适应情况" class="headerlink" title="3、软件过程模型，几种模型的特点和适应情况"></a>3、软件过程模型，几种模型的特点和适应情况</h3><p><a href="https://blog.csdn.net/mmd0308/article/details/77853086">软件工程之软件过程模型_hzqing的博客-CSDN博客_软件工程过程模型</a></p><p><a href="https://www.cnblogs.com/jasonboren/p/13100505.html">软件过程模型（软件开发模型） - jason小蜗牛 - 博客园 (cnblogs.com)</a></p><p><img src="/2021/12/02/fu-xi/image-20211202195512881.png" alt="模型特点和适应情况"></p><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p><img src="/2021/12/02/fu-xi/174426178FC3F44EABF458B1E666E40E.png" alt="瀑布模型"></p><h4 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h4><p>非整体性开发模型。有基于瀑布的逐渐增量模型和基于原型的快速原型模型</p><p>它推迟了某一些阶段或者整个阶段中的细节从而较早的产生工作软件</p><p><img src="/2021/12/02/fu-xi/A552FDBD0C05E28845890B06375647A2.png" alt="增量模型"></p><h4 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h4><p>螺旋模型将开发分为几个螺旋周期，每一个螺旋周期课分为四个步骤</p><p>1、制定计划：确定莫表，方案，和限制条件</p><p>2、风险分析：评估方案，标识风险和解决风险</p><p>3、实施工程：开发确认产品</p><p>4、客户评价：计划下一周期的工作</p><p><img src="/2021/12/02/fu-xi/9CA9797012D2401803EA4A588C1EF84E.png" alt="螺旋模型"></p><h4 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h4><p>可以使开发过程具有迭代性，和无间歇性</p><p><img src="/2021/12/02/fu-xi/9FC580D162F9D7C5D5E9DDEC2D291C36.png" alt="喷泉模型"></p><h4 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h4><p><img src="/2021/12/02/fu-xi/1333D1558333F03EEA016C002CB57D6C.png" alt="快速原型模型"></p><h3 id="4、需求分析的任务"><a href="#4、需求分析的任务" class="headerlink" title="4、需求分析的任务"></a>4、需求分析的任务</h3><p><img src="/2021/12/02/fu-xi/image-20211202195749824-16384503238721.png" alt="需求分析任务"></p><p><a href="https://www.jianshu.com/p/44fae0fa5004">软件工程：3.需求分析 - 简书 (jianshu.com)</a></p><h3 id="5、需求工程包括哪些基本活动"><a href="#5、需求工程包括哪些基本活动" class="headerlink" title="5、需求工程包括哪些基本活动"></a>5、需求工程包括哪些基本活动</h3><p><img src="/2021/12/02/fu-xi/image-20211202195936857.png" alt="image-20211202195936857"></p><p><a href="https://www.cnblogs.com/jukaiit/p/7618252.html">需求工程的基本过程 - 鸿鹄当高远 - 博客园 (cnblogs.com)</a></p><h3 id="6、面向对象方法的特点"><a href="#6、面向对象方法的特点" class="headerlink" title="6、面向对象方法的特点"></a>6、面向对象方法的特点</h3><p>对象具有封<strong>装性、继承性和 多态性 。 面向对象开发方法是以用例驱动的、以体系结构为中心的、迭代的和渐增式的开发过程，主要包</strong>括 需求分析 、系统分析、系统设计和系统实现四个阶段，但是各个阶段的划分不像结构化开发方法那样清晰，而是在各个阶段之间迭代进行的。</p><h3 id="6、类之间的关系（UML中），如何表示，能够从UML类图sa类的伪代码"><a href="#6、类之间的关系（UML中），如何表示，能够从UML类图sa类的伪代码" class="headerlink" title="6、类之间的关系（UML中），如何表示，能够从UML类图ßà类的伪代码"></a>6、类之间的关系（UML中），如何表示，能够从UML类图ßà类的伪代码</h3><p><a href="https://blog.csdn.net/smilehappiness/article/details/105527488"> UML类和类之间的关系详解_smilehappiness的博客-CSDN博客_类与类之间的关系</a></p><h3 id="7、用例模型的作用，用例规约的写法"><a href="#7、用例模型的作用，用例规约的写法" class="headerlink" title="7、用例模型的作用，用例规约的写法"></a>7、用例模型的作用，用例规约的写法</h3><p>用例模型主要用于表<strong>述系统的功能性需求，</strong>系统的设计主要由对象模型来记录表述。 另外，用例定义了系统功能的使用环境与上下文，每一个用例描述的是一个完整的系统服务。</p><p><a href="https://blog.csdn.net/wanwanwan123/article/details/5565975">软件开发中描述用例的书写规约_wanwanwan123的专栏-CSDN博客</a></p><p><a href="https://blog.csdn.net/jackyrongvip/article/details/84033701">用例规约的例子</a></p><h3 id="8、各种UML图的画法（分析问题画图，这个是重点）面向对象的分析的主要活动"><a href="#8、各种UML图的画法（分析问题画图，这个是重点）面向对象的分析的主要活动" class="headerlink" title="8、各种UML图的画法（分析问题画图，这个是重点）面向对象的分析的主要活动"></a>8、各种UML图的画法（分析问题画图，这个是重点）面向对象的分析的主要活动</h3><p><a href="https://blog.csdn.net/wpb92/article/details/40892865">(59条消息) UML画图总结_Victor -CSDN博客_uml 画图</a></p><h3 id="9、软件设计的作用"><a href="#9、软件设计的作用" class="headerlink" title="9、软件设计的作用"></a>9、软件设计的作用</h3><p>软件设计是把许多事物和问题抽象起来，并且抽象它们不同的层次和角度。 将问题或事物分解并模块化使得解决问题变得容易，分解的越细模块数量也就越多，它的副作用就是使得设计者考虑更多的模块之间耦合度的情况 。 软件设计是从软件需求规格说明出发，形成软件的具体设计方案的过程，也就是说在需求分析阶段明确软件是“做什么”的基础上，解决<strong>软件“怎么做”的问题。</strong></p><h3 id="10、模块层次结构的扇入、扇出、宽度、深度的概念"><a href="#10、模块层次结构的扇入、扇出、宽度、深度的概念" class="headerlink" title="10、模块层次结构的扇入、扇出、宽度、深度的概念"></a>10、模块层次结构的扇入、扇出、宽度、深度的概念</h3><p><strong>扇入</strong>：是指直接调用该模块的上级模块的个数。扇入大表示模块的复用程序高。<br><strong>扇出</strong>：是指该模块直接调用的下级模块的个数。扇出大表示模块的复杂度高，需要控制和协调过多的下级模块；但扇出过小（例如总是1）也不好。扇出过<br>大一般是因为缺乏中间层次，应该适当增加中间层次的模块。扇出太小时可以把下级模块进一步分解成若干个子功能模块，或者合并到它的上级模块中去。<br>设计良好的软件结构，通常顶层扇出比较大，中间扇出小，底层模块则有大扇入。</p><p>深度：指结构图控制的层次，即模块的层数。<br>宽度：指一层中最大的模块个数。<br>扇出：指一个模块直接下属模块的个数。如模块M的扇出为3。<br>扇入：指一个模块直接上属模块的个数。如模块T的扇入为4。</p><p><a href="https://www.cnblogs.com/lsjblogs/p/14931013.html">软件工程第八章思考题 - lsj_1221 - 博客园 (cnblogs.com)</a></p><h3 id="11、能够运用界面设计原则"><a href="#11、能够运用界面设计原则" class="headerlink" title="11、能够运用界面设计原则"></a>11、能够运用界面设计原则</h3><p>总原则就是：以人为本，以用户的体验为准。</p><ol><li><p>争取保持一致性。</p></li><li><p>满足普遍可用性的需求。</p></li><li><p>提供信息反馈。</p></li><li><p>设计对话框以产生结束信息。</p></li><li><p>预防错误。</p></li><li><p>允许动作回退。</p></li><li><p>支持内部控制点。</p></li><li><p>减轻短期记忆负担。</p><p>当然以上原则不应生搬硬套，具体问题具体分析</p></li></ol><h3 id="11、几种耦合的概念"><a href="#11、几种耦合的概念" class="headerlink" title="11、几种耦合的概念"></a>11、几种耦合的概念</h3><p>耦合性是指软件结构中模块之间的相互连接的紧密程度，是模块间相互连接性的度量。</p><p>模块间的联系尽可能地要少。</p><p>耦合性由高到低有：</p><ul><li><strong>内容耦合</strong>：其一个模块直接访问另一个模块的内部数据；一个模块不通过正常入口转到另一个模块的内部；一个模块有多个入口或者两个模块都有部分代码重叠。</li><li><strong>公共耦合</strong>：若干模块访问一个公共的数据环境，则称之为公共耦合。公共环境可为全局数据结构、共享的通信区、内存的公共覆盖区等。当然，公共数据区的变化将影响所有的公共耦合模块，严重影响模块的可靠性和可实用性，降低软件的可读性。</li><li><strong>控制耦合</strong>：是一个模块传递给另一个模块的信息，是用于控制该模块内部逻辑的控制信号。显然，对被控制模块的任何修改，都会影响控制模块。</li><li><strong>复合耦合：</strong>是一个模块传送给另一个模块的参数，是一个复合的数据结构，例如：包括几个数据单项的记录。</li><li><strong>数据耦合</strong>：一个模块传送给另一个模块的参数，是一个单个的数据项或者单个数据项组成的数组。</li></ul><h3 id="12、详细设计的N-S图、PAD图的使用（能完成代码和图的互相转换）"><a href="#12、详细设计的N-S图、PAD图的使用（能完成代码和图的互相转换）" class="headerlink" title="12、详细设计的N-S图、PAD图的使用（能完成代码和图的互相转换）"></a>12、详细设计的N-S图、PAD图的使用（能完成代码和图的互相转换）</h3><p>N - S图：又称为盒图，是一种结构化的流程图。由而且仅由顺序、选择、循环三种基本结构组成。</p><p>PAD 图：即问题分析图，是一种结构化的图，其基本控制结构如图所示。也由三种基本结构组成，其中选择结构分为两分支和多分支，循环结构分为WHILE型循环和UNTIL型循环两类。</p><p><a href="http://www.51testing.com/html/22/21022-133781.html">N-S盒图 E-R图 PAD图 程序流程图 - 测试文摘-凡竹 - 51Testing软件测试网 51Testing软件测试网-软件测试人的精神家园</a></p><h3 id="13、软件测试的基本步骤"><a href="#13、软件测试的基本步骤" class="headerlink" title="13、软件测试的基本步骤"></a>13、软件测试的基本步骤</h3><p>白盒测试、黑盒测试的标准，测试用例的设计</p><p>测试过程从一个相对独立的步骤越来越紧密地贯穿在软件整个生命周期中，即软件测试应该贯穿于整个软件开发的全过程。</p><p><strong>软件项目测试计划：</strong>大多包含以下步骤：项目背景，测试范围和内容；确定测试的质量、目标，对测试风险进行评估；测试资源需求；测试进度安排；测试策略。</p><p><strong>分阶段测试</strong>：单元测试；集成测试；确认测试；系统测试；验收测试。</p><p><strong>软件测试的文档</strong>：测试计划书；测试规范；测试用例；缺陷报告。</p><p><strong>还需要专业的软件测试人员</strong>。</p><h3 id="14、软件维护的目的"><a href="#14、软件维护的目的" class="headerlink" title="14、软件维护的目的"></a>14、软件维护的目的</h3><p>主要工作就是在软件运行和维护阶段对软件产品进行必要的调整和修改。原因主要有如下：</p><ul><li><p>在运行中发现在测试阶段未能发现的潜在软件错误和设计缺陷。</p></li><li><p>根据实际情况，需要改进软件设计，以增强软件的功能，提高软件的性能。</p></li><li><p>要求在某环境下已运行的软件能适应特定的硬件、软件、外部设备和通信设备等新的工作环境，或适应已经变动的数据或文件。</p></li><li><p>使投入运行的软件与其他相关的程序有良好的接口，以利于协调工作。</p></li><li><p>使运行软件的应用范围得到必要的扩充。</p><p><strong>对软件进行维护的摸底是为了纠正软件开发过程中未发现的错误，增强、改进和完善软件的功能和性能，以适应软件的发展，延长软件的寿命，使其创造更多的价值。</strong></p></li></ul><h3 id="15、软件维护的特性"><a href="#15、软件维护的特性" class="headerlink" title="15、软件维护的特性"></a>15、软件维护的特性</h3><p>软件维护过程是软件生存期中最长，并且相当困难的阶段。软件维护的工作量占整个软件生存期的70%以上，且在逐年增加。</p><p>维护虽然可以延长软件的寿命，但是也是危险的。每修改一次，可能会产生新的潜在错误。</p><p><strong>副作用</strong></p><p><strong>维护的困难</strong></p><p>主要是由于软件需求分析和开发方法的缺陷造成的。体现在：</p><ol><li>读懂别人编的程序困难。</li><li>文档的不一致性。</li><li>软件开发人员和软件维护人员在时间上的差异。</li><li>软件维护工作是一项难出成果，都不愿意做的工作。</li></ol><h3 id="16、影响软件可维护性的因素"><a href="#16、影响软件可维护性的因素" class="headerlink" title="16、影响软件可维护性的因素"></a>16、影响软件可维护性的因素</h3><p>影响软件可维护性的因素有很多，设计、编码和测试中的疏忽和低劣的软件配置，以及缺少文档等都会对软件的可维护性产生不良影响。</p><h3 id="17、重点掌握用例模型、时序（顺序）图、状态图、类图的设计。参考书上第三、四章例题以及第10章的案例一、二"><a href="#17、重点掌握用例模型、时序（顺序）图、状态图、类图的设计。参考书上第三、四章例题以及第10章的案例一、二" class="headerlink" title="17、重点掌握用例模型、时序（顺序）图、状态图、类图的设计。参考书上第三、四章例题以及第10章的案例一、二"></a>17、重点掌握用例模型、时序（顺序）图、状态图、类图的设计。参考书上第三、四章例题以及第10章的案例一、二</h3><h3 id="18、重点掌握测试用例的构造方法，理解6-6-4中面向对象测试用例的设计"><a href="#18、重点掌握测试用例的构造方法，理解6-6-4中面向对象测试用例的设计" class="headerlink" title="18、重点掌握测试用例的构造方法，理解6.6.4中面向对象测试用例的设计"></a>18、重点掌握测试用例的构造方法，理解6.6.4中面向对象测试用例的设计</h3><ul><li><p>每个测试用例都应定义明确的测试目的。</p></li><li><p>每个测试用例都应定义唯一的标识，并指明与之关联的被测试类。</p></li><li><p>每个测试用例都应定义相应的测试步骤、被测试对象的状态、测试所使用的详细和操作，以及测试可能产生的错误等。</p><p>在面向对象的测试用例的设计中，通常采用两种设计方法：</p><p>基于故障的方法和基于用例的方法。</p><p><strong>P174例6-3</strong>与<strong>P177</strong></p></li></ul><p><a href="https://blog.csdn.net/weixin_44301114/article/details/85290628"> 软件工程用的15种图_赵民强 乌托派 黑石的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Haipai1998/article/details/85869973">软件工程（第三版） 期末复习_Haipai1998的博客-CSDN博客</a></p><h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><p><a href="https://blog.csdn.net/weixin_47135547/article/details/107566603">计算机组成原理重点总结（学习笔记）含计算公式_aching_的博客-CSDN博客_计算机组成原理公式总结</a></p><p><a href="https://developer.aliyun.com/article/90529">《计算机组成原理》—-2.5 乘除法简介-阿里云开发者社区 (aliyun.com)</a></p><h2 id="第一章-数据信息表示法"><a href="#第一章-数据信息表示法" class="headerlink" title="第一章 数据信息表示法"></a>第一章 数据信息表示法</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p><img src="/2021/12/02/fu-xi/image-20211209094533897.png" alt="image-20211209094533897"></p><h3 id="源码反码补码移码"><a href="#源码反码补码移码" class="headerlink" title="源码反码补码移码"></a>源码反码补码移码</h3>]]></content>
      
      
      
        <tags>
            
            <tag> socket编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第十五弹wlan</title>
      <link href="2021/11/22/ensp-xue-xi-di-shi-wu-dan-wlan/"/>
      <url>2021/11/22/ensp-xue-xi-di-shi-wu-dan-wlan/</url>
      
        <content type="html"><![CDATA[<h1 id="无线组网概念"><a href="#无线组网概念" class="headerlink" title="无线组网概念"></a>无线组网概念</h1><p>2.4GHZ频段（2.4GHZ-2.4835GHZ）;</p><p>5GHZ频段（5.15GHZ-5.35GHZ,）</p><p>频宽一般都是20MHZ</p><p>2.4GHZ频段被划分为14个有重叠，频带宽度是22MHZ的信道</p><p>在重叠信道</p><p>非重叠信道，在同一空间内</p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第十四弹网络编程与自动化</title>
      <link href="2021/11/19/ensp-xue-xi-di-shi-si-dan-wang-luo-bian-cheng-yu-zi-dong-hua/"/>
      <url>2021/11/19/ensp-xue-xi-di-shi-si-dan-wang-luo-bian-cheng-yu-zi-dong-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="SDN与NFV概述"><a href="#SDN与NFV概述" class="headerlink" title="SDN与NFV概述"></a>SDN与NFV概述</h1><p><a href="https://blog.csdn.net/qq_38987057/article/details/104529104?utm_source=app&amp;app_version=4.18.0&amp;utm_source=app">SDN与NFV的概述</a></p><h1 id="网络编程与自动化"><a href="#网络编程与自动化" class="headerlink" title="网络编程与自动化"></a>网络编程与自动化</h1><p>实现不了，只能是通过一个路由器加一个交换机，在ensp里电脑不适用于这个</p><p><img src="/2021/11/19/ensp-xue-xi-di-shi-si-dan-wang-luo-bian-cheng-yu-zi-dong-hua/image-20211119160340568.png" alt="实验拓扑"></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">telnet server enableint Vlanif 1ip add 192.168.56.101 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/19/ensp-xue-xi-di-shi-si-dan-wang-luo-bian-cheng-yu-zi-dong-hua/image-20211119160421882.png" alt="结果"></p><p>目前在模拟器环境下不能够实现</p><p>网络与自动化代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> telnetlib<span class="token keyword">import</span> timehost<span class="token operator">=</span><span class="token string">"192.168.43.158"</span>password<span class="token operator">=</span><span class="token string">"lyz@123"</span>tn<span class="token operator">=</span>telnetlib<span class="token punctuation">.</span>Telnet<span class="token punctuation">(</span>host<span class="token punctuation">)</span>tn<span class="token punctuation">.</span>read_until<span class="token punctuation">(</span><span class="token string">"Password:"</span><span class="token punctuation">)</span>tn<span class="token punctuation">.</span>write<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>tn<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"dis cu\n"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tn<span class="token punctuation">.</span>read_very_eager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第十三弹简单ipv6网络</title>
      <link href="2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/"/>
      <url>2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的ipv6网络"><a href="#简单的ipv6网络" class="headerlink" title="简单的ipv6网络"></a>简单的ipv6网络</h1><h2 id="ipv6网络的好处"><a href="#ipv6网络的好处" class="headerlink" title="ipv6网络的好处"></a>ipv6网络的好处</h2><p>近乎无限的地址接口；层次化地址结构；即插即用；简单的报文头部；安全特性；移动性；增强QoS特性等</p><p>1、具有更大的地址空间，ipv4地址规定的IP长度为32，IPv6的规定的IP长度为128<br>2、ipv6使用更小的的路由表，IPv6的地址分配一开始就遵循聚类的原则，这使得路由器中用一条记录表示一片子网，<br>大大的减少了路由器中的路由表长度提高了路由器转发数据包的剧毒<br>3、ipv6增加了增强的组播 支持以及对流的支持。这使得网络上的多媒体有了长足发展的机会 ，为服务质量控制提供了良好的网络平台<br>4、IPv6加入了自动配置的支持，这是对dhcp协议的改进和扩展，使得网路（尤其是局域网）管理更加方便和快捷<br>5、ipv6具有更高的安全性。在使用ipv6网络用户可以对网络层的数据进行加密并对IP报文进行校验，在ipv6中提供了分组的保密和完整性。<br>极大的增强了网络的安全性<br>6、允许扩充 。如果新的技术或者应用需要时，IPv6允许协议进行扩充<br>7、更好的头部格式。ipv6使用新的头部格式，其选项与基本头部分开，如果需要，可将选项插入到基本头部和上层数据之间。<br>这就是简化和加速路由选择的过程，因为大多数的选项不需要路由选择。<br>8、新的选项。IPv6有一些新的选项俩实现新的功能。</p><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/image-20211117154448339.png" alt="实验拓扑"></p><p>IPv6地址表现为128位 每四位换算成一个十六进制数。一个IPv6地址总共有32数。每组四个数，总共八组。</p><p>但是ipv6地址还是比较长，所以还是要进行简写，中间有很多0，这样就有</p><p>1、前导0可以省略</p><p>2、连续两组或者两组以上全0可以用：：代替</p><p>注意：一个ipv6地址简化的时候不能出现两组：： ，只能出现一组</p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/Screenshot_20211118_085458_com.baidu.netdisk.jpg" alt="例如"></p><p>ipv4和ipv6报文头对比</p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/v4%E5%92%8Cv6.jpg" alt="ipv4和ipv6报文头对比"></p><p>源IP+目的IP +源端口号+目的端口号 +协议号一起标识</p><p>ipv6报文，报文头和可选的扩展报头组成，需要就带，不需要就不带</p><p><strong>一样的</strong></p><p>ipv4报文头中的Time to Live 和ipv6和 Hop limit 一样都是防环的</p><p>​                            Protocol                        Next Header    标识协议号的 v6的报文头下一个报文头就是协议</p><p>ipv6的拓展报头是跟在ipv6基本报文头后面的可选报文头，可以有一个或者多个</p><p>ict视频截屏 ：（封装安全有效载荷扩展报头相当于加密报头）</p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/Screenshot_20211118_091323_com.baidu.netdisk.jpg" alt="拓展报文头"></p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/Screenshot_20211118_091750_com.baidu.netdisk.jpg" alt="ict培训_ipv6地址类型"></p><p><strong>ipv6没有定义广播地址</strong></p><p><strong>组播地址 地址范围是 FF00::/8     其中FF02::1描述的是链路本地范围内的所有节点     FF02::2描述的是链路本地范围内所有的路由器</strong></p><p><strong>全球唯一单播地址类似于ipv4的公网地址</strong></p><p><strong>唯一本地地址类似于ipv4的私网地址</strong></p><p><strong>未指定地址类似于ipv4的0.0.0.0 可以当作默认路由使用       全0</strong></p><p><strong>回环地址类似于ipv4的127.0.0.0/8表示本机     前127位全0 最后一位是1</strong></p><p><strong>新增链路本地地址   会自动生成只能在本链路之间进行通信</strong></p><p><strong>2开头的和3开头的都是全球单播地址</strong></p><p><strong>任波地址的地址区间没有特意规定，跟全球单播地址是在一个区间，指定全球地址时要进行单播和任波地址的明确指定         提供相同服务的不同服务器，实现业务冗余</strong></p><h3 id="ipv6地址生成方式"><a href="#ipv6地址生成方式" class="headerlink" title="ipv6地址生成方式"></a>ipv6地址生成方式</h3><p><strong>1、手动配置</strong></p><p><strong>2、dhcp服务器去分配，类似于ipv4场景DHCP获取，部署dhcpv6服务器</strong></p><p>ipv6没有广播地址 所以要想知道dhcpv6服务器的地址就要通过，预先设置的  目的地址为ff02::1:2这个地址的报文只有运行了dhcpv6的服务器才能接受</p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/Screenshot_20211118_095917_com.baidu.netdisk.jpg" alt="分配过程"></p><p><strong>3、无状态地址配置</strong></p><p>ipv6的前缀是由网关告诉</p><p>主机发送RS报文（问网关前缀是啥）路由器发送RA报文（返回光管前缀）</p><p>接口位是由EUI-64根据mac地址生成</p><p>mac地址是48位地址</p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/Screenshot_20211118_100643_com.baidu.netdisk.jpg" alt="EUI-64规范"></p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/Screenshot_20211118_102128_com.baidu.netdisk.jpg" alt="视频截图_生成方式"></p><h3 id="ipv6路由基础"><a href="#ipv6路由基础" class="headerlink" title="ipv6路由基础"></a>ipv6路由基础</h3><p>ospfv2只能使用在ipv4下</p><p>ospfv3只能使用在ipv6下</p><p>ff02::5是为ospfv3路由协议预留的ipv6组播地址</p><p>ospfv3中的router id 必须手动设置，不设置没办法正常设置 下一条是链路本地地址不是全球单播地址</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="掌握静态的ipv6地址的配置方法"><a href="#掌握静态的ipv6地址的配置方法" class="headerlink" title="掌握静态的ipv6地址的配置方法"></a>掌握静态的ipv6地址的配置方法</h3><h4 id="配置静态link-local地址-链路本地地址"><a href="#配置静态link-local地址-链路本地地址" class="headerlink" title="配置静态link-local地址 链路本地地址"></a>配置静态link-local地址 链路本地地址</h4><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ipv6 int 0/0/1ipv6 enableipv address auto link-local dis ipv6 int b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/image-20211118145148862.png" alt="显示链路本地地址"></p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/image-20211118145326458.png" alt="AR2ping AR1"></p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/image-20211118145355675.png" alt="AR3ping AR1"></p><p>由此可以看出链路本地地址只能在本链路内进行访问，别的链路是不能访问得到</p><p>配置静态路由</p><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1ipv add 2000:0012::2 64int g 0/0/0ipv add 2000:0023::2 64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="掌握dhcpipv6服务的配置方法"><a href="#掌握dhcpipv6服务的配置方法" class="headerlink" title="掌握dhcpipv6服务的配置方法"></a>掌握dhcpipv6服务的配置方法</h3><p>[AR2]作为dhcpv6服务器</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dhcp enabledhcpv6 pool plyzaddress prefix 2000:0023::/64dns-server 2000:0023::2qint g 0/0/0dhcpv6 server plyzq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR3]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dhcp enableint g 0/0/0ipv6 enableipv6 address auto dhcpdis ipv6 int b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/image-20211118150923868.png" alt="AR3显示获取的ipv6地址"></p><p>dhcpv6服务器不会为dhcpv6客户端分配ipv6网关地址</p><p>当客户机为有状态方式的时候，客户机但可以通过</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ipv6 address auto global default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取到ipv6网关</p><p>当配置客户机为无状态的时候客户端就需要命令学习全球单播地址，ipv6网关缺省的路由，</p><p>[服务器]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1undo ipv6 nd ra halt ipv6  nd autoconfig managed-address-flag ipv6 na autoconfig other-flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>undo ipv6 nd ra halt 用来是系统能发送ra报文功能，默认路由状态下是不会发送的</p><p>ipv6  nd autoconfig managed-address-flag  用来设置ra报文中有状态自动配置的标志位，默认不设置</p><p>​                如果设置了该标志位则主机通过有状态获取ipv6地址</p><p>​                如果清楚了该标志位则主机通过无状态获取ipv6地址，发布ipv6的前缀信息</p><p>ipv6 na autoconfig other-flag 用来设置RA报文当中的有状态的自动配置的其他信息的标志位，默认不设立该标志位</p><p>​                如果设置该标志位，则主机可通过有状态自动配置获得除ipv6地址以外的其他配置信息，</p><p>​                包括路由器生存时间，邻居冲床时间，链路的MTU信息</p><p>​                如果清除了该标志位，，则主机进行无状态的自动配置，即路由设别通过RA报文向主机发                布除ipv6地址外的配置信息，包括路由器生存时间，路由器生存时间，邻居到达时间，邻                居的重传时间，链路的MTU信息</p><h3 id="掌握无状态地址配置方法"><a href="#掌握无状态地址配置方法" class="headerlink" title="掌握无状态地址配置方法"></a>掌握无状态地址配置方法</h3><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1ipv6 add auto global <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1undo ipv6 nd ra halt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在只有ipv6地址。其他参数还是没有  ； 1、手动配置  2、dhcp配置</p><p><img src="/2021/11/16/ensp-xue-xi-di-shi-san-dan-jian-dan-ipv6-wang-luo/image-20211118152440301.png" alt="不应该由0/0/0的信息"></p><h3 id="掌握ipv6静态路由的配置方法"><a href="#掌握ipv6静态路由的配置方法" class="headerlink" title="掌握ipv6静态路由的配置方法"></a>掌握ipv6静态路由的配置方法</h3><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ipv6 route-static 2000:23:: 64 2000:12::2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="掌握ipv6相关信息查看方法"><a href="#掌握ipv6相关信息查看方法" class="headerlink" title="掌握ipv6相关信息查看方法"></a>掌握ipv6相关信息查看方法</h3><p>查看邻居</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dis ipv6 neighbors <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ipv6中ospfv3的配置"><a href="#ipv6中ospfv3的配置" class="headerlink" title="ipv6中ospfv3的配置"></a>ipv6中ospfv3的配置</h3><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ospfv3 1router-id 1.1.1.1qint g 0/0/1ospfv3 1 area 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ospfv3 1router-id 2.2.2.2int g 0/0/1ospfv3 1 area 0.0.0.0int g 0/0/0ospfv3 1 area 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR3]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ospfv3 1router-id 3.3.3.3int g 0/0/0ospfv3 1 area 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dis ospfv3 peer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第十二弹广域网配置</title>
      <link href="2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/"/>
      <url>2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="广域网配置"><a href="#广域网配置" class="headerlink" title="广域网配置"></a>广域网配置</h1><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/G_topo.jpg" alt="实验拓扑"></p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h2 id="hdlc协议"><a href="#hdlc协议" class="headerlink" title="hdlc协议"></a>hdlc协议</h2><p>更改链路的时钟频率为 128000bit/s</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 1/0/0link-protocol hdvirtualbaudrate 128000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="lcp阶段"><a href="#lcp阶段" class="headerlink" title="lcp阶段"></a>lcp阶段</h2><p>点对点通信双方主要进行的链路层协议，通过lcp报文交互实现ppp接口的mru值，魔术字，是否认证，以及采用哪种认证方式，是否进行首部压缩，是否进行链路绑定</p><p>魔术字—检测ppp链路是否存在环路</p><h3 id="ppp基本配置"><a href="#ppp基本配置" class="headerlink" title="ppp基本配置"></a>ppp基本配置</h3><p><strong>link-protocol ppp 将接口协议改为ppp,华为串行接口的默认封装协议为ppp</strong></p><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 0/0/1link-protocol pppy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 0/0/1link-protocol pppyint s 0/0/3link-portocol pppy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 0/0/3link-protocol pppy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ppp链路的pap认证的配置方法"><a href="#ppp链路的pap认证的配置方法" class="headerlink" title="ppp链路的pap认证的配置方法"></a>ppp链路的pap认证的配置方法</h3><p>这个首先要在被认证端配置用户名和密码；在认证端的aaa数据库下要配置用户名和密码，配置AR1配置为认证方</p><p><strong>pap认证过程，中有用户名和密码在数据链路中传输，能通过抓包获取，不安全，chap更加的安全</strong></p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/G_pap%E8%AE%A4%E8%AF%81.jpg" alt="pap认证过程"></p><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">interface Serial0/0/1link-protocol pppppp pap local-user lyz password cipher lyz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 0/0/1link-protocol pppppp authentication-mode papaaalocal-user lyz password cipher lyzlocal-user lyz service-type ppp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检测AR1和AR2之间的连通性，可以通过debug功能查看pap认证报文的交互</p><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">return debugging ppp pap packetterminal debuggingdis debuggingsysint s 0/0/1shutdownundo shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会显示</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">Nov 16 2021 17:52:46.450.1-08:00 AR1 PPP/7/debug2:  PPP Packet:       Serial0/0/1 Input  PAP(c023) Pkt, Len 16       State ServerListen, code Request(01), id 1, len 12       Host Len:  3  Name:lyz       Pwd Len:  3  Pwd:lyzNov 16 2021 17:52:46.450.2-08:00 AR1 PPP/7/debug2:  PPP Packet:       Serial0/0/1 Output PAP(c023) Pkt, Len 52       State WaitAAA, code Ack(02), id 1, len 48       Msg Len: 43  Msg:Welcome to use Quidway ROUTER, Huawei Tech.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭debug</p><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">undo debugging all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ppp链路的chap认证的配置方法"><a href="#ppp链路的chap认证的配置方法" class="headerlink" title="ppp链路的chap认证的配置方法"></a>ppp链路的chap认证的配置方法</h3><p>配置AR3为chap认证方</p><p><strong>相较于pap更加的安全</strong></p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/G_chap%E8%AE%A4%E8%AF%81.jpg" alt="chap的认证过程"></p><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">interface Serial0/0/3 ppp chap user lyz ppp chap password cipher lyz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[AR3] 认证方</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 0/0/3ppp authentication-mode chapqaaa local-user lyz password cipher lyzlocal-user lyz service-type ppp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">shutdownundo shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>抓包结果</p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/G_chap%E8%AE%A4%E8%AF%81%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%9C.jpg" alt="chap抓包结果"></p><p>也可通过debugging命令查看建立协商过程</p><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 0/0/3shutdownreturndebugging ppp chap allterminal debuggingdis debuggingsysint s 0/0/3undo shutdownreturnundo debugging all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/image-20211116184224516.png" alt="undo之后显示信息"></p><p><strong>两种认证的配置过程虽然是一样的但是，两种认证方式的认证过程那是大不一样</strong></p><h2 id="ncp阶段"><a href="#ncp阶段" class="headerlink" title="ncp阶段"></a>ncp阶段</h2><h3 id="静态地址协商"><a href="#静态地址协商" class="headerlink" title="静态地址协商"></a>静态地址协商</h3><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/61EDADEEE71AA51DA56A2E654F408C17-16371172668811.png" alt="地址协商过程"></p><p>在AR3的S 0/0/3接口下进行抓包可以得到如下图所示中间</p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/image-20211117105113110.png" alt="第一个Con Request包"></p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/image-20211117105318266.png" alt="第二个Con Request包"></p><h3 id="动态地址协商"><a href="#动态地址协商" class="headerlink" title="动态地址协商"></a>动态地址协商</h3><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/EFE03B11361D189D5DFCCAEA92907C15.png" alt="动态地址协商过程"></p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/image-20211117112011413.png" alt="实验拓扑图_2"></p><p>这个在一般的模式下是没有Serial接口的有要想使用Serial接口那就需要<strong>在路由器关闭的情况下，找到2SA将他拖进上边的框内就会有Serial接口，从左边数是1/0/?-n/0/?</strong></p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/image-20211117112342579.png" alt="拉完效果图"></p><p>[AR12]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int s 1/0/0ip add 10.0.0.2remote address 10.0.0.1 ### 也可以使用remote address pool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用地址池进行IP分配，地址池创建在nat有涉及</p><p>[AR11]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">interface Serial1/0/0link-protocol pppip address ppp-negotiate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/image-20211117113428490.png" alt="AR11动态IP"></p><h1 id="PPPOE原理及配置"><a href="#PPPOE原理及配置" class="headerlink" title="PPPOE原理及配置"></a>PPPOE原理及配置</h1><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/EDD03B42FB8E99F6303FAD326BDBB361-16371207212463.png" alt="pppoe原理"></p><h2 id="pppoe应用场景"><a href="#pppoe应用场景" class="headerlink" title="pppoe应用场景"></a>pppoe应用场景</h2><p>pppoe服务器实现了在以太网提供点到点的链接，pppoe客户端与pppoe服务器端之间建立了pppoe对话封装ppp数据报文，为以太网上的主机提供接入服务，实现用户控制和计算，在企业网络和运营商网络中应用广泛。为每一个客户机分配一个逻辑的会话id</p><h2 id="pppoe的会话建立"><a href="#pppoe的会话建立" class="headerlink" title="pppoe的会话建立"></a>pppoe的会话建立</h2><h3 id="pppoe的发现阶段"><a href="#pppoe的发现阶段" class="headerlink" title="pppoe的发现阶段"></a>pppoe的发现阶段</h3><p>通过发送 （PADI PADO PADR PADS）发现服务器，选择服务器，并且建立于服务器建立唯一的点到点的会话（Session id) </p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/E5E4BB788EC5D7C066D80C8FB85556CC.png" alt="发现阶段"></p><h3 id="pppoe的会话阶段"><a href="#pppoe的会话阶段" class="headerlink" title="pppoe的会话阶段"></a>pppoe的会话阶段</h3><p>pppoe客户端和pppoe的服务器端会进行ppp协商，分为lcp协商，认证协商，ncp协商</p><h3 id="pppoe的终结阶段"><a href="#pppoe的终结阶段" class="headerlink" title="pppoe的终结阶段"></a>pppoe的终结阶段</h3><p>当pppoe客户端希望关闭连接时，会向pppoe服务器端发送一个PADT报文，用于关闭链接</p><p>同样，当服务器端要关闭连接时，也会向客户端发送一个PADT报文</p><p><strong>PADT报文通过携带的Session id值来识别需要关闭的会话</strong></p><p><img src="/2021/11/13/ensp-xue-xi-di-shi-er-dan-guang-yu-wang-pei-zhi/Screenshot_20211117_124652_com.baidu.netdisk.jpg" alt="老师总结"></p><h2 id="pppoe配置"><a href="#pppoe配置" class="headerlink" title="pppoe配置"></a>pppoe配置</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第十一弹dhcp配置</title>
      <link href="2021/11/12/ensp-xue-xi-di-shi-yi-dan-dhcp-pei-zhi/"/>
      <url>2021/11/12/ensp-xue-xi-di-shi-yi-dan-dhcp-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="dhcp基础配置实验"><a href="#dhcp基础配置实验" class="headerlink" title="dhcp基础配置实验"></a>dhcp基础配置实验</h1><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>动态主机配置协议DHCP是一种集中对用户进行IP地址进行动态管理的和配置的技术，通过DHCP也可以使后续添加网路设备变得更加的简单和快捷</p><p>dhcp协议由rfc2131定义，采用客户端/服务器通信模式，由客户端向服务器提出申请，服务器可以提供两种分配机制</p><p>1、动态分配机制：通过DHCP作为主机分配一个使用期限（通常叫做租期）的IP地址，这种适用于需要临时接入网络或者空闲地址数小于网络主机总数，且主机不需要永久连接网络的场景</p><p>2、静态分配机制：管理员通过DHCP为指定主机分配固定的IP地址。相比手工静态的IP地址DHCP方式静态分配机制避免人工配置的错误，方便统一管理</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><img src="/2021/11/12/ensp-xue-xi-di-shi-yi-dan-dhcp-pei-zhi/dhcp_topo.jpg" alt="实验拓扑图"></p><h3 id="配置dhcp服务端"><a href="#配置dhcp服务端" class="headerlink" title="配置dhcp服务端"></a>配置dhcp服务端</h3><h4 id="接口地址池"><a href="#接口地址池" class="headerlink" title="接口地址池"></a>接口地址池</h4><p>[R2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dhcp enableint g 0/0/1dhcp select interfacedhcp server dns-list 10.0.12.2dhcp server lease day 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dhcp select int 用来采用接口地址池的DHCP server功能</p><p>dhcp server dns-list 10.0.23.2 是用来指定接口地址池下的dns地址最多配置8个IP，用空格隔开</p><h4 id="全局地址池"><a href="#全局地址池" class="headerlink" title="全局地址池"></a>全局地址池</h4><p>[R2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ip pool GlobalPoolnetwork 10.0.23.0 mask 24dns-list 10.0.23.2 gateway-list 10.0.23.2lease day 2 hour 2static-bind ip-address 10.0.23.3 mac-address 00e0-fc62-30bdint g 0/0/0 dhcp select global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>netowrk 用来配置全局地址下能分配的IP网段地址</p><p>gateway-list 为dhcp客户端配置出口网关地址 ，客户端会生成一条默认的路由下一跳的IP地址为10.0.23.2</p><p>lease 用来配置地址池下的租期，当租期设置成unlimited时，代表无限期，没有配置的情况下那就是一天</p><p>static-bind 用来dhcp服务器全局地址下的IP地址和mac地址进行绑定mac的获取方法</p><p>[R3]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dis bridge mac-address <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置dhcp客户端"><a href="#配置dhcp客户端" class="headerlink" title="配置dhcp客户端"></a>配置dhcp客户端</h3><p>[R1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1ip add dhcp-alloc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[R3]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/0ip add dhcp-alloc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/11/12/ensp-xue-xi-di-shi-yi-dan-dhcp-pei-zhi/dhcp_R1%E6%88%90%E5%8A%9F.jpg" alt="dhcp_R1成功"></p><p><img src="/2021/11/12/ensp-xue-xi-di-shi-yi-dan-dhcp-pei-zhi/dhcp_R3%E6%88%90%E5%8A%9F.jpg" alt="dhcp_R3成功"></p><p><a href="https://blog.csdn.net/qq_45089570/article/details/105520111">dhcp配置 csdn参考</a></p><p><a href="https://blog.csdn.net/tryheart/article/details/107792913">参考2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第十弹ftp基础配置实验</title>
      <link href="2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/"/>
      <url>2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="ftp基础配置实验"><a href="#ftp基础配置实验" class="headerlink" title="ftp基础配置实验"></a>ftp基础配置实验</h1><p><img src="/2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/ftp_topo.jpg" alt="实验拓扑"></p><p>AR1作为客户机    AR2作为服务机 路由器选择AR3260</p><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>设备支持多种的文件管理方式，用户根据任务和安全性要求选择合适的文件管理方式。</p><p>方式有：1、直接登录系统；2、FTP；3、TFTP；4、SFTP</p><p>设备作为服务器：可以从客户端访问设备，实现对本地文件的管理，以及与客户端间的文件传输操作</p><p>设备作为客户机：可以管理其他设备（服务器）上的文件，以及文件的传输操作</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="配置服务端的ftp功能以及参数"><a href="#配置服务端的ftp功能以及参数" class="headerlink" title="配置服务端的ftp功能以及参数"></a>配置服务端的ftp功能以及参数</h3><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/0ip add 10.0.12.1 24return save test1.cfg #保存配置文件 dir  #查看当前文件列表（要在用户视图下）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/ftp_AR1_dir.jpg" alt="AR1的文件列表"></p><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/0ip add 10.0.12.2 24return save test2.cfgdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/ftp_AR2_dir.jpg" alt="AR2的文件列表"></p><h3 id="配置本地ftp用户"><a href="#配置本地ftp用户" class="headerlink" title="配置本地ftp用户"></a>配置本地ftp用户</h3><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ftp server enable#配置本地用户aaalocal-user ftp_client password cipher ftp_clientlocal-user ftp_client service-type ftplocal-user ftp_client privilege level 15local-user ftp_client ftp-directory flash:/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置的等级必须在三级以上要不然ftp链接不成功</p><h3 id="客户端访问服务器"><a href="#客户端访问服务器" class="headerlink" title="客户端访问服务器"></a>客户端访问服务器</h3><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ftp 10.0.12.2 ftp_clientftp_client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/ftp_%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.jpg" alt="ftp登录"></p><h3 id="客户端进行文件操作"><a href="#客户端进行文件操作" class="headerlink" title="客户端进行文件操作"></a>客户端进行文件操作</h3><p>文件操作有两种格式 ASCLL和Binary </p><p>ASCLL用于传输纯文本文件 Binary用于传输系统软件，图形图像，声音影像，压缩文件，数据库等程序文件</p><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ascllget test2.cfgdelete test2.cfgput test1.cfgbye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/ftp_AR1%E7%BB%93%E6%9E%9C.jpg" alt="AR1结果"></p><p><img src="/2021/11/12/ensp-xue-xi-di-shi-dan-ftp-ji-chu-pei-zhi-shi-yan/ftp_AR2%E7%BB%93%E6%9E%9C.jpg" alt="AR2结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第九弹网络地址转换</title>
      <link href="2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/"/>
      <url>2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="网络地址转换配置实验"><a href="#网络地址转换配置实验" class="headerlink" title="网络地址转换配置实验"></a>网络地址转换配置实验</h1><p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_1.jpg" alt="实验拓扑图"></p><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>网络</p><p>地址转换nat(network address translation)是将IP书记报文头中的IP地址转换到另一个IP地址的过程，作为减缓IP地址枯竭的一种过渡方案，nat通过地址重用的方法满足IP地址的需要，可以一定程度上缓解IP地址空间的压力。nat除了解决IP地址短缺的问题还带来了两个好处：</p><p>1、有效的避免了来自外网的攻击，可以很大程度上提高网络安全性</p><p>2、控制内网主机访问外网，同时也可以控制外网主机访问内网，解决了涅王和外网不能互通的问题</p><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R1]int g 0/0/0 ip add 192.168.1.1 24ip route-static 0.0.0.0 0 192.168.1.254[R2]int g 0/0/0 ip add 192.168.1.254 24int g 0/0/1    ip add 1.2.3.4 24    ip route-static 0.0.0.0 0 1.2.3.254[R3]int g 0/0/1ip add 1.2.3.254 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候是R1ping不到R3的,但是R2能ping到R3</p><p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_2.jpg" alt="R1ping不到R3"></p><p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_3.jpg" alt="R2能ping到R3"></p><h3 id="动态nat配置"><a href="#动态nat配置" class="headerlink" title="动态nat配置"></a>动态nat配置</h3><p>[R1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">user-interface vty 0 4authentication-mode aaaaaalocal-user test password cipher testlocal-user test service-type telnetlocal-user test privilege level 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[R3]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">user-interface vty 0 4 authentication-mode aaaaaalocal-user test password cipher testlocal-user test service-type telnetlocal-user test privilege level 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候R1是不能ping通R3的因为现在R3没有配置到192.168.1.0/24网段的路由，实际情况下R3也是不能配置私网网段的路由</p><p>现在假设该公司所获得公网IP是1.2.3.10~1.2.3.20,配置动态nat</p><p>[R2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">nat address-group 1 1.2.3.10 1.2.3.20acl 2000rule 5 permit source anyint g 0/0/1nat outbround 2000 address-group 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候动态nat配置就算完成了</p><p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_4.jpg" alt="R1ping和telnet R3"></p><p>[R2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dis nat session all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_5.jpg" alt="连接信息"></p><h3 id="Easy-ip-配置方法"><a href="#Easy-ip-配置方法" class="headerlink" title="Easy ip 配置方法"></a>Easy ip 配置方法</h3><p>[R2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1 undo nat outbround 2000 address-group 1nat outbround 2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_easyip_6.jpg" alt="R1ping和telnet R3"></p><h3 id="Nat-server配置"><a href="#Nat-server配置" class="headerlink" title="Nat server配置"></a>Nat server配置</h3><p>现在R3要向公网上提供网络服务 ，由于R3没有公网地址 所以需要R2的出接口上配置nat server</p><p>[R2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1nat server protocol tcp global current-interface 2323 inside 192.168.1.1 telnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>nat server</strong>命令用来定义一个内部服务器的映射表，外部用户可以通过地址和端口转换来访问内部服务器的某项服务。配置内部服务器可以使外部网络<strong>主动</strong>访问私网中的服务器。当外部网络向内部服务器的外部地址（global-address）发起连接请求时，NAT将该请求的目的地址替换为私网地址（inside-address）后，转发给私网内的服务器。</p><p>[R3]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">telnet 1.2.3.4 2323<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[R2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">dis nat session all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_natserver_1.jpg" alt="nat会话表"></p><img src="/2021/11/08/ensp-xue-xi-di-jiu-dan-wang-luo-di-zhi-zhuan-huan/nat_natserver_1.jpg" alt="改完测试">]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第八弹AAA配置</title>
      <link href="2021/11/07/ensp-xue-xi-di-ba-dan-aaa-pei-zhi/"/>
      <url>2021/11/07/ensp-xue-xi-di-ba-dan-aaa-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="本地AAA配置实验"><a href="#本地AAA配置实验" class="headerlink" title="本地AAA配置实验"></a>本地AAA配置实验</h1><p><img src="/2021/11/07/ensp-xue-xi-di-ba-dan-aaa-pei-zhi/AAA_1.jpg" alt="实验拓扑"></p><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>AAA是Authentication（认证）、Authorization（授权）和Accounting（计费）的简称，是网络安全的一种管理机制，提供了认证、授权、计费三种安全功能。</p><p>这三种安全功能的具体作用如下：</p><p>• 认证：验证用户是否可以获得网络访问权。</p><p>• 授权：授权用户可以使用哪些服务。</p><p>• 计费：记录用户使用网络资源的情况。</p><p>AAA是一个管理框架，他提供授权用户去访问特定的资源，同时记录这些用户的操作行为的一种安全机制。最常使用RADIUS协议</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1、配置IP"><a href="#1、配置IP" class="headerlink" title="1、配置IP"></a>1、配置IP</h3><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R1]int g 0/0/0ip add 10.0.12.1 24[R2]int g 0/0/0ip add 10.0.12.2 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、配置AAA方案"><a href="#2、配置AAA方案" class="headerlink" title="2、配置AAA方案"></a>2、配置AAA方案</h3><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R2]aaa#进入aaa视图authentication-scheme lyz #创建认证方案 名字为lyz  authentcation-mode local #设置认证方式为本地认证authorization-scheme lyz #创建授权方式 名字为lyzauthorization-mode local #设置认证方式为本地认证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地AAA服务器支持用户进行认证和授权，不支持对用户进行计费；于远端AAA服务器相似，本地AAA服务器也要配置 ：用户名，密码，授权信息等。但是使用本地比远端快可以降低运营成本，但是储存的信息受硬件设备的限制。</p><h3 id="3、创建域，并在域下应用AAA方案"><a href="#3、创建域，并在域下应用AAA方案" class="headerlink" title="3、创建域，并在域下应用AAA方案"></a>3、创建域，并在域下应用AAA方案</h3><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R2]aaadomain lyz#创建作用域 名字为lyz    authentication-scheme lyz#指定域内认证方案为lyz    authorization-scheme lyz#指定域内授权方案为lyz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、创建本地用户"><a href="#4、创建本地用户" class="headerlink" title="4、创建本地用户"></a>4、创建本地用户</h3><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R2]aaalocal-user l@yz password cipher lyz #创建用户和密码local-user l@yz service-type telnet #配置接入类型local-user l@yz privilege level 3 #级别等参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用户名中带域名分隔符“@”，则认为@前面的部分是纯用户名，后面部分是域名。如果没有@，则整个字符串为用户名，域为默认域。</p><h3 id="5、开启telent服务，并验证配置效果"><a href="#5、开启telent服务，并验证配置效果" class="headerlink" title="5、开启telent服务，并验证配置效果"></a>5、开启telent服务，并验证配置效果</h3><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R2]telnet server enableauthentication-mode aaa[R1] telnet 10.0.12.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/07/ensp-xue-xi-di-ba-dan-aaa-pei-zhi/AAA_2.jpg" alt="R1访问R2"></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R2]dis users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/07/ensp-xue-xi-di-ba-dan-aaa-pei-zhi/AAA_3.jpg" alt="R2查看登录的用户"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第七弹acl</title>
      <link href="2021/11/05/ensp-xue-xi-di-qi-dan-acl/"/>
      <url>2021/11/05/ensp-xue-xi-di-qi-dan-acl/</url>
      
        <content type="html"><![CDATA[<h1 id="访问控制列表"><a href="#访问控制列表" class="headerlink" title="访问控制列表"></a>访问控制列表</h1><p>基本acl 编号2000-2999   高级acl编号3000-3999</p><h2 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="实验拓扑图"></a>实验拓扑图</h2><p><img src="/2021/11/05/ensp-xue-xi-di-qi-dan-acl/acl_1.jpg" alt="实验拓扑图"></p><p>改为使用AR2220</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>访问控制列表acl是由一条或者多条的规则组成的集合，规则就是描述报文匹配条件的判断语句，这些条件包括报文的源地址，目的地址，端口号。</p><p>acl实质上是一种报文过滤器，规则就是这个过滤器的滤芯。设备基于这些自己创建的规则进行报文匹配，可以过滤出特定的报文，并根据应用acl模块处理策略来允许和阻止该报文的通过</p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="1、配置个个路由器端口的IP地址"><a href="#1、配置个个路由器端口的IP地址" class="headerlink" title="1、配置个个路由器端口的IP地址"></a>1、配置个个路由器端口的IP地址</h3><p>​    给R1配置两个回环地址</p><p>​    0 ： 10.4.1.1 24</p><p>​    1：  10.5.1.1 24</p><p>​     并使用ospf使链路互通</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R1]ospf 1area 0network 10.1.1.1 0.0.0.0network 10.4.1.1 0.0.0.0network 10.5.1.1 0.0.0.0[R2]ospf 1area 0network 10.1.1.2 0.0.0.0network 10.1.3.2 0.0.0.0[R3]ospf 1area 0network 10.1.3.3 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、配置acl-匹特定的流量"><a href="#2、配置acl-匹特定的流量" class="headerlink" title="2、配置acl 匹特定的流量"></a>2、配置acl 匹特定的流量</h3><p>配置有一条默认的规则 那就是</p><p>​            基础acl要尽可能的靠近目的端口 </p><p>​                    尽可能的让每一条报文都到达目的端口</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[Huawei-acl-basic-2000] rule [ rule-id ] { deny | permit } [ source { source-address source-wildcard | any } | time-range time-name ] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​            高级acl要尽可能的靠近源端口</p><p>​                    不浪费网络资源</p><p>当参数protocol为IP时</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">rule [ rule-id ] { deny | permit } ip [ destination { destination-address destination-wildcard | any } | source { source-address source-wildcard | any } | time-range time-name | [ dscp dscp | [ tos tos | precedence<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当参数protocol为TCP时</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">rule [ rule-id ] { deny | permit } { protocol-number | tcp } [ destination { destination-address destination-wildcard | any } | destination-port { eq port | gt port | lt port | range port-start port-end } | source { source-address source-wildcard | any } | source-port { eq port | gt port | lt port | range port-start port-end } | tcp-flag { ack | fin | syn } * | time-range time-name ] *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置R3为telent服务器</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R3]telent server enableuser-interface vty 0 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>user-interface 用来进入一个用户界面或者多个用户界面试图</p><p>VTY 用户界面  用来管理或者 监控通过的telent或者ssh方式登录的用户</p><h4 id="在R3上配置acl"><a href="#在R3上配置acl" class="headerlink" title="在R3上配置acl"></a>在R3上配置acl</h4><p>permit是允许通过该报文</p><p>deny是抛弃该报文</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R3]user-interface vty 0 4user privilege level 3    set authentication password cipher lyz    acl 3000  rule 5 permit tcp source 10.4.1.1 0.0.0.0 destination 10.1.3.3 0.0.0.0 destination-port eq 23  rule 10 deny tcp source anyuser-interface vty 0 4acl 3000 inbound[R1]telnet -a 10.4.1.1 10.1.3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>规则的默认步长是5，目的就是为了以后在往中间去添加规则，如果五个不够添加的话，但是还是必须要往前面添加，那就只能全部删了重新来</p><p><img src="/2021/11/05/ensp-xue-xi-di-qi-dan-acl/acl_2.jpg" alt="acl 3000"></p><h4 id="在R2上配置acl"><a href="#在R2上配置acl" class="headerlink" title="在R2上配置acl"></a>在R2上配置acl</h4><p>已解决！！！</p><p>尽量使用AR2220，AR2240或者AR3260设备。 AR201基本都是二层口吧</p><p>使用router不支持命令201也是不支持命令traffic-filter inbound acl 3001</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">acl 3001 rule 5 permit tcp source 10.4.1.1 0.0.0.0 destination 10.1.3.3 0.0.0.0 destination-port eq 23 rule 10 deny tcp source any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 0/0/1端口进行流量过滤</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R2]int g 0/0/1traffic-filter inbound acl 3001[R2]dis acl 3001[R1]telnet -a 10.4.1.1 10.1.3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、配置流量过滤"><a href="#3、配置流量过滤" class="headerlink" title="3、配置流量过滤"></a>3、配置流量过滤</h3><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R3]acl 3000 inbound[R2]traffic-filter inbound acl 3001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-qi-dan-acl/acl-3.jpg" alt="R1登录R3"></p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>R3 现在同时为telent和ftp服务器现在要求R1的loopback 0 接口地址能访问ftp服务，R1的loopback1接口访问telent服务</p><p>配置配置只能访问telent服务，就跟上面的步骤一样</p><p>配置只能访问ftp服务 </p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">rule 7 permit tcp source 10.5.1.1 0 destination 10.1.3.3 0 destination-port eq ftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就可以完成R1的另一个loopback接口只能访问ftp服务</p><p><img src="/2021/11/05/ensp-xue-xi-di-qi-dan-acl/acl_4.jpg" alt="ftp R1访问R3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第六弹vlan</title>
      <link href="2021/11/05/ensp-xue-xi-di-liu-dan-vlan/"/>
      <url>2021/11/05/ensp-xue-xi-di-liu-dan-vlan/</url>
      
        <content type="html"><![CDATA[<h1 id="vlan"><a href="#vlan" class="headerlink" title="vlan"></a>vlan</h1><h2 id="vlan基础配置"><a href="#vlan基础配置" class="headerlink" title="vlan基础配置"></a>vlan基础配置</h2><p><img src="/2021/11/05/ensp-xue-xi-di-liu-dan-vlan/vlan_1.jpg" alt="实验拓扑"></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">vlan 2vlan 3或者使用vlan batch 2 to 3 10int e 0/0/1 port link-type accessport default vlan 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vlan间通信"><a href="#vlan间通信" class="headerlink" title="vlan间通信"></a>vlan间通信</h2><p><img src="/2021/11/05/ensp-xue-xi-di-liu-dan-vlan/vlan_3.jpg" alt="实验拓扑"></p><h3 id="通过Dot1q终结子接口实现VLAN间互访"><a href="#通过Dot1q终结子接口实现VLAN间互访" class="headerlink" title="通过Dot1q终结子接口实现VLAN间互访"></a>通过Dot1q终结子接口实现VLAN间互访</h3><p>对R2 和R3的0/0/1端口配置IP </p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R2]int g 0/0/1ip add 192.168.2.1 24 ip router-static 0.0.0.0 0 192.168.2.254[R3]int g 0/0/1ip add 192.168.3.1 24ip router-static 0.0.0.0 0 192.168.3.254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在S1上划分vlan</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">vlan batch 2 3int g 0/0/2port link-type accessport default vlan 2int g 0/0/3port link-type accessport default vlan 3int g 0/0/1port link-type trunkport trunk allow-pass vlan 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在R1上创建并配置Dotlq终接子接口</p><p>• Dot1q终结子接口：子接口也是一种三层的逻辑接口。跟VLANIF接口一样，在子接口上配置Dot1q终结功能和IP地址后，设备也会添加相应的MAC表项并置位三层转发标志位，进而实现VLAN间的三层互通。Dot1q终结子接口适用于通过一个三层以太网接口下接多个VLAN网络的环境。</p><p><strong>dot1q termination vid</strong> <em>vlan-id</em>命令用来配置子接口Dot1q终结的VLAN ID。</p><p>当GigabitEthernet0/0/1接口收到带有VLAN 2标签的数据之后，会交由2号子接口进行VLAN终结操作并做后续处理。从2号子接口发出的数据也会带上VLAN 2的标签。</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R1]int g 0/0/1.2dot1q termination vid 2arp broadcast enableip address 192.168.2.254 24quitint g 0/0/1.3dot1q termination vid 3arp broadcast enableip address 192.168.3.254 24quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-liu-dan-vlan/vlan_2.jpg" alt="R2 ping R3"></p><h3 id="通过VLANIF接口实现VLAN间互访"><a href="#通过VLANIF接口实现VLAN间互访" class="headerlink" title="通过VLANIF接口实现VLAN间互访"></a>通过VLANIF接口实现VLAN间互访</h3><p>删除上一步的配置内容</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[S1]int g 0/0/1undo port trunk allow-pass vlan 2 3undo link-type[R1]undo int g 0/0/1.2undo int g 0/0/1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在S1上创建VLANIF接口</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int VLANIF 2ip add 192.168.2.254 24int VLANIF 3ip add 192.168.3.254 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-liu-dan-vlan/vlan_4.jpg" alt="R2上ping R3"></p><h1 id="hybird：混合端口，有access的特性，又有trunk的特性，你可以把他当作access使用，也可以当作trunk去使用"><a href="#hybird：混合端口，有access的特性，又有trunk的特性，你可以把他当作access使用，也可以当作trunk去使用" class="headerlink" title="hybird：混合端口，有access的特性，又有trunk的特性，你可以把他当作access使用，也可以当作trunk去使用"></a>hybird：混合端口，有access的特性，又有trunk的特性，你可以把他当作access使用，也可以当作trunk去使用</h1><p>大型的运营商网络会使用这种混合接口去，这种事更优的选择</p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第五弹链路聚合</title>
      <link href="2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/"/>
      <url>2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/</url>
      
        <content type="html"><![CDATA[<h1 id="以太网链路聚合实验"><a href="#以太网链路聚合实验" class="headerlink" title="以太网链路聚合实验"></a>以太网链路聚合实验</h1><h2 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h2><p>随着网络规模不断扩大，用户对骨干链路的带宽和可靠性提出越来越高的要求。在传统技术中，常用更换高速率的接口板或更换支持高速率接口板的设备的方式来增加带宽，但这种方案需要付出高额的费用，而且不够灵活。</p><p>采用链路聚合技术可以在不进行硬件升级的条件下，通过将多个物理接口捆绑为一个逻辑接口，达到增加链路带宽的目的。在实现增大带宽目的的同时，链路聚合采用备份链路的机制，可以有效的提高设备之间链路的可靠性。链路聚合技术主要有以下三个优势：</p><p>• 增加带宽：链路聚合接口的最大带宽可以达到各成员接口带宽之和。</p><p>• 提高可靠性：当某条活动链路出现故障时，流量可以切换到其他可用的成员链路上，从而提高链路聚合接口的可靠性。</p><p>• 负载分担：在一个链路聚合组内，可以实现在各成员活动链路上的负载分担。</p><p>本实验将通过手工和LACP模式的以太网链路聚合的配置，帮助学员了解以太网链路聚合技术的配置及原理。</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="实验拓扑图"></a>实验拓扑图</h3><p><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/1.jpg" alt="实验拓扑图"></p><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><h4 id="手工链路聚合"><a href="#手工链路聚合" class="headerlink" title="手工链路聚合"></a>手工链路聚合</h4><p>第一步所需要的交换机都要创建 Eth-Trunk 接口</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">interface Eth-Trunk 1mode manual load-balance #这个可以不用进行配置，默认的就是这个interface G 0/0/10eth-trunk 1interface G 0/0/11eth-trunk 1interface G 0/0/12eth-trunk 1dis eth-trunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">interface Eth-Trunk 1mode manual load-balancetrunkport G 0/0/10 to 0/0/12dis eth-trunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/2.jpg" alt="结果"></p><h4 id="LACP模式下的链路聚合"><a href="#LACP模式下的链路聚合" class="headerlink" title="LACP模式下的链路聚合"></a>LACP模式下的链路聚合</h4><p>首先就要删除刚才配置的Eth-Trunk 1下的成员接口</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">undo trunkport g 0/0/10 to 0/0/12mode lacptrunkport g 0/0/10 to 0/0/12dis eth-trunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/3.jpg" alt="结果"></p><h4 id="将0-0-10作为备用端口"><a href="#将0-0-10作为备用端口" class="headerlink" title="将0/0/10作为备用端口"></a>将0/0/10作为备用端口</h4><p>设置0/0/10 作为备用端口0/0/11作为主要转发端口0/0/12，并设置转发端口只设置两个少于两个直接关闭整个Eth-Trunk接口</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">lacp priority 100int g 0/0/10 lacp priority 40000int Eth-Trunk 1    least active-linknumber 2    max active-linknumber 2    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/4.jpg" alt="结果"></p><p>开启抢占功能</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int Eth-Trunk 1lacp preempt enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>lacp preempt enable</strong>命令用来使能LACP模式下LACP优先级抢占的功能，缺省情况下，优先级抢占处于禁止状态。,在抢占的时候只有在三十秒钟之后才会进行抢占</p><p>手工关闭0/0/12端口</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int G 0/0/12shutdowndis eth-trunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/5.jpg" alt="结果"></p><p>再关闭0/0/11端口</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int G 0/0/11shutdowndis eth-trunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/6.jpg" alt="结果"></p><p>重新打开0/0/12和0/0/11端口进行抢占</p><p><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/7.jpg" alt="打开瞬间"><img src="/2021/11/05/ensp-xue-xi-di-wu-dan-lian-lu-ju-he/8.jpg" alt="打开一段时间"></p><p>设置Eth-Trunk 1端口的负载模式为基于目的IP地址的</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int Eth-Trunk 1load-balance dis-ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第四弹stp生成树</title>
      <link href="2021/11/02/ensp-xue-xi-di-si-dan-stp-sheng-cheng-shu/"/>
      <url>2021/11/02/ensp-xue-xi-di-si-dan-stp-sheng-cheng-shu/</url>
      
        <content type="html"><![CDATA[<p>实验手册是华为实验手册 大标题实验二：生成树基础实验<br>实验的实验拓扑图如下<br><img src="/2021/11/02/ensp-xue-xi-di-si-dan-stp-sheng-cheng-shu/1.jpg" alt="实验拓扑图"></p><p><strong>实验拓扑图是错误的，中间的hub是不用连接的</strong></p><p>stp生成树协议</p><p>​    在根交换机上启用stp服务</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">stp enablestp mode stpstp cost 50000 #默认的是20000#启用rstp协议stp mode rstp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先stp协议，生成了树形通信之后在改用rstp不影响原来的树形结构<br>实验手册是华为实验手册 大标题实验二：生成树基础实验<br>实验的实验拓扑图如下<br><img src="/2021/11/02/ensp-xue-xi-di-si-dan-stp-sheng-cheng-shu/1.jpg" alt="实验拓扑图"></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">stp enablestp mode stp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int 端口stp cost 50000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成树协议</p><p>​    在根交换机上启用stp服务</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">stp enablestp mode stpstp cost 50000 #默认的是20000#启用rstp协议stp mode rstp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先stp协议，生成了树形通信之后在改用rstp不影响原来的树形结构</p><p><img src="/2021/11/02/ensp-xue-xi-di-si-dan-stp-sheng-cheng-shu/IMG_2361(20220118-164744).PNG" alt="IMG_2361(20220118-164744)"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络服务器配置之ftp</title>
      <link href="2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-ftp/"/>
      <url>2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-ftp/</url>
      
        <content type="html"><![CDATA[<p>服务器版本 rhel7.4<br>已经换完yum 阿里源 更新完系统(web页面有换源教程)<br>下载vsftp 客户端安装ftp或者直接使用网页进行访问</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">yum install vsftpd -yyum install ftp -ysystemctl start vsftpdsystemctl enable vsftpdfirewall-cmd --permanent --add-service=ftpfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端进行访问测试<br>没有下载ftp我是直接在浏览器进行的访问</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">ftp 192.168.1.100    Name:ftp    Password:空    cd pub #pub为默认的目录 密码默认为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-ftp/%E7%AC%AC%E4%B8%80%E8%AE%BF%E9%97%AE.jpg" alt="第一次访问"></p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">vim /etc/vsftpd/vsftpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>anonymous_enable=YES 允许匿名用户登录<br>local_enable=Yes 允许本地ftp访问<br>write_enable=Yes<br>local_umask=022<br>#anon_upload_enable=YES 匿名用户是否允许上传<br>添加用户以及用户名<br>服务器端</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">useradd lyz2001passwd kzy2001123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">ftp 192.168.1.100lyz2001123ls -la # 查看文件权限mkidir aaa    257 "/home/lyz2001/aaa" created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果创建不了</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">getsebool -a|grep ftp    ftp_home_dir --&gt;offsetsebool -P ftp_home_dir on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">cd /etc/vsftpd/ls    ftpusers user_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ftpsers中就是一些我们不允许登录的账户<br>在客户端可以通过设置可以允许用户进入服务器的所有区</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">cd / #可以进入服务器主目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过设置</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">chroot_local_user=YESchroot_list_enable=YES# (default follows)chroot_list_file=/etc/vsftpd/chroot_listvim /etc/chroot_list    lyz2001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有添加到chroot_list才会允许链接 没有添加的话就会拒绝访问</p><h1 id="匿名用户上传"><a href="#匿名用户上传" class="headerlink" title="匿名用户上传"></a>匿名用户上传</h1><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">vsftpd.conf    anon_upload_enable=YES    anon_mkdir_write_enable=YESsystemctl restart vsftpdsetsebool -P ftpd_anon_write on#才可以实现匿名ftp的写入#创建上传文件夹cd /var/ftp/mkdir incomingchown ftp incoming/ls -lZchcon -t public_content_rw_t incoming<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-ftp" data-language="ftp"><code class="language-ftp">ftp 192.168.1.100ftpmkdir aaa    失败cd incoming mkdir aaaput passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-ftp/2.jpg" alt="匿名上传完成"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络服务器配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络服务器配置之web</title>
      <link href="2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/"/>
      <url>2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/</url>
      
        <content type="html"><![CDATA[<p>服务器是rhel7.4<br>已经换完阿里源 更新完系统  <a href="https://blog.csdn.net/zidian666/article/details/123176352"> centos7换阿里源</a><br>根据视频内容进行操作<br>安装httpd软件包</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">yum install httpd -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动服务</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">systemctl start httpdsystemctl enable httpdsystemctl status httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置防火墙允许httpd通过防火墙</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">firewall-cmd --permanent --add-service=httpfirewall-cmd --reloadfirewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-http" data-language="http"><code class="language-http">getenforce    Enforcingsetenforce 0getenforce    Permissive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置ip地址 添加IP 我这个本来已经设置了静态IP 已经有一个ip地址了所以我就只是又添加了子端口号</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">ifconfig ens33:1 192.168.1.101<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改IP地址和主机名对应的列表问价</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">vim /etc/hosts    192.168.1.100   www.king.com www.lyz.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前期已经完成，默认网页的配置</p><h1 id="实训一"><a href="#实训一" class="headerlink" title="实训一"></a>实训一</h1><pre class="line-numbers language-http" data-language="http"><code class="language-http">cd /etc/httpd/conf.dvim userdir.conf注释 UserDir disabled将下面的UserDir public_html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建用户并进入创建的用户目录下</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">useradd user1cd /home/user1mkdir public_htmlcd public_htmlvim index.html    user1 homepage!chmod o+x /home/user1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过  ls -ld 文件夹名字  查看文件夹的读取和权限</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">systemctl restart httpdfirefox http://192.168.1.100<span class="token header-name keyword">http:</span>//192.168.1.100/~user1/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/1.jpg" alt="第一步结果"></p><h1 id="实训二"><a href="#实训二" class="headerlink" title="实训二"></a>实训二</h1><pre class="line-numbers language-http" data-language="http"><code class="language-http">mkdir /data/privatemkdir /data/private -pvim /data/private/index.html    private page!vim /etc/httpd/conf/httpd.conf    add        Alias /private /data/private        &lt;Directory "/data/private"&gt;            AllowOverride None            AuthType Basic            AuthName "Input user name:"            AuthUserFile /etc/httpd/conf/.htpaswd            Require valid-user        &lt;/Directory&gt;htpasswd -c /etc/httpd/conf/.htpasswd kingliu    liu     liusystemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-c 就是创建新的文件<br><img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/private%E8%AE%A4%E8%AF%81.jpg" alt="认证"> <img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/private%E5%86%85%E5%AE%B9.jpg" alt="内容"></p><h1 id="实训三"><a href="#实训三" class="headerlink" title="实训三"></a>实训三</h1><pre class="line-numbers language-http" data-language="http"><code class="language-http">mkdir /dir1/test/ -pvim /dir1/test/index.html    test page!vim /etc/httpd/conf/httpd.conf    Alias /test /dir1/test    &lt;Directory "/dir1/test"&gt;         AllowOverride None        Order allow,deny  #先允许后拒绝        Allow from lyz.com  #允许来自lyz.com或者192.168.1.0/24网段的链接        Allow from 192.168.1.0/24        Require all granted    &lt;/Directory&gt;systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果<br><img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/test%E5%86%85%E5%AE%B9.jpg" alt="test内容"></p><h1 id="实训四"><a href="#实训四" class="headerlink" title="实训四"></a>实训四</h1><pre class="line-numbers language-http" data-language="http"><code class="language-http">mkdir /var/www/ip100mkdir /var/www/ip101vim /var/www/ip100/index.html    ip100page!vim /var/www/ip101/index.html    ip101page!cd /etc/httpd/conf.d/vim vhost.conf #这个是默认没有的，是自己创建的    &lt;VirtualHost 192.168.1.100&gt;        DocumentRoot /var/www/ip100    &lt;/VirtualHost&gt;    &lt;VirtualHost 192.168.1.101&gt;        DocumentRoot /var/www/ip101    &lt;/VirtualHost&gt;      systemctl restart httpd             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果<br><img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/ip100.jpg" alt="ip100"> <img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/ip101.jpg" alt="ip101"></p><h1 id="实训五"><a href="#实训五" class="headerlink" title="实训五"></a>实训五</h1><pre class="line-numbers language-http" data-language="http"><code class="language-http">mkdir /var/www/lyzmkdir /var/www/kingvim /var/www/lyz/index.html    lyz.com pagevim /var/www/king/index.html    king.com pagecd /etc/httpd/conf.d/vim vhost.conf     &lt;VirtualHost 192.168.1.100&gt;        DocumentRoot /var/www/lyz        ServerName www.lyz.com    &lt;/VirtualHost&gt;    &lt;VirtualHost 192.168.1.100&gt;        DocumentRoot /var/www/king        ServerName www.king.com    &lt;/VirtualHost&gt;  systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果<br><img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/lyz.jpg" alt="www.lyz.com"> <img src="/2021/10/31/wang-luo-fu-wu-qi-pei-zhi-zhi-web/king.jpg" alt="www.king.com"><br>重启之后会出现firbidden</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">setenforce 0getenforce    Permissive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 网络服务器配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第三弹ospf</title>
      <link href="2021/10/16/ensp-xue-xi-di-san-dan-ospf/"/>
      <url>2021/10/16/ensp-xue-xi-di-san-dan-ospf/</url>
      
        <content type="html"><![CDATA[<h1 id="ospf配置"><a href="#ospf配置" class="headerlink" title="ospf配置"></a>ospf配置</h1><p>主要命令</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/0 ip add 10.1.1.1 24...ospf 1area 0network 10.1.1.1 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ospf和rip协议的区别"><a href="#ospf和rip协议的区别" class="headerlink" title="ospf和rip协议的区别"></a>ospf和rip协议的区别</h2><h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><p>RIP 是一种基于距离向量的路由选择协议，它使用跳数（Hop Count）作为度量值来衡量到达目的地址的距离。直接相连的路由器跳数为 1。跳数最多为 15，超过则表示不可达。RIP 每隔30秒和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。应该是属于选择最短路径</p><h3 id="RIP优缺点："><a href="#RIP优缺点：" class="headerlink" title="RIP优缺点："></a>RIP优缺点：</h3><ol><li>RIP非常适合小型网络，它易于理解和配置，同时几乎所有路由器都支持它。但是 RIP的跳数限制为15，超出该距离则无法访问，限制了网络的规模。</li><li>RIP网络收敛速度非常慢，当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。由于RIP中的任何路由更新都会占用大量带宽，因此关键IT流程的资源受到限制。</li><li>RIP不支持同一路由上的多条路径，这可能会产生更多的路由环路。在使用固定跳数指标选择最佳路由时，RIP在基于实时数据比较路由时无法工作。</li></ol><h3 id="ospf的优缺点"><a href="#ospf的优缺点" class="headerlink" title="ospf的优缺点"></a>ospf的优缺点</h3><p>OSPF（开放最短路径优先 ）是为了克服 RIP 的缺点而开发出来的。OSPF使用了 最短路径算法 SPF。使用OSPF协议需要有关复杂网络的高级知识。因此OSPF路由协议允许路由器根据传入请求计算路由。<br> OSPF的缺点是，当网络中添加了更多路由器时，它无法扩展。而OSPF缺乏可扩展性使其不适合在Internet上进行路由。</p><p>OSPF 具有以下特点：</p><p>向自治系统中的所有路由器发送信息。</p><p>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</p><p>只有当链路状态发生变化时，路由器才会发送信息。</p><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><a href="https://www.jianshu.com/p/2898dc090e1d">RIP协议”与“OSPF协议”的相同点与不同点是什么</a></p><h2 id="ospf多区域的配置"><a href="#ospf多区域的配置" class="headerlink" title="ospf多区域的配置"></a>ospf多区域的配置</h2><p><img src="/2021/10/16/ensp-xue-xi-di-san-dan-ospf/ospf_2_topo.jpg" alt="实验拓扑"></p><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><p>[AR1]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/0ip add 10.0.12.1 24int g 0/0/1ip add 10.0.13.1 24ospf 1 router-id 1.1.1.1area 0network 10.0.12.1 0.0.0.0qarea 1network 10.0.13.1 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR2]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/0ip add 10.0.12.2 24int g 0/0/2ip add 10.0.24.2 24ospf 1area 0network 10.0.12.2 0.0.0.0qarea 2network 10.0.24.2 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR3]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1ip add 10.0.13.3 24int g 0/0/2ip add 192.168.10.254 24ospf 1area 1network 10.0.13.3 0.0.0.0network 192.168.10.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR4]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/2ip add 10.0.24.4 24int g 0/0/0ip add 192.168.20.254 24ospf 1area 2network 192.168.20.0 0.0.0.255network 10.0.24.4 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/16/ensp-xue-xi-di-san-dan-ospf/ospf_2_pc1pingpc2.jpg" alt="pc1ping pc2结果"></p><h4 id="二、ospf和rip实现pc1和pc2与AR5上的loopback100-192-168-30-30-通信"><a href="#二、ospf和rip实现pc1和pc2与AR5上的loopback100-192-168-30-30-通信" class="headerlink" title="二、ospf和rip实现pc1和pc2与AR5上的loopback100 192.168.30.30 通信"></a>二、ospf和rip实现pc1和pc2与AR5上的loopback100 192.168.30.30 通信</h4><p>[AR4]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1ip add 10.0.45.4 24rip 1vresion 2network 10.0.0.0import-route ospf 1ospf 1import route rip 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[AR5]</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">int g 0/0/1ip add 10.0.45.5 24int loopback 100ip add 192.168.30.30 24rip 1version 2network 10.0.0.0network 192.168.30.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![pc1ping AR5](ensp学习第三弹ospf.assets/ospf_2_pc1ping AR5.jpg)![pc2ping AR5](ensp学习第三弹ospf.assets/ospf_2_pc2ping AR5.jpg)</p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp学习第二弹ipv4</title>
      <link href="2021/10/16/ensp-xue-xi-di-er-dan-ipv4/"/>
      <url>2021/10/16/ensp-xue-xi-di-er-dan-ipv4/</url>
      
        <content type="html"><![CDATA[<p>配置的示例图<br><img src="/2021/10/16/ensp-xue-xi-di-er-dan-ipv4/1.jpg" alt="ensp截图"><br>第一步进行改名<br>sysname R1<br>注意这个要在那个系统视图下进行改名操作<br>针对于个个端口进行IP 分配  </p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">interface GigabitEthernet 0/0/1     ip address 10.0.13.1 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>个个端口如果配置的灭有错误，那么用ping 10.0.12.2去ping其他的路由器是可以访问的到的<br>下面进行loopBack0</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">interface LoopBack0  ip address  10.0.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>则会个设置完之后通过 ping -a是不能够ping通的只要是loopback接口是属于折别上的一个逻辑接口，物理上不存在，要关闭时要手动关闭<br>当三个loopback0接口配置完成之后， 要使用</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ip route-static 10.0.1.1 32 10.0.12.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面是出去的接口后面是进去的接口<br>还可以设置R1从R3有一跳到R2</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[R1]ip route-static 10.0.1.2 32 10.0.13.3 perference 100[R2]ip route-static 10.0.1.1 32 10.0.23.3 perference 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以配置默认路由到R2</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">ip route-static 0.0.0.0 0 10.0.12.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要注意他这个不再是255.255.255.255 即32 而是0.0.0.0 即0<br>在关闭端口之后该条线的等于断开 进入端口号</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">shutdownundo shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面附上老师在晚上讲的代码全部</p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">配置参考R1的配置#sysname R1#interface GigabitEthernet0/0/1ip address 10.0.13.1 255.255.255.0#interface GigabitEthernet0/0/3ip address 10.0.12.1 255.255.255.0#interface LoopBack0ip address 10.0.1.1 255.255.255.255#ip route-static 0.0.0.0 0.0.0.0 10.0.12.2ip route-static 10.0.1.3 255.255.255.255 10.0.13.3# returnR2的配置#sysname R2#interface GigabitEthernet0/0/3ip address 10.0.12.2 255.255.255.0 #interface GigabitEthernet0/0/4ip address 10.0.23.2 255.255.255.0 #interface LoopBack0ip address 10.0.1.2 255.255.255.255#ip route-static 10.0.1.1 255.255.255.255 10.0.12.1ip route-static 10.0.1.1 255.255.255.255 10.0.23.3 preference 100ip route-static 10.0.1.3 255.255.255.255 10.0.23.3#returnR3的配置#sysname R3#interface GigabitEthernet0/0/1ip address 10.0.13.3 255.255.255.0#interface GigabitEthernet00/3ip address 10.0.23.3 255.255.255.0 #interface LoopBack0ip address 10.0.1.3 255.255.255.255#ip route-static 10.0.1.1 255.255.255.255 10.0.13.1ip route-static 10.0.1.2 255.255.255.255 10.0.23.2#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp初体验</title>
      <link href="2021/10/14/ensp-chu-ti-yan/"/>
      <url>2021/10/14/ensp-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<p>下面进入正文，对ensp进行学习，学习过程的中的基本的命令<br><a href="https://blog.csdn.net/s15212790607/article/details/111499998?utm_source=app&amp;app_version=4.16.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">csdn博客-ensp的基本命令</a><br>现在是完成了两个路由器之间的相互访问 AR1的ip设置成10.10.10.1 24 ||AR2 的IP 10.10.10.3 24<br>中间的命令如下,ar1和ar2的命令是一样的但是两个都要设置<br>下面的是ar2的历史命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token number">10.10</span>.10.1sysdisplay thisdescription this interface connect to AR1-G0/0/0<span class="token function">ip</span> address <span class="token number">10.10</span>.10.3 <span class="token number">24</span>interface g <span class="token number">0</span>/0/0sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ping 10.10.10.1 结果如下<img src="/2021/10/14/ensp-chu-ti-yan/1.jpg" alt="结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ensp学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy爬取糗事百科段子</title>
      <link href="2021/09/08/scrapy-pa-qu-qiu-shi-bai-ke-duan-zi/"/>
      <url>2021/09/08/scrapy-pa-qu-qiu-shi-bai-ke-duan-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="scrpy基础"><a href="#scrpy基础" class="headerlink" title="scrpy基础"></a>scrpy基础</h1><p>今天是复习前几天搞得scrapy爬虫框架学习<br>好长时间没有在搞了，属实是有一些东西给忘了<br>今天特地给复习一下，这是房价前所听课所作的笔记</p><pre class="line-numbers language-note" data-language="note"><code class="language-note">创建目录 scrapy startproject {firstblood}文件名在spider目录下创建一个爬虫源文件scrapy genspider {first} {www.XXX.com}这个可以是一个随便的网址，后续文件中是可以改的                                            {first}创建的爬虫源文件的名称scrapy crawl {first}创建的爬虫源文件名称ROBOTSTXT_OBEY = False要把这个设置成False要不然是得不到所想要的response响应信息scrapy crawl first --nolog只运行代爬虫源文件的输出信息但是可以通过添加到setting.py#显示指定的类型的日志信息LOG_LEVEL='ERROR'这样就可以把你爬虫源文件中的错误信息一同给报出来 这个你是用scrapy crawl first --nolog所不能够实现的所以还是建议使用添加LOG_LEVEL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对于一些导入item管道类要进行一下操作</p><p><img src="/2021/09/08/scrapy-pa-qu-qiu-shi-bai-ke-duan-zi/image-20211231164648436.png" alt="标记为 源根"></p><p>下面是爬取糗事百科的段子的qiubai.py的代码，运行要使用scrapy crawl qiubai</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QiubaiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'qiubai'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#数据解析的方法应该卸载这个里边</span>        <span class="token comment">#解析 作者的名称和段子内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        div_list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[1]/div/div[2]/div'</span><span class="token punctuation">)</span><span class="token comment">#跟etree是不一样的两个方法 但是用法是几乎一样的</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            <span class="token comment"># auther=div.xpath('./div[1]/a[2]/h2/text()')[0].extract()#这中间只有一个列表元素那么就是用[0]给他拿出来之后再进行读取</span>            auther <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#要想使用这个extract_first()那么你必须要保证你这个xpath对应的数据只有一个之这样才能用这个给这第0个给读取出来</span>            <span class="token comment">#.extact()可以将Selector中的data中的数据给读取出来</span>            content<span class="token operator">=</span>div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#文本之中要还是有子标签那就要使用双斜杠，要不然只能爬取第一个数据</span>            <span class="token comment">#如果这个中有很多元素，那么用.extract会返回一个列表那么就可以通过转换成字符串</span>            content<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token comment">#这个xpath返回的一定是一个列表，列表类型是一个Selector对象，那么我们应该获取data中的数据</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>auther<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间的xpath数据解析和那个etree中的xpath不是一个东西但是用法是一样的，要注意区别和是使用<br>主要区别就是etree中的xpath返回的是一个字符串，而scrapy中的xpath返回的是一个Selector类型，需要使用.extact()将其中的元素给读取出来<br>由于结果太长，我就只粘贴一组结果</p><pre class="line-numbers language-result" data-language="result"><code class="language-result">&lt;200 https://www.qiushibaike.com/text/&gt;乡村农民小哥哥早上10点登桂林尧山，观景平台上，一处卖岩蜜的，没错就是菜市场大家见过的，和石头一样的蜂蜜结晶，需要一把锋利的刀才能砍下来卖的，开始觉得新奇，买了20块钱一包，吃起来味道也有蜂蜜味道，不由感叹这桂林尧山产这些独特的风味小吃，风景优美，美食遍地，美女如林，真是一大美事！下午3点，开始拉肚子，网络一查，所谓岩蜜都是糖和各种料制作的假货，新闻早就曝光过……在这里我就想问一下，那个锋利的砍岩石刀在哪可以买得到？！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h1><h2 id="基于终端命令"><a href="#基于终端命令" class="headerlink" title="基于终端命令"></a>基于终端命令</h2><p>接下来进行持久化存储 这一共分为两种<strong>一个是通过终端指令</strong></p><pre class="line-numbers language-order" data-language="order"><code class="language-order">scrapy crawl qiubai -o ./qiubai.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个文件名为qiubai 存储的文件名为 qiubai.csv 而且文件类型只能是特定类型，不能是txt类型</p><h2 id="基于管道1"><a href="#基于管道1" class="headerlink" title="基于管道1"></a>基于管道1</h2><p>**items.py **定义相关的属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">QiubaiproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>pipelines.py</strong> 专门用来处理item对象的</p><p>在管道类中的process_item</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">QiubaiproPipeline</span><span class="token punctuation">:</span>    fp<span class="token operator">=</span><span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始爬虫"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./qiubai.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment">#专门用来处理item类型对象</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#该方法可以接受爬虫文件提交过来的item对象</span>    <span class="token comment">#该方法没接收到一个item就会被调用一次</span>        author<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span>        content<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>author<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token comment">#item #就会传递给下一个即将执行的管道类</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束爬虫'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>settings.py</strong>在配置文件中开启管道（默认情况下是不开启管道的）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'qiubaipro.pipelines.QiubaiproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token triple-quoted-string string">'''开启管道   300表示的是优先级，数值越小的优先级越高'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>qiubai.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> qiubaipro<span class="token punctuation">.</span>items <span class="token keyword">import</span> QiubaiproItem<span class="token keyword">class</span> <span class="token class-name">QiubaiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'qiubai'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token comment"># def parse(self, response):#数据解析的方法应该卸载这个里边</span>    <span class="token comment">#     #解析 作者的名称和段子内容</span>    <span class="token comment">#     print(response)</span>    <span class="token comment">#     all_data=[]</span>    <span class="token comment">#     div_list=response.xpath('/html/body/div[1]/div/div[2]/div')#跟etree是不一样的两个方法 但是用法是几乎一样的</span>    <span class="token comment">#     for div in div_list:</span>    <span class="token comment">#         # auther=div.xpath('./div[1]/a[2]/h2/text()')[0].extract()#这中间只有一个列表元素那么就是用[0]给他拿出来之后再进行读取</span>    <span class="token comment">#         author = div.xpath('./div[1]/a[2]/h2/text()').extract_first()#要想使用这个extract_first()那么你必须要保证你这个xpath对应的数据只有一个之这样才能用这个给这第0个给读取出来</span>    <span class="token comment">#         #.extact()可以将Selector中的data中的数据给读取出来</span>    <span class="token comment">#         content=div.xpath('./a[1]/div/span//text()').extract()#文本之中要还是有子标签那就要使用双斜杠，要不然只能爬取第一个数据</span>    <span class="token comment">#         #如果这个中有很多元素，那么用.extract会返回一个列表那么就可以通过转换成字符串</span>    <span class="token comment">#         content=''.join(content)</span>    <span class="token comment">#         #这个xpath返回的一定是一个列表，列表类型是一个Selector对象，那么我们应该获取data中的数据</span>    <span class="token comment">#         print(author,content)</span>    <span class="token comment">#</span>    <span class="token comment">#         dic={</span>    <span class="token comment">#             'auther':author,</span>    <span class="token comment">#             'content':content</span>    <span class="token comment">#         }</span>    <span class="token comment">#         all_data.append(dic)</span>    <span class="token comment">#         ##持久化存储 基于终端命令</span>    <span class="token comment">#     return all_data</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#数据解析的方法应该卸载这个里边</span>        <span class="token comment">#解析 作者的名称和段子内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        all_data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        div_list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[1]/div/div[2]/div'</span><span class="token punctuation">)</span><span class="token comment">#跟etree是不一样的两个方法 但是用法是几乎一样的</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            <span class="token comment"># auther=div.xpath('./div[1]/a[2]/h2/text()')[0].extract()#这中间只有一个列表元素那么就是用[0]给他拿出来之后再进行读取</span>            author <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()|./div[1]/span/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#要想使用这个extract_first()那么你必须要保证你这个xpath对应的数据只有一个之这样才能用这个给这第0个给读取出来</span>            <span class="token comment"># 加了一组xpath解析就是为了找到匿名用户的信息</span>            <span class="token comment">#.extact()可以将Selector中的data中的数据给读取出来</span>            content<span class="token operator">=</span>div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#文本之中要还是有子标签那就要使用双斜杠，要不然只能爬取第一个数据</span>            <span class="token comment">#如果这个中有很多元素，那么用.extract会返回一个列表那么就可以通过转换成字符串</span>            content<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token comment">#这个xpath返回的一定是一个列表，列表类型是一个Selector对象，那么我们应该获取data中的数据</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span>content<span class="token punctuation">)</span>            item<span class="token operator">=</span> QiubaiproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token operator">=</span>author            item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token operator">=</span>content            <span class="token keyword">yield</span> item<span class="token comment">#将item提交给了管道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于管道2"><a href="#基于管道2" class="headerlink" title="基于管道2"></a>基于管道2</h2><p>面试题：将爬虫爬取下来的数据，一份数据存到本地，一份数据存到数据库</p><p>保存到数据库和本地</p><p><strong>pipelines.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">import</span> sqlite3<span class="token keyword">class</span> <span class="token class-name">QiubaiproPipeline</span><span class="token punctuation">:</span>    fp<span class="token operator">=</span><span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始爬虫"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./qiubai.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token comment">#专门用来处理item类型对象</span>    <span class="token comment">#该方法可以接受爬虫文件提交过来的item对象</span>    <span class="token comment">#该方法没接收到一个item就会被调用一次</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        author<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span>        content<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>author<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token comment">#item 就会传递给下一个即将执行的管道类</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束爬虫'</span><span class="token punctuation">)</span><span class="token comment">############################################</span><span class="token comment">#管道文件中的一个管道类对应的数据存储到一个平台或者载体之中</span><span class="token keyword">class</span> <span class="token class-name">mysqlPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始爬虫"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"qiubai.db"</span><span class="token punctuation">)</span>        cur<span class="token operator">=</span>self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''create table if not exists qiubai(author primary key,content)'''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        author <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>cursor<span class="token operator">=</span>self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''insert into qiubai values(?,?)'''</span><span class="token punctuation">,</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"添加到数据库成功"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#数据回滚</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 爬虫文件提交的item类型的对象，最终会提交哪一个管道类：</span><span class="token comment"># 先执行的管道类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>settings.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'qiubaipro.pipelines.QiubaiproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>   <span class="token string">'qiubaipro.pipelines.mysqlPipeline'</span><span class="token punctuation">:</span> <span class="token number">301</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token triple-quoted-string string">'''开启管道   300表示的是优先级，数值越小的优先级越高'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-note" data-language="note"><code class="language-note">scrapy 持久化存储   --基于终端命令：        -要求： 只可以将parse方法 的返回值存储到本地的文本文件中，不能存储到数据库中        -注意： 持久化存储对应的文本文件的类型只可以为：'json','jsonlines','jl','csv','xml','marshal','pickle'        -指令： scrapy crawl XXX -o filePath        -好处： 他非常的高效便捷        -缺点： 局限性比较强（数据只能存储到指定后缀的我呢本文件中）   --基于管道：        -编码流程：            - 数据解析            - 在item类当中定义相关属性 （在item中）            - 将解析的数据封装存储到item类型的对象中            - 将item类型的对象提交给管道进行持久化存储的操作            - 在管道类中的process_item中将其接受到的item对象中存储的数据进行持久化存储操作   （在pipelines里边）            - 在配置文件中开启管道          --过程：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy crawl qiubai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_flask框架学习1</title>
      <link href="2021/07/22/python-flask-kuang-jia-xue-xi-1/"/>
      <url>2021/07/22/python-flask-kuang-jia-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="flask框架"><a href="#flask框架" class="headerlink" title="flask框架"></a>flask框架</h1><h2 id="基本的语法"><a href="#基本的语法" class="headerlink" title="基本的语法"></a>基本的语法</h2><h2 id="今天搞得是图片的显示"><a href="#今天搞得是图片的显示" class="headerlink" title="今天搞得是图片的显示"></a>今天搞得是图片的显示</h2><p>7/22<br>这里是python代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/&lt;int:id&gt;/mainpage'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mainpage</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    root_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>    img_path <span class="token operator">=</span> root_dir <span class="token operator">+</span> <span class="token string">'\static'</span> <span class="token operator">+</span> <span class="token string">'\images'</span>  <span class="token comment"># 图片文件存储在static文件夹下的images文件夹内</span>    files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>  <span class="token comment"># 获取图片文件名字</span>    <span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">"/static/images/"</span> <span class="token operator">+</span> files<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'image.html'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是html代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ file }}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>{% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这一点就是可以进行完成了图片的一个显示的一个功能<br>原文还定义了两个按键，用于向前和向后的翻页操作，我这个是老报错就没有再搞了<br>完成结果<br><img src="/2021/07/22/python-flask-kuang-jia-xue-xi-1/result.jpg" alt="result.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python_flask框架学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次网络实训</title>
      <link href="2021/06/18/wang-luo-shi-xun/"/>
      <url>2021/06/18/wang-luo-shi-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次网络实训"><a href="#记一次网络实训" class="headerlink" title="记一次网络实训"></a>记一次网络实训</h1><p>这次网络实训是使用python去完成的</p><h2 id="零比特填充"><a href="#零比特填充" class="headerlink" title="零比特填充"></a>零比特填充</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您要填充的标志字段'</span><span class="token punctuation">)</span>    <span class="token builtin">list</span><span class="token operator">=</span><span class="token number">0</span>    list_result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># add=''</span>    <span class="token comment"># index=0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> num<span class="token punctuation">:</span>        <span class="token comment"># index+=1</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">list</span> <span class="token operator">&gt;=</span><span class="token number">5</span><span class="token punctuation">:</span>                <span class="token builtin">list</span><span class="token operator">=</span><span class="token number">0</span>                list_result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>                list_result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>                <span class="token builtin">list</span><span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token builtin">list</span><span class="token operator">+=</span><span class="token number">1</span>                <span class="token comment"># add+=str(index)+'    '+str(i)+'   '</span>                list_result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">list</span><span class="token operator">=</span><span class="token number">0</span>            list_result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># print("add",add)</span>    result<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> list_result<span class="token punctuation">:</span>        result<span class="token operator">+=</span>item    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个就是零比特填充<br>在HDLC的帧结构中，若在两个标志字段之间的比特串中，碰巧出现了和标志字段F（01111110）一样的比特组合，那么就会误认为是帧的边界。为了避免出现这种情况，HDLC采用零比特填充法使一帧中两个F字段之间不会出现6个连续1</p><h2 id="海明码确认与创建"><a href="#海明码确认与创建" class="headerlink" title="海明码确认与创建"></a>海明码确认与创建</h2><h3 id="海明码确认"><a href="#海明码确认" class="headerlink" title="海明码确认"></a>海明码确认</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sure_haiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># for index in range(get_hiaming_id(num)):</span>        <span class="token comment">#print(type(index))</span>        <span class="token comment">#result+=return_Gn(num,index)*2**(index-1)</span>    num<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您要验证的海明码"</span><span class="token punctuation">)</span>    result<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">if</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>        result<span class="token operator">=</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">4</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span>        result <span class="token operator">=</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        result <span class="token operator">=</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        result <span class="token operator">=</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">:</span>        result<span class="token operator">=</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">5</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">4</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">:</span>        result<span class="token operator">=</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">6</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">5</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">4</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> get_hiaming_id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">:</span>        result<span class="token operator">=</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">7</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">6</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">5</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">4</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>return_Gn<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_hiaming_id</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">len</span><span class="token operator">=</span>num<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">elif</span> <span class="token number">2</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span>    <span class="token keyword">elif</span> <span class="token number">5</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">11</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">4</span>    <span class="token keyword">elif</span> <span class="token number">12</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">26</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">5</span>    <span class="token keyword">elif</span> <span class="token number">27</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">57</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span>    <span class="token keyword">elif</span> <span class="token number">58</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">120</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">7</span>    <span class="token keyword">elif</span> <span class="token number">121</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">247</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token keyword">def</span> <span class="token function">return_Gn</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span><span class="token number">0</span>    list_result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    start<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    end<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tiao <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> start<span class="token operator">&lt;=</span><span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> end <span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            end <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span><span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>                    list_result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                start<span class="token operator">=</span>end<span class="token operator">+</span>tiao                end<span class="token operator">=</span>start<span class="token operator">+</span>tiao                <span class="token keyword">if</span> end<span class="token operator">&gt;</span><span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    end<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> list_result<span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                result<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> result<span class="token operator">%</span><span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="海明码插入"><a href="#海明码插入" class="headerlink" title="海明码插入"></a>海明码插入</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_hiaming_id</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">len</span><span class="token operator">=</span>num<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">elif</span> <span class="token number">2</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span>    <span class="token keyword">elif</span> <span class="token number">5</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">11</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">4</span>    <span class="token keyword">elif</span> <span class="token number">12</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">26</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">5</span>    <span class="token keyword">elif</span> <span class="token number">27</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">57</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span>    <span class="token keyword">elif</span> <span class="token number">58</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">120</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">7</span>    <span class="token keyword">elif</span> <span class="token number">121</span><span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token operator">&lt;=</span><span class="token number">247</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token keyword">def</span> <span class="token function">build_haiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">str</span><span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您要创建海明码的01串"</span><span class="token punctuation">)</span>    str_1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    id_1<span class="token operator">=</span>get_hiaming_id<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    id_charu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>id_1<span class="token punctuation">)</span><span class="token punctuation">:</span>        id_charu<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span>i<span class="token punctuation">)</span>    <span class="token comment"># print('id_charu',id_charu)</span>    j<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>id_charu<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> id_charu<span class="token punctuation">:</span>            str_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            str_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment"># print(str_1)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>id_1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>str_1<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># print(i)</span>            str_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>build_p<span class="token punctuation">(</span>str_1<span class="token punctuation">,</span>i<span class="token punctuation">)</span>    result_return<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> str_1<span class="token punctuation">:</span>        result_return<span class="token operator">+=</span>item    <span class="token keyword">print</span><span class="token punctuation">(</span>result_return<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">build_p</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tiao <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> start <span class="token operator">&lt;=</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> end <span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            end <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            end<span class="token operator">=</span>end        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#print('start:',start-1,'end',end-1)</span>            list_result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>start<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            start <span class="token operator">=</span> end <span class="token operator">+</span> tiao            end <span class="token operator">=</span> start <span class="token operator">+</span> tiao            <span class="token keyword">if</span> end <span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                end <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        result<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> list_result<span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">==</span><span class="token string">" "</span><span class="token punctuation">:</span>                result<span class="token operator">+=</span><span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token operator">+=</span><span class="token builtin">int</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment"># print(result)</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="crc8代码实现"><a href="#crc8代码实现" class="headerlink" title="crc8代码实现"></a>crc8代码实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getyu</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> <span class="token number">0</span>    str1_new <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>            index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> index <span class="token operator">&gt;=</span> str2<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span> str1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>i <span class="token operator">-</span> index<span class="token punctuation">]</span><span class="token punctuation">:</span>                str1_new <span class="token operator">+=</span> <span class="token string">'0'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                str1_new <span class="token operator">+=</span> <span class="token string">'1'</span>        str1 <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> str1_new <span class="token operator">+</span> str1<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> str1<span class="token keyword">def</span> <span class="token function">crc8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str_all <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您要传输的信息"</span><span class="token punctuation">)</span>    str_ <span class="token operator">=</span> <span class="token string">''</span>    str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        str_ <span class="token operator">+=</span> <span class="token string">'0'</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> str_all<span class="token punctuation">:</span>        item <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> str_        str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    in_ <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> str_list<span class="token punctuation">:</span>        in_ <span class="token operator">+=</span> <span class="token number">1</span>        str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>        str2 <span class="token operator">=</span> <span class="token string">'100000111'</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            str1 <span class="token operator">=</span> getyu<span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span>            <span class="token keyword">if</span> str1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        str_send <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> str1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第{0}个元素的冗余码是{1},发送码是{2}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>in_<span class="token punctuation">,</span> str1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str_send<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="主代码展示"><a href="#主代码展示" class="headerlink" title="主代码展示"></a>主代码展示</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写时间2021/6/16;14:07</span><span class="token comment"># 编写  :刘钰琢</span><span class="token keyword">def</span> <span class="token function">bit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">sure_haiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">return_Gn</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">get_hiaming_id</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">build_haiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">build_p</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#零比特填充</span>    sure_haiming<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#验证海明码哪一步是错误的</span>    build_haiming<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#创建海明码</span>    crc8<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#crc8 实现</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12306模拟登录</title>
      <link href="2021/06/10/12306-mo-ni-deng-lu/"/>
      <url>2021/06/10/12306-mo-ni-deng-lu/</url>
      
        <content type="html"><![CDATA[<p>话不多说直接上代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写时间2021/6/8;19:57</span><span class="token comment"># 编写  :刘钰琢</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">from</span> chaojiying <span class="token keyword">import</span> Chaojiying_Client<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainschaojiying_path<span class="token operator">=</span><span class="token string">'C:\爬虫文件\Chaojiying_Python'</span>chrome_path<span class="token operator">=</span><span class="token string">'C:\爬虫文件\chromedriver.exe'</span><span class="token keyword">def</span> <span class="token function">get_code</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    chaojiying <span class="token operator">=</span> Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'userlyz'</span><span class="token punctuation">,</span> <span class="token string">'20010509liu'</span><span class="token punctuation">,</span> <span class="token string">'917379'</span><span class="token punctuation">)</span>  <span class="token comment"># 用户中心&gt;&gt;软件ID 生成一个替换 96001</span>    im <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span>    result<span class="token operator">=</span>chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">9004</span><span class="token punctuation">)</span> <span class="token comment"># 1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 print 后要加()</span>    <span class="token comment">#print(result)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>option<span class="token operator">=</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>drive<span class="token operator">=</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>bor<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'chromedriver.exe'</span><span class="token punctuation">,</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>bor<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># bor.execute_script("document.body.style.zoom='0.8'")</span><span class="token comment">#打开登录界面</span>bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://kyfw.12306.cn/otn/resources/login.html'</span><span class="token punctuation">)</span><span class="token comment">#进入网页</span>login<span class="token operator">=</span>bor<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"login-hd-account"</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#save_screenshot就是将当期那页面进行截图保存</span>code_img<span class="token operator">=</span>bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[2]/div[1]/div[2]/div[3]/div/div[4]/img'</span><span class="token punctuation">)</span>code_img_ele<span class="token operator">=</span>code_img<span class="token punctuation">.</span>screenshot<span class="token punctuation">(</span><span class="token string">'code.png'</span><span class="token punctuation">)</span>location_all<span class="token operator">=</span>code_img<span class="token punctuation">.</span>location<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span>location_all<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">'code.png'</span>result<span class="token operator">=</span>get_code<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token comment">#将验证码提交超级鹰</span>data<span class="token operator">=</span>result<span class="token punctuation">[</span><span class="token string">"pic_str"</span><span class="token punctuation">]</span>location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">'|'</span><span class="token keyword">in</span> data<span class="token punctuation">:</span>    items<span class="token operator">=</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span>    count_items<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count_items<span class="token punctuation">)</span><span class="token punctuation">:</span>        xy_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        x<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        location<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    xy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    location<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token comment">#遍历列表</span><span class="token keyword">for</span> loca <span class="token keyword">in</span> location<span class="token punctuation">:</span>    x<span class="token operator">=</span>loca<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    y<span class="token operator">=</span>loca<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ActionChains<span class="token punctuation">(</span>bor<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element_with_offset<span class="token punctuation">(</span>code_img<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>login_user<span class="token operator">=</span>bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J-userName"</span><span class="token punctuation">)</span>login_user<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'用户名'</span><span class="token punctuation">)</span>login_password<span class="token operator">=</span>bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J-password"</span><span class="token punctuation">)</span>login_password<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'密码'</span><span class="token punctuation">)</span>login_button<span class="token operator">=</span>bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J-login"</span><span class="token punctuation">)</span>login_button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间有很多插曲，比如说</p><h3 id="找不到验证码区域"><a href="#找不到验证码区域" class="headerlink" title="找不到验证码区域"></a>找不到验证码区域</h3><p>刚开始按照老师那个方法就是线截取全屏，之后在寻找那个验证码区域在进行二次截取<br>后来发现不太行，怎么该就是在左边左上角那一片区域<br>就看评论发现竟然可以直接截取验证码哪一个区域，然后我就在出阿宝工具里边找到验证码区域的一个xpath位置<br>对他直接进行截取</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">code_img</span><span class="token operator">=</span>bor.find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[2]/div[1]/div[2]/div[3]/div/div[4]/img'</span><span class="token punctuation">)</span><span class="token assign-left variable">code_img_ele</span><span class="token operator">=</span>code_img.screenshot<span class="token punctuation">(</span><span class="token string">'code.png'</span><span class="token punctuation">)</span><span class="token assign-left variable">location_all</span><span class="token operator">=</span>code_img.location<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这一个代码既可以得到他的位置也可以直接通过他进行截屏处理，真的是太nice，就像下边一样<br><img src="/2021/06/10/12306-mo-ni-deng-lu/code.png" alt="code.png"><br>那么接下来的填写数据也就是顺理成章的事情了，简直不要太简单<br>就是最后12306可能是发现用的是selenium登录的会给一个那个滑块去验证</p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车票管理系统</title>
      <link href="2021/06/09/che-piao-guan-li-xi-tong/"/>
      <url>2021/06/09/che-piao-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>那就直接上代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写时间2021/6/9;16:01</span><span class="token comment"># 编写  :刘钰琢</span><span class="token keyword">import</span> MySQLdb<span class="token keyword">class</span> <span class="token class-name">chepiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ch_num<span class="token punctuation">,</span> ch_start_ad<span class="token punctuation">,</span> ch_end_ad<span class="token punctuation">,</span> ch_start_time<span class="token punctuation">,</span> ch_end_time<span class="token punctuation">,</span> ch_length<span class="token punctuation">,</span> ch_money<span class="token punctuation">,</span> ch_speed<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ch_num <span class="token operator">=</span> ch_num        self<span class="token punctuation">.</span>ch_start_ad <span class="token operator">=</span> ch_start_ad        self<span class="token punctuation">.</span>ch_end_ad <span class="token operator">=</span> ch_end_ad        self<span class="token punctuation">.</span>ch_start_time <span class="token operator">=</span> ch_start_time        self<span class="token punctuation">.</span>ch_end_time <span class="token operator">=</span> ch_end_time        self<span class="token punctuation">.</span>ch_length <span class="token operator">=</span> ch_length        self<span class="token punctuation">.</span>ch_money <span class="token operator">=</span> ch_money        self<span class="token punctuation">.</span>ch_speed <span class="token operator">=</span> ch_speed<span class="token keyword">class</span> <span class="token class-name">jilu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> buy_id<span class="token punctuation">,</span> ch_start_ad<span class="token punctuation">,</span> ch_end_ad<span class="token punctuation">,</span> ch_length<span class="token punctuation">,</span> p_name<span class="token punctuation">,</span> ch_money<span class="token punctuation">,</span> ch_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>buy_id <span class="token operator">=</span> buy_id        self<span class="token punctuation">.</span>ch_start_ad <span class="token operator">=</span> ch_start_ad        self<span class="token punctuation">.</span>ch_end_ad <span class="token operator">=</span> ch_end_ad        self<span class="token punctuation">.</span>ch_length <span class="token operator">=</span> ch_length        self<span class="token punctuation">.</span>p_name <span class="token operator">=</span> p_name        self<span class="token punctuation">.</span>ch_money <span class="token operator">=</span> ch_money        self<span class="token punctuation">.</span>ch_num <span class="token operator">=</span> ch_num<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql_begin<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        buy_id <span class="token operator">=</span> get_buy_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        buy_id <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        answer_main <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请问您要进行什么操作(1、购票，2、统计，3、打印,4、添加，其他、退出系统)"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> answer_main <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">or</span> answer_main <span class="token operator">==</span> <span class="token string">'购票'</span><span class="token punctuation">:</span>            buy<span class="token punctuation">(</span>buy_id<span class="token punctuation">)</span>            buy_id <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> answer_main <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token keyword">or</span> answer_main <span class="token operator">==</span> <span class="token string">'统计'</span><span class="token punctuation">:</span>            print_liuliang<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> answer_main <span class="token operator">==</span> <span class="token string">'3'</span> <span class="token keyword">or</span> answer_main <span class="token operator">==</span> <span class="token string">'打印'</span><span class="token punctuation">:</span>            print_piaoju<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> answer_main <span class="token operator">==</span> <span class="token string">'4'</span> <span class="token keyword">or</span> answer_main <span class="token operator">==</span> <span class="token string">'添加'</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                user_password<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入管理员密码"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> user_password<span class="token operator">==</span><span class="token string">'lyz'</span><span class="token punctuation">:</span>                    add<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            answer_quit <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'您是否要退出？y/n?'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> answer_quit <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token keyword">or</span> answer_quit <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------------------------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------欢迎使用车票订购系统--------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------1、购票-------------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------2、统计进站和出站流量-------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------3、打印票据信息------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------4、添加票据和车次-----------'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 购票</span>    <span class="token keyword">global</span> <span class="token builtin">str</span>    p_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您的姓名"</span><span class="token punctuation">)</span>    buy_id <span class="token operator">=</span> <span class="token builtin">id</span>    end_ad <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您要去的地方"</span><span class="token punctuation">)</span>    buy_sql <span class="token operator">=</span> <span class="token string">"select * from chepiao where ch_end_ad='"</span> <span class="token operator">+</span> end_ad <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> sql_chepiao<span class="token punctuation">(</span>buy_sql<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"还没有去这个地方的车辆，请联系管理员添加"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是车票的信息'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> items <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是第{0}辆车的车次信息'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            answer_buy <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您要选择的车次信息"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> answer_buy <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的车辆编号有误请重新输入"</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        chepiao_buy <span class="token operator">=</span> data<span class="token punctuation">[</span>answer_buy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># ('001', '郑州', '北京', '08:00', '10:25', 725, '309', 'G')</span>        ch_money<span class="token punctuation">,</span> ch_num<span class="token punctuation">,</span> ch_start_ad<span class="token punctuation">,</span> ch_end_ad<span class="token punctuation">,</span> ch_length <span class="token operator">=</span> chepiao_buy<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chepiao_buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chepiao_buy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \                                                              chepiao_buy<span class="token punctuation">[</span>                                                                  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chepiao_buy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>        lst <span class="token operator">=</span> <span class="token punctuation">[</span>buy_id<span class="token punctuation">,</span> ch_start_ad<span class="token punctuation">,</span> ch_end_ad<span class="token punctuation">,</span> ch_length<span class="token punctuation">,</span> p_name<span class="token punctuation">,</span> ch_money<span class="token punctuation">,</span> ch_num<span class="token punctuation">]</span>        <span class="token comment"># buy_id,ch_start_ad,ch_end_ad,ch_length,p_name,ch_money ,ch_num</span>        sql <span class="token operator">=</span> <span class="token string">"INSERT INTO jilu(buy_id,ch_start_ad,ch_end_ad,ch_length,p_name,ch_money ,ch_num)VALUES"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(sql)</span>        sql_jilu<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_liuliang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输出流量</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您是哟啊统计数据吗？"</span><span class="token punctuation">)</span>    end_ad <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您要统计的目的地"</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM `jilu` where ch_end_ad='"</span> <span class="token operator">+</span> end_ad <span class="token operator">+</span> <span class="token string">"'"</span>    data <span class="token operator">=</span> sql_chepiao<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的目的地并没有人去"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> items <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是第{0}条数据:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'去{0}的人数共有{1}人'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>end_ad<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_piaoju</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 打印票据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您是要打印的个人的凭据吗"</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您的姓名'</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"SELECT p_name,ch_money,buy_id,ch_num FROM `jilu` where p_name='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"'"</span>    data <span class="token operator">=</span> sql_jilu<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您并没有买过票"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> items <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是第{0}条数据:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sql_chepiao</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> design<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 车票数据库信息</span>    <span class="token triple-quoted-string string">'''    create table chepiao(    ch_num CHAR(10),    ch_start_ad CHAR(10),    ch_end_ad CHAR(10),    ch_start_time char(10),    ch_end_time char(10),    ch_length int,    ch_money char(15),    ch_speed char(2)    );    '''</span>    db <span class="token operator">=</span> MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"chepiaodinggou"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">if</span> design <span class="token operator">==</span> <span class="token string">'r'</span><span class="token punctuation">:</span>        all_data <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取完成'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> all_data    <span class="token keyword">elif</span> design <span class="token operator">==</span> <span class="token string">'w'</span><span class="token punctuation">:</span>        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"添加完成"</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">sql_jilu</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> design<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    create table jilu(    buy_id int primary key,    ch_start_ad char(10),    ch_end_ad char(10),    ch_length int,    p_name char(20),    ch_money char(15),    ch_num char(10)    )    '''</span>    db <span class="token operator">=</span> MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"chepiaodinggou"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">if</span> design <span class="token operator">==</span> <span class="token string">'r'</span><span class="token punctuation">:</span>        all_data <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取完成'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> all_data    <span class="token keyword">elif</span> design <span class="token operator">==</span> <span class="token string">'w'</span><span class="token punctuation">:</span>        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加完成'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">get_buy_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">'select buy_id from jilu '</span>    data <span class="token operator">=</span> sql_jilu<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>        lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    lst<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> lst<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> buy_id<span class="token punctuation">,</span> ch_start_ad<span class="token punctuation">,</span> ch_length<span class="token punctuation">,</span> ch_end_ad<span class="token punctuation">,</span> p_name<span class="token punctuation">,</span> ch_num<span class="token punctuation">,</span> ch_money    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        answer_add <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请问您想添加那个的呢1、票据记录，2、车票，其他、退出"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> answer_add <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">or</span> answer_add <span class="token operator">==</span> <span class="token string">'票据记录'</span><span class="token punctuation">:</span>            ji <span class="token operator">=</span> add_jilu<span class="token punctuation">(</span><span class="token punctuation">)</span>            lst1 <span class="token operator">=</span> <span class="token punctuation">[</span>ji<span class="token punctuation">.</span>buy_id<span class="token punctuation">,</span> ji<span class="token punctuation">.</span>ch_start_ad<span class="token punctuation">,</span> ji<span class="token punctuation">.</span>ch_end_ad<span class="token punctuation">,</span> ji<span class="token punctuation">.</span>ch_length<span class="token punctuation">,</span> ji<span class="token punctuation">.</span>p_name<span class="token punctuation">,</span> ji<span class="token punctuation">.</span>ch_money<span class="token punctuation">,</span> ji<span class="token punctuation">.</span>ch_num<span class="token punctuation">]</span>            <span class="token comment"># buy_id,ch_start_ad,ch_end_ad,ch_length,p_name,ch_money ,ch_num</span>            sql <span class="token operator">=</span> <span class="token string">"INSERT INTO jilu(buy_id,ch_start_ad,ch_end_ad,ch_length,p_name,ch_money ,ch_num)VALUES"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                <span class="token builtin">tuple</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token punctuation">)</span>            sql_jilu<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>            <span class="token comment"># sql_jilu(sql,'w')</span>        <span class="token keyword">elif</span> answer_add <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token keyword">or</span> answer_add <span class="token operator">==</span> <span class="token string">'车票'</span><span class="token punctuation">:</span>            ch <span class="token operator">=</span> add_chepiao<span class="token punctuation">(</span><span class="token punctuation">)</span>            lst2 <span class="token operator">=</span> <span class="token punctuation">[</span>ch<span class="token punctuation">.</span>ch_num<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_start_ad<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_end_ad<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_start_time<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_end_time<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_length<span class="token punctuation">,</span>                    ch<span class="token punctuation">.</span>ch_money<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_speed<span class="token punctuation">]</span>            sql <span class="token operator">=</span> <span class="token string">"INSERT INTO chepiao(ch_num,ch_start_ad,ch_end_ad,ch_start_time,ch_end_time,ch_length,ch_money,ch_speed)VALUES"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                <span class="token builtin">tuple</span><span class="token punctuation">(</span>lst2<span class="token punctuation">)</span><span class="token punctuation">)</span>            sql_chepiao<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>        <span class="token comment"># sql_chepiao(sql,'w')</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            answer_add_quit <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"您确定要退出，不在添加了吗？y/n?"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> answer_add_quit <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token keyword">or</span> answer_add_quit <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span><span class="token keyword">def</span> <span class="token function">add_jilu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> buy_id<span class="token punctuation">,</span> ch_start_ad<span class="token punctuation">,</span> ch_length<span class="token punctuation">,</span> ch_end_ad<span class="token punctuation">,</span> p_name<span class="token punctuation">,</span> ch_num<span class="token punctuation">,</span> ch_money    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入你要添加的内容，请不要留有空格'</span><span class="token punctuation">)</span>        buy_id <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"票据编号"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> buy_id <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        buy_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>buy_id<span class="token punctuation">)</span>        ch_start_ad <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"开始地"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ch_start_ad <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        ch_end_ad <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"目的地"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ch_end_ad <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        ch_length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"距离"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ch_length <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        p_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"订票人"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p_name <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        ch_money <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"票价"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ch_money <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        ch_num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"车次号"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ch_num <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">break</span>    ji <span class="token operator">=</span> jilu<span class="token punctuation">(</span>buy_id<span class="token punctuation">,</span> ch_start_ad<span class="token punctuation">,</span> ch_end_ad<span class="token punctuation">,</span> ch_length<span class="token punctuation">,</span> p_name<span class="token punctuation">,</span> ch_money<span class="token punctuation">,</span> ch_num<span class="token punctuation">)</span>    <span class="token keyword">return</span> ji<span class="token keyword">def</span> <span class="token function">add_chepiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num<span class="token punctuation">,</span> start_ad<span class="token punctuation">,</span> end_ad<span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">,</span> length<span class="token punctuation">,</span> money<span class="token punctuation">,</span> speed    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入你要添加的内容，请不要留有空格'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"车辆编号"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        start_ad <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"开始地"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> start_ad <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        end_ad <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"目的地"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> end_ad <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        start_time <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"发车时间"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> start_time <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        end_time <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"到达时间"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> end_time <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        length <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"距离"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>        money <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"票价"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> money <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        speed <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"车辆类型"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> speed <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">break</span>    ch <span class="token operator">=</span> chepiao<span class="token punctuation">(</span>num<span class="token punctuation">,</span> start_ad<span class="token punctuation">,</span> end_ad<span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">,</span> length<span class="token punctuation">,</span> money<span class="token punctuation">,</span> speed<span class="token punctuation">)</span>    <span class="token keyword">return</span> ch<span class="token keyword">def</span> <span class="token function">sql_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"select ch_num from chepiao"</span>    data <span class="token operator">=</span> sql_chepiao<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment"># print(data)</span>    data_true <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'002'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'003'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'004'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'005'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'006'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data <span class="token operator">==</span> data_true<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据库里边已经有数据了"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        end_ad_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        beijing <span class="token operator">=</span> chepiao<span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'郑州'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'08:00'</span><span class="token punctuation">,</span> <span class="token string">'10:25'</span><span class="token punctuation">,</span> <span class="token number">725</span><span class="token punctuation">,</span> <span class="token string">'309'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>        xian <span class="token operator">=</span> chepiao<span class="token punctuation">(</span><span class="token string">'002'</span><span class="token punctuation">,</span> <span class="token string">'郑州'</span><span class="token punctuation">,</span> <span class="token string">'西安'</span><span class="token punctuation">,</span> <span class="token string">'08:10'</span><span class="token punctuation">,</span> <span class="token string">'10:20'</span><span class="token punctuation">,</span> <span class="token number">511</span><span class="token punctuation">,</span> <span class="token string">'221'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>        shijiazhuang <span class="token operator">=</span> chepiao<span class="token punctuation">(</span><span class="token string">'003'</span><span class="token punctuation">,</span> <span class="token string">'郑州'</span><span class="token punctuation">,</span> <span class="token string">'石家庄'</span><span class="token punctuation">,</span> <span class="token string">'08:09'</span><span class="token punctuation">,</span> <span class="token string">'10:10'</span><span class="token punctuation">,</span> <span class="token number">427</span><span class="token punctuation">,</span> <span class="token string">'189'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>        jinan <span class="token operator">=</span> chepiao<span class="token punctuation">(</span><span class="token string">'004'</span><span class="token punctuation">,</span> <span class="token string">'郑州'</span><span class="token punctuation">,</span> <span class="token string">'济南'</span><span class="token punctuation">,</span> <span class="token string">'07:52'</span><span class="token punctuation">,</span> <span class="token string">'12:11'</span><span class="token punctuation">,</span> <span class="token number">473</span><span class="token punctuation">,</span> <span class="token string">'303'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>        taiyuan <span class="token operator">=</span> chepiao<span class="token punctuation">(</span><span class="token string">'005'</span><span class="token punctuation">,</span> <span class="token string">'郑州'</span><span class="token punctuation">,</span> <span class="token string">'太原'</span><span class="token punctuation">,</span> <span class="token string">'07:10'</span><span class="token punctuation">,</span> <span class="token string">'10:31'</span><span class="token punctuation">,</span> <span class="token number">509</span><span class="token punctuation">,</span> <span class="token string">'180'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span>        wuhan <span class="token operator">=</span> chepiao<span class="token punctuation">(</span><span class="token string">'006'</span><span class="token punctuation">,</span> <span class="token string">'郑州'</span><span class="token punctuation">,</span> <span class="token string">'武汉'</span><span class="token punctuation">,</span> <span class="token string">'07:57'</span><span class="token punctuation">,</span> <span class="token string">'09:55'</span><span class="token punctuation">,</span> <span class="token number">502</span><span class="token punctuation">,</span> <span class="token string">'244'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>        end_ad_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>beijing<span class="token punctuation">)</span>        end_ad_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xian<span class="token punctuation">)</span>        end_ad_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shijiazhuang<span class="token punctuation">)</span>        end_ad_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>jinan<span class="token punctuation">)</span>        end_ad_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>taiyuan<span class="token punctuation">)</span>        end_ad_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wuhan<span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> end_ad_lst<span class="token punctuation">:</span>            ch <span class="token operator">=</span> item            lst2 <span class="token operator">=</span> <span class="token punctuation">[</span>ch<span class="token punctuation">.</span>ch_num<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_start_ad<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_end_ad<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_start_time<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_end_time<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>ch_length<span class="token punctuation">,</span>                    ch<span class="token punctuation">.</span>ch_money<span class="token punctuation">,</span>                    ch<span class="token punctuation">.</span>ch_speed<span class="token punctuation">]</span>            sql <span class="token operator">=</span> <span class="token string">"INSERT INTO chepiao(ch_num,ch_start_ad,ch_end_ad,ch_start_time,ch_end_time,ch_length,ch_money,ch_speed)VALUES"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                <span class="token builtin">tuple</span><span class="token punctuation">(</span>lst2<span class="token punctuation">)</span><span class="token punctuation">)</span>            sql_chepiao<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"车次数据已经填入到数据库中"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫解析</title>
      <link href="2021/06/03/pa-chong-jie-xi/"/>
      <url>2021/06/03/pa-chong-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="今天主要整理python的三种解析方法"><a href="#今天主要整理python的三种解析方法" class="headerlink" title="今天主要整理python的三种解析方法"></a>今天主要整理python的三种解析方法</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>1、正则解析主要是以//.<em>和//.</em>?的两种从而获得想要获取的数据就比如说在分页爬取的时候中间的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt.*?&lt;/div&gt;'</span>img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是一个正则表达式的一个解析式 中间的(.*?)就是用来匹配你所要的内容。<br>主要就是是用python所提供的re模块用于实现正则表达式的操作，在操作的时候可以使用re提供的方法（search(),match(),findall()）进行字符串处理;<br>他们三个都有共同的参数<br>pattern:模式字符串<br>string:要进行匹配的字符串<br>flags:可选参数，表示标识位，用于控制匹配方式，如是否匹配字母大小写<br><img src="/2021/06/03/pa-chong-jie-xi/1.jpg" alt="1.jpg"></p><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>用于从字符串的开始位置进行匹配如果开始位置匹配成功择返回match对象，否则择返回None</p><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>用于整个字符串中搜索第一个匹配到的值，如果匹配成功则返回search对象，如果没有匹配成功则返回None</p><h3 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h3><p>用于匹配整个列表中所有符合正测表达式的字符串并一列表的形式返回，，没有则返回None<br>关于.<em>和.</em>?的区别<br>.表示匹配换行符之外的任何单字符，*表示零次或者多次，所以.<em>和在一起就是表示出现任意字符零次或者多次。如果没有?则表示贪婪模式<br>比如 a.<em>b他将会匹配最长的以a开始，以b结束的字符串<br>.</em>?表示懒惰模式<br>比如a.</em>?b将会匹配以a开始，以b结束匹配最短的且符合标准的字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写时间2021/5/6;20:03</span><span class="token comment"># 编写  :刘钰琢</span><span class="token comment"># 分页爬取</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./fenyelibs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./fenyelibs'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 设置一个通用的url模版</span>    url <span class="token operator">=</span> <span class="token string">'https://www.qiushibaike.com/imgrank/page/%d/'</span>    <span class="token comment"># pagenum=2</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Edg/90.0.818.51'</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pagenum <span class="token operator">=</span> item        new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>url <span class="token operator">%</span> pagenum<span class="token punctuation">)</span>        <span class="token comment"># print(new_url)</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt.*?&lt;/div&gt;'</span>        img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> img_src_list<span class="token punctuation">:</span>            new_src <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> src            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>new_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            img_name <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            img_path <span class="token operator">=</span> <span class="token string">'./fenyelibs/'</span> <span class="token operator">+</span> img_name            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">'下载完成'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成！！！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bs4解析"><a href="#bs4解析" class="headerlink" title="bs4解析"></a>bs4解析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写时间2021/5/11;19:52</span><span class="token comment"># 编写  :刘钰琢</span><span class="token comment"># 针对与bs4  实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</span><span class="token comment">#            通过调用BeautifulSoup对象中相关的属性或者办法进行标签定位</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./text.html'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment">#print(soup)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment">#soup.tagname 返回的是HTML中第一次出现的tagname对应的标签</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">)</span>    <span class="token comment">#soup.find()</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#相当于soup.div</span>    <span class="token comment">#属性定位</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------属性定位:\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'song'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------find_all:'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#select</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----select\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment">#某种选择器(id,class,标签...选择器)，返回的是一个列表 只要符合选择器的要求</span>    <span class="token comment">#层级选择器</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul &gt; li &gt; a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment">#&gt;是一个层级</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#空格表示多个层级</span>    <span class="token comment">#获取标签之间的文本数据  text 和get_text()可以获取标签中的所有文本内容</span>    <span class="token comment">#                     string只可以获取该标签下面的直系文本内容</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试一下'</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'song'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment">#获取标签中的属性值'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取标签中的属性值：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang&gt;ul a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他这中间会有find find_all select 三种查找的犯法<br>find是返回查找到的第一个值<br>find_all是返回查找到的所有值以列表形式返回<br>select 某种选择器(id,class,标签…选择器)，返回的是一个列表 只要符合选择器的要求<br>他在进行网页查找的时候要记得在他div的标签属性下加.使用&gt;进行下一个选项如果要跨级去中的话那就要是用空格</p><h2 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写时间2021/5/17;18:53</span><span class="token comment"># 编写  :刘钰琢</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello python!!'</span><span class="token punctuation">)</span>    <span class="token comment">#实例化一个etree对象，并且被解析的源码也加载到了该对象中</span>    tree<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'text.html'</span><span class="token punctuation">)</span>    <span class="token comment">#调用xpath</span>    r<span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div/text()'</span><span class="token punctuation">)</span><span class="token comment">#在HTML前边加一个/标识从根节点开始 后边的/标识一个层级</span>    <span class="token comment"># r=tree.xpath('/html//div')#//表示多个层级</span>    <span class="token comment">#r=tree.xpath('//div')#//标识可以从任意的位置去定位div标签</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token comment"># r1 = tree.xpath('//div[@class="sng"]/p[3]')</span>    <span class="token comment"># r2 = tree.xpath('//div[@class="sang"]/p[3]')  # 索引是从1开始的</span>    <span class="token comment"># # print(r1)</span>    <span class="token comment"># print(r2)</span>    r3<span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="tang"]//li[5]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#取文本用/text()</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>    r4<span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[7]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#/txet()获取的是标签中直系的文本内容</span>                                        <span class="token comment">#//text()获取的是标签中的非直系的内容</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r4<span class="token punctuation">)</span>    r5<span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li//text()'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> r5<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------'</span><span class="token punctuation">)</span>    r6<span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sang"]/img/@src'</span><span class="token punctuation">)</span><span class="token comment">#取属性值用/@sttrName 可以取到标签属性当中的文本内容</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个他就使用的是/进行分级的 要是要想跨级进行查找的话那就要使用//</p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理</title>
      <link href="2021/04/26/shi-jian-chu-li/"/>
      <url>2021/04/26/shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<p>事件处理总体上还是比较顺利的首先要导入一个tkinter.messagebox的一个类<br>用于显示提示信息，这一点尤为重要第一次他并没有去选择一个可以更改的一个messagebox显示的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tkinter.messagebox.showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"事件处理呀"</span>, <span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token string">"userlyz：userlyz.top!!!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就直接用的就是这一句话而且在那个类当中也并没有info<br>后来讲的就是显示的内容就是用的上面的传下来的一个info来显示主要就是这句代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">self.root.bind<span class="token punctuation">(</span><span class="token string">"&lt;Button-1&gt;"</span>,lambda event:self.event_header<span class="token punctuation">(</span>event,<span class="token string">"userlyz:userlyz.top"</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就是可以对想要显示的内容进行动态显示了我认为<br>还有就是他加了一个self这样就可以动态的添加某一些组件显示之外，还可以动态的取消某一些组件，或者修改某一些组件的内容<br>这也是一个比较方便的地方<br>源代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding=utf-8-*-</span><span class="token comment"># 时间:2021/4/25;20:14</span><span class="token comment"># 编写人:刘钰琢</span><span class="token keyword">import</span> tkinter<span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>messagebox  <span class="token comment"># 实现提示框的一个组件</span>LOGO_PATH <span class="token operator">=</span> <span class="token string">'resources/2.ico'</span>  <span class="token comment"># 文件路径`</span><span class="token comment"># LOGO_PATH='resources'+os.sep+'2.ico'</span>Img_path <span class="token operator">=</span> <span class="token string">'resources/tu.png'</span><span class="token keyword">class</span> <span class="token class-name">MainForm</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># root=tkinter.Tk()</span>        <span class="token comment"># root.title("lyz")</span>        <span class="token comment"># root.mainloop()</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个窗体</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'事件处理'</span><span class="token punctuation">)</span>  <span class="token comment"># 标题</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>iconbitmap<span class="token punctuation">(</span>LOGO_PATH<span class="token punctuation">)</span>  <span class="token comment"># 设置logo资源</span>        <span class="token comment"># 这里的ico文件不能直接更高后缀 要通过转移网站进行转到ico文件才可已实现</span>        <span class="token comment"># 要不然能运行时能运行，只是logo那一块只是会变成一块白板</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'800x600'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>minsize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>maxsize<span class="token punctuation">(</span><span class="token number">1750</span><span class="token punctuation">,</span> <span class="token number">883</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">[</span><span class="token string">'background'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"LightSlateGray"</span>        <span class="token comment"># 绑定一个鼠标单击的一个按键编码“&lt;Button-1&gt;”,事件对象自动传入</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;Button-1&gt;"</span><span class="token punctuation">,</span><span class="token keyword">lambda</span> event<span class="token punctuation">:</span>self<span class="token punctuation">.</span>event_header<span class="token punctuation">(</span>event<span class="token punctuation">,</span><span class="token string">"userlyz:userlyz.top"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示窗体</span>        <span class="token comment"># 这个都属于是python的默认形式</span>    <span class="token keyword">def</span> <span class="token function">event_header</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 事件处理方法</span>        Lable_text<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"userlyz:userlyz.top"</span><span class="token punctuation">,</span>                                 width<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">"#223011"</span><span class="token punctuation">,</span>                                 font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"#ffffff"</span><span class="token punctuation">)</span>        Lable_text<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#可以动态的添加某一些组件显示之外，还可以动态的取消某一些组件，或者修改某一些组件的内容</span>        tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"事件处理1"</span><span class="token punctuation">,</span> message<span class="token operator">=</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    MainForm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果是<img src="/2021/04/26/shi-jian-chu-li/1.jpg" alt="1.jpg"><br>这最后就是<img src="/2021/04/26/shi-jian-chu-li/2.jpg" alt="2.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>窗体显示</title>
      <link href="2021/04/25/chuang-ti-xian-shi/"/>
      <url>2021/04/25/chuang-ti-xian-shi/</url>
      
        <content type="html"><![CDATA[<p>显示结果<br><img src="/2021/04/25/chuang-ti-xian-shi/1.jpg" alt="1.jpg"><br>button显示的是<br><img src="/2021/04/25/chuang-ti-xian-shi/2.jpg" alt="2.jpg"><br>这个是可以点击的 主要是没有那个事件绑定所以没有啥事只有点击之后啥都没有啦<br>我每一部分都用的一个主程序<br>所以看着会比较乱但是不影响复习<br>源代码奉上</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding=utf-8-*-</span><span class="token comment"># 时间:2021/4/25;20:14</span><span class="token comment"># 编写人:刘钰琢</span><span class="token keyword">import</span> tkinterLOGO_PATH <span class="token operator">=</span> <span class="token string">'resources/2.ico'</span>  <span class="token comment"># 文件路径`</span><span class="token comment"># LOGO_PATH='resources'+os.sep+'2.ico'</span>Img_path <span class="token operator">=</span> <span class="token string">'resources/tu.png'</span><span class="token keyword">class</span> <span class="token class-name">MainForm</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># root=tkinter.Tk()</span>        <span class="token comment"># root.title("lyz")</span>        <span class="token comment"># root.mainloop()</span>        root <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个窗体</span>        root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'my frist tk'</span><span class="token punctuation">)</span>  <span class="token comment"># 标题</span>        root<span class="token punctuation">.</span>iconbitmap<span class="token punctuation">(</span>LOGO_PATH<span class="token punctuation">)</span>  <span class="token comment"># 设置logo资源</span>        <span class="token comment"># 这里的ico文件不能直接更高后缀 要通过转移网站进行转到ico文件才可已实现</span>        <span class="token comment"># 要不然能运行时能运行，只是logo那一块只是会变成一块白板</span>        root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'800x600'</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>minsize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>maxsize<span class="token punctuation">(</span><span class="token number">1750</span><span class="token punctuation">,</span> <span class="token number">883</span><span class="token punctuation">)</span>        root<span class="token punctuation">[</span><span class="token string">'background'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"LightSlateGray"</span>        <span class="token comment"># text = tkinter.Text(root, width=50, height=15, font=('微软雅黑', 20))</span>        <span class="token comment"># text.insert(tkinter.CURRENT, '刘钰琢：')  # tkinter.COURRENT="courent"</span>        <span class="token comment"># # 如果想要进行图片的加载一定要通过专属的组件类进行了路径的包装</span>        photo <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>Img_path<span class="token punctuation">)</span>        <span class="token comment"># text.image_create('end', image=photo)</span>        <span class="token comment"># # # label_photo = tkinter.Label(root, resources=photo)</span>        <span class="token comment"># # # label_text.pack()</span>        <span class="token comment"># text.pack()</span>        <span class="token comment"># # label_photo.pack()</span>        <span class="token comment"># # label_text.pack()</span>        button<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"吐了"</span><span class="token punctuation">,</span>image<span class="token operator">=</span>photo<span class="token punctuation">,</span>compound<span class="token operator">=</span><span class="token string">"bottom"</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示窗体</span>        <span class="token comment"># 这个都属于是python的默认形式</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    MainForm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>糗事百科图片爬取</title>
      <link href="2021/04/25/qiu-shi-bai-ke-tu-pian-pa-qu/"/>
      <url>2021/04/25/qiu-shi-bai-ke-tu-pian-pa-qu/</url>
      
        <content type="html"><![CDATA[<p>糗事百科趣图内容爬取<br>首先找到趣图的网址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://www.qiushibaike.com/imgrank/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用通用爬虫对网页整体数据进行爬取<br>对页面进行抓包工具处理发现在通过一步一步的往下找找到每一个图片的div<br>后来经过对比后发现每张图片的位置都是一样累<br>这样就可以通过这个地址进行爬取图片<br><img src="/2021/04/25/qiu-shi-bai-ke-tu-pian-pa-qu/1.jpg" alt="1.jpg"><br>然后就用聚焦爬虫针对网页中的图片进行爬取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">page_txt<span class="token operator">=</span>requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text   <span class="token comment">#这就获取到整整页面的数据</span>   <span class="token comment">#使用聚焦爬虫将页面中的所有的搝图进行爬去/提取</span>   ex<span class="token operator">=</span><span class="token string">'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt.*?&lt;/div&gt;'</span>   img_src_list<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span>page_txt<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个就找到了这个图片的url对url进行拼接，发现前面只是缺少一个https:<br>然后就是对图片的爬取<br>在持久化存储中<br>要每一个都要一个储存的名称这就运用到split中的分割字符串知己对最后一个进行分割<br>主要是他最后一个都是不一样的<br>最后给一个完成的信号就OK了<br>源代码送上</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding=utf-8-*-</span><span class="token comment"># 时间:2021/4/15;11:31</span><span class="token comment"># 编写人:刘钰琢</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./qiutulibs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./qiutulibs'</span><span class="token punctuation">)</span>    url<span class="token operator">=</span><span class="token string">'https://www.qiushibaike.com/imgrank/'</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.76'</span>    <span class="token punctuation">}</span>    <span class="token comment">#利用通用爬虫对整张页面进行爬取</span>    page_txt<span class="token operator">=</span>requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment">#这就获取到整整页面的数据</span>    <span class="token comment">#使用聚焦爬虫将页面中的所有的搝图进行爬去/提取</span>    ex<span class="token operator">=</span><span class="token string">'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt.*?&lt;/div&gt;'</span>    img_src_list<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span>page_txt<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment">#print(img_src_list)</span>    <span class="token keyword">for</span> src <span class="token keyword">in</span> img_src_list<span class="token punctuation">:</span>        <span class="token comment">#拼接处一个完整的url</span>        src<span class="token operator">=</span><span class="token string">'https:'</span><span class="token operator">+</span>src        <span class="token comment">#请求到图片的二进制数据</span>        img_date<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span>content        filename<span class="token operator">=</span>src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        imgpath<span class="token operator">=</span><span class="token string">'./qiutulibs/'</span><span class="token operator">+</span>filename        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgpath<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_date<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'已经下载完毕'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完毕了哦'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与继承</title>
      <link href="2021/04/06/han-shu/"/>
      <url>2021/04/06/han-shu/</url>
      
        <content type="html"><![CDATA[<p>主要是对函数的学习：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写人：刘钰琢</span><span class="token comment"># 编写日期：2021/1/30 16:17</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>brand<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>brand<span class="token operator">=</span>brand    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汽车已启动'</span><span class="token punctuation">)</span>car1<span class="token operator">=</span>Car<span class="token punctuation">(</span><span class="token string">'宝马X5'</span><span class="token punctuation">)</span>car1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>__age<span class="token operator">=</span>age<span class="token comment">#age不希望在类的外部去使用，所以加了两个_</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>student1<span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>student1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#在类的外部使用name, age</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">#print(student1.__age)__age不能单独使用</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>_Student__age<span class="token punctuation">)</span><span class="token comment">#在类的外部可以通过_Student__age进行访问</span><span class="token triple-quoted-string string">'''继承'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是继承部分：'</span><span class="token punctuation">)</span><span class="token comment">#继承的代码实现</span><span class="token keyword">class</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名:{0}，年龄：{1}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span>Persion<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>score<span class="token operator">=</span>scorestu<span class="token operator">=</span>Stu<span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>stu<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span>Persion<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>teachofyear<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>teachofyear<span class="token operator">=</span>teachofyeartea<span class="token operator">=</span>Tea<span class="token punctuation">(</span><span class="token string">'张麻子'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>tea<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#多继承</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment">#方法重写</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法重写"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名:{0}，年龄：{1}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span>Persion<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>score<span class="token operator">=</span>score    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#重写方法info</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#这样会先执行父类当中的info</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Stu重写方法后："</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token comment">#在执行子类当中的info</span>stu<span class="token operator">=</span>Stu<span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>stu<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span>Persion<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>teachofyear<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>teachofyear<span class="token operator">=</span>teachofyear    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Tea重写之后的"</span><span class="token punctuation">,</span><span class="token string">"教龄："</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>teachofyear<span class="token punctuation">)</span>tea<span class="token operator">=</span>Tea<span class="token punctuation">(</span><span class="token string">'张麻子'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>tea<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Liu</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'我的名字是{0}，今年{1}岁了'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>liu1<span class="token operator">=</span>Liu<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liu1<span class="token punctuation">)</span><span class="token comment">#默认会调用__str__()这样的方法</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'动物要吃东西'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'狗吃肉'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'猫吃鱼'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Persion</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'人吃五谷杂粮'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span>Persion<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token comment">#创建C类的对象</span>x<span class="token operator">=</span>C<span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token comment">#实例对象的属性字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token comment">#输出对象所属的类</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span><span class="token comment">#C类的父类类型的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__base__<span class="token punctuation">)</span><span class="token comment">#C类的第一个父类的元素（基类）</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span><span class="token comment">#类的层次结构</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#子类的列表</span>a<span class="token operator">=</span><span class="token number">20</span>b<span class="token operator">=</span><span class="token number">100</span>c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token comment">#两个整数类型的相加操作</span>d<span class="token operator">=</span>a<span class="token punctuation">.</span>__add__<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Yu</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token operator">+</span>other<span class="token punctuation">.</span>name    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>yu1<span class="token operator">=</span>Yu<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>yu2<span class="token operator">=</span>Yu<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span>s<span class="token operator">=</span>yu1<span class="token operator">+</span>yu2<span class="token comment">#实现了两个对象的加法运算（因为在Yu类当中 编写了__add__(self,other)的特殊算法</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s<span class="token operator">=</span>yu1<span class="token punctuation">.</span>__add__<span class="token punctuation">(</span>yu2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>yu1<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#__new__()用于创建对象</span><span class="token keyword">class</span> <span class="token class-name">Persion</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__new__()被调用执行，cls的id值为{0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        obj<span class="token operator">=</span><span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'创建对象的id为{0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> obj    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__init__被调用了self的id的值为{0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'object的这个类的对象id为：{0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Persion这个对象的id为：{0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>Persion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p1<span class="token operator">=</span>Persion<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'p1这个Persion类的实例对象的id：{0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#print(p1)</span><span class="token keyword">class</span> <span class="token class-name">Cpu</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Disk</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>disk<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu<span class="token operator">=</span>cpu        self<span class="token punctuation">.</span>disk<span class="token operator">=</span>disk<span class="token comment">#(1)变量的赋值</span>cpu1<span class="token operator">=</span>Cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>cpu2<span class="token operator">=</span>cpu1<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>cpu1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>cpu2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#(2)类的浅拷贝，只是原对象和拷贝对象会引用同一个引用对象，但是两者的内存地址是不相同的</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------'</span><span class="token punctuation">)</span>disk<span class="token operator">=</span>Disk<span class="token punctuation">(</span><span class="token punctuation">)</span>computer<span class="token operator">=</span>Computer<span class="token punctuation">(</span>cpu1<span class="token punctuation">,</span>disk<span class="token punctuation">)</span><span class="token keyword">import</span> copycomputer2<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>computer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>computer<span class="token punctuation">,</span>computer<span class="token punctuation">.</span>cpu<span class="token punctuation">,</span>computer<span class="token punctuation">.</span>disk<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>computer2<span class="token punctuation">,</span>computer2<span class="token punctuation">.</span>cpu<span class="token punctuation">,</span>computer2<span class="token punctuation">.</span>disk<span class="token punctuation">)</span><span class="token comment">#cpu和disk类的内存地址是一样的，但是computer的内存地址是不一样的</span><span class="token comment">#(3)深拷贝</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------'</span><span class="token punctuation">)</span>computer3<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>computer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>computer<span class="token punctuation">,</span>computer<span class="token punctuation">.</span>cpu<span class="token punctuation">,</span>computer<span class="token punctuation">.</span>disk<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>computer3<span class="token punctuation">,</span>computer3<span class="token punctuation">.</span>cpu<span class="token punctuation">,</span>computer3<span class="token punctuation">.</span>disk<span class="token punctuation">)</span><span class="token comment">#所有的computer，cpu,disk的内存地址都是不同的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    这一部分已经一个多月没有碰了已经算是所以还是哟啊多看看这个<br>    多多多多进行复习<p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典</title>
      <link href="2021/04/06/zi-dian/"/>
      <url>2021/04/06/zi-dian/</url>
      
        <content type="html"><![CDATA[<p>主要是对字典的学习：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写人：刘钰琢</span><span class="token comment"># 编写日期：2021/1/1318:26</span><span class="token comment"># 字典的操作字典的操作</span>score<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'zhangsan'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">:</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'zhangmazi'</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#第二种创建方式</span>std<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token comment">#创建空字典</span>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">#字典中元素的获取</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#print(score['hhah'])#在这个中如果没有就会直接报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'maliu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#None这是获取没有</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'dddd'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#会输出默认值，即99</span><span class="token comment">#获取所有的key</span>keys<span class="token operator">=</span>score<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#获取所有的value</span>values<span class="token operator">=</span>score<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#获取所有的key——values对</span>items<span class="token operator">=</span>score<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#转换之后的列表元素是由元组（()）组成</span><span class="token comment">#字典元素的遍历</span><span class="token keyword">for</span> item <span class="token keyword">in</span> score<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>score<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>score<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#字典</span><span class="token comment">#key不允许重复</span>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'zhang'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>d1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'zhang'</span><span class="token punctuation">,</span><span class="token string">'dname'</span><span class="token punctuation">:</span><span class="token string">'zhang'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token comment">#字典生成式</span>items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Fruits'</span><span class="token punctuation">,</span><span class="token string">'books'</span><span class="token punctuation">,</span><span class="token string">'Others'</span><span class="token punctuation">]</span>prices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span>d2<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>price <span class="token keyword">for</span> item<span class="token punctuation">,</span>price <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span>prices<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">#.upper是将他所有的变成大写</span><span class="token keyword">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="2021/04/06/lie-biao/"/>
      <url>2021/04/06/lie-biao/</url>
      
        <content type="html"><![CDATA[<p>主要是列表的学习：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写日期：2021/1/13 20:31</span><span class="token comment">#主要是对列表的复习</span><span class="token comment">##列表的创建</span>lst1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span>lst<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">##列表的增加append</span>lst1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment">#直接在后面添加一个元素，不能够添加两个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token comment">##列表的增加extend</span>lst1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment">#在末尾添加至少一个元素,也可以是一个列表，可以进行两个数列的合并</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token comment">##列表的添加insert</span>lst1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">#在指定的位置上添加一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token comment">##添加多个元素（切片）</span>lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>lst<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'切片第一次'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span>lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>lst<span class="token comment">#1的起始位置也是保留的，结束位置也是保留的，只覆盖中间的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'切片第二次'</span><span class="token punctuation">)</span><span class="token comment">#1是起始位置，2为结束位置，如果没有2则直接对后面进行删除不在保留，如果有2则保留2后面的包括二</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token comment">##列表的删除操作</span>lst1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span>lst<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除操作'</span><span class="token punctuation">)</span><span class="token comment">#remove</span>lst1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除第一次操作'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token comment">#一次只删除一个元素，重复元素只删除第一个</span><span class="token comment">#pop，1为索引位置如果删除索引位置上有元素，则可以直接删除如果没有则会报错，如果不写入1则是直接删除最后一个元素</span>lst1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除第二次操作'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token comment">#切片,对起始位置和结束位置中间进行删除，不保留其实位置，保留结束位置</span>lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除第三次操作'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment">#修改操作</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token comment">#一次修改一个值</span>lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一次修改'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token comment">#和之前的一样对起始位置进行操作，但是不对结束位置进行操作</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二次修改'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment">#clear 对列表进行清空处理但是还是存在列表输出时为空</span><span class="token comment">#del 删除列表处理，在输出列表会报错直接找不到列表</span><span class="token comment">#对列表进行排序操作</span><span class="token comment">#通常使用sort 和sorted进行排序</span><span class="token comment">#sort</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>lst<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一次排序'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>lst<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二次排序'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment">#sorted</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>lst1<span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一次排序'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span>lst2<span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二次排序'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst2<span class="token punctuation">)</span><span class="token comment">#我认为是查找操作,index函数可以查找出来所给的在列表中的索引位置</span>lst<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#对开始位置进行比对，对结束位置不进行操作</span><span class="token comment">#列表生成式</span>lst<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment">#结束：2021.1.13 21.27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元组</title>
      <link href="2021/04/06/yuan-zu/"/>
      <url>2021/04/06/yuan-zu/</url>
      
        <content type="html"><![CDATA[<p>主要是元组的学习：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写人：刘钰琢</span><span class="token comment"># 编写日期：2021/1/16 11:00</span><span class="token comment">#不可变序列，可变序列 可变：列表，字典  两次的输出id是一样的</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#不可变序列：字符串，元组  两次输出的id是不一样的</span>s<span class="token operator">=</span><span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token string">'world'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#元组的创建</span>t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token comment">#括号是可以省略不写的</span>t3<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">90</span>t4<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一种创建'</span><span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二次创建，省略小括号'</span><span class="token punctuation">,</span>t3<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第三次创建，单单一个元素时'</span><span class="token punctuation">,</span>t4<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token operator">=</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#要有两重括号，</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第四次创建，用内置函数：'</span><span class="token punctuation">,</span>t1<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>t2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment">#只有一个元素的时候要添加逗号</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第五次创建，单单一个元素时'</span><span class="token punctuation">,</span>t2<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#空列表，空字典，空元组的创建</span><span class="token comment">#空列表</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>lst1<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#空字典</span>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>d1<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#空元组</span>t6<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t7<span class="token operator">=</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空列表'</span><span class="token punctuation">,</span>lst<span class="token punctuation">,</span>lst1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空字典'</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>d1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空元组'</span><span class="token punctuation">,</span>t6<span class="token punctuation">,</span>t7<span class="token punctuation">)</span><span class="token comment">#元组的可变和不可变的部分</span>t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment">#10，和40属于不可变部分，但是在【20，30】是一个可变的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#所以说对[20，30]属于是可以进行增删改查操作的</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#增加还有extend</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中间列表后面添加一个元素'</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#排序，还有删除pop()填入索引，remove()填入</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对中间的列表进行逆序排序'</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合学习</title>
      <link href="2021/04/06/ji-he-xue-xi/"/>
      <url>2021/04/06/ji-he-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>集合的学习<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写人：刘钰琢</span><span class="token comment"># 编写日期：2021/1/20 12:05</span><span class="token comment">#集合的创建（只是在字典中没有value值）</span><span class="token comment">#第一种创建用{}</span>s<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">}</span>s1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#第二种创建方式用内置函数set() 集合无序 集合内容不可以重复</span>s2<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#集合的操作，增删改查操作</span><span class="token comment">#in 和not in</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------'</span><span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">not</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token comment">#增加操作add 一次添加一个元素和update一次至少添加一个元素</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s4<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">}</span>s<span class="token punctuation">.</span>update<span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#删除操作 remove discard pop clear</span>s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token comment">#删除元素如果存在则可以进行删除，如果不存在则进行报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token comment">#删除元素虽然不存在也不会进行报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#随机删除与一个元素</span><span class="token comment"># s.pop(400)#不能添加参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#集合之间的关系</span><span class="token comment">#两个集合是否相等</span>s<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span>s1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token operator">==</span>s1<span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token operator">!=</span>s1<span class="token punctuation">)</span><span class="token comment">#False</span><span class="token comment">#一个集合是否是另一个集合的子集,用内置函数issubset判断 前面是小的，后面是大的</span>s1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">}</span>s2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span>s3<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#False</span><span class="token comment">#一个集合是不是另一个集合的超集，用内置函数issuperset判断 前面是大的，后面是小的</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#False</span><span class="token comment">#两个集合是否有交集,用内置函数isdisjiont判断 False表示有交集，True表示没有交际</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#False</span>s4<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token comment">#集合的数学操作</span><span class="token comment">#交集操作,用内置函数intersection与&amp;是等价的 得到的就是交集 原原集合不变</span>s1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span>s2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token comment">#并集操作 用内置函数union与|是等价的，得到的就是交集  原原集合不变</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">|</span>s2<span class="token punctuation">)</span><span class="token comment">#差集操作 前-(前交后) 原原集合不变</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">-</span>s2<span class="token punctuation">)</span><span class="token comment">#对称差集 前并后-前交后</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">^</span>s2<span class="token punctuation">)</span><span class="token comment">#集合生成式</span>lst<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>s6<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于opencv+python的人脸识别</title>
      <link href="2021/04/06/ji-yu-opencv-python-de-ren-lian-shi-bie/"/>
      <url>2021/04/06/ji-yu-opencv-python-de-ren-lian-shi-bie/</url>
      
        <content type="html"><![CDATA[<p>今天下午对人脸识别的系列视频进行了一部分学习，到现在已经可以进行通过电脑滋生的摄像头进行人脸识别<br>    代码如下：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding=utf-8-*-</span><span class="token comment"># 时间:2021/4/6;17:33</span><span class="token comment"># 编写人:刘钰琢</span><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token comment">#import numpy as np</span><span class="token comment">#from matplotlib import pyplot as plt</span><span class="token keyword">def</span> <span class="token function">face_detect_demo</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">:</span>    gray<span class="token operator">=</span>cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>src<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    face_detector<span class="token operator">=</span>cv<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span><span class="token string">'C:\\opencv\\opencv\\sources\\data\\haarcascades\\haarcascade_frontalface_default.xml'</span><span class="token punctuation">)</span>    faces<span class="token operator">=</span>face_detector<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">,</span>scaleFactor<span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">,</span>minNeighbors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h <span class="token keyword">in</span> faces<span class="token punctuation">:</span>        cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        cv<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>src<span class="token punctuation">,</span>center<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>radius<span class="token operator">=</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>src<span class="token punctuation">)</span>cap<span class="token operator">=</span>cv<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    flag<span class="token punctuation">,</span>frame<span class="token operator">=</span>cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span>frame<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    face_detect_demo<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>frame<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token operator">==</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    其中face_detector=cv.CascadeClassifier(‘’)其中的是我自己下载的opencv安装包中的人脸识别默认方法<br>    其中有很多的方法比如<br>    <img src="/2021/04/06/ji-yu-opencv-python-de-ren-lian-shi-bie/1.jpg" alt="1.jpg"><br>    在学习过程中发现代码中的后两个import是没有用的所以我就自行的删了<br>    代码在运行过程中还是可以的，能在光充足的情况下是可以大致识别人脸的所在方位<br>    但是到现在为止还是不能对摄像头的视频进行连续的识别还要持续的进行输入才能转换下一帧有待进一步学习<p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>药监总局</title>
      <link href="2021/04/05/yao-jian-zong-ju/"/>
      <url>2021/04/05/yao-jian-zong-ju/</url>
      
        <content type="html"><![CDATA[<p>今天学习了爬取药品线管总局中的企业详细信息<br>    第一步就进行了网站的直接爬取代码如下：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 时间:2021/4/5;16:20</span><span class="token comment"># 编写人:刘钰琢</span><span class="token comment"># 药品监管总局</span><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://scxk.nmpa.gov.cn:81/xk/'</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.68'</span><span class="token punctuation">}</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>page_text<span class="token operator">=</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'药监总局.html'</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    这一部分直接显现了<br>    <img src="/2021/04/05/yao-jian-zong-ju/1.jpg" alt="1.jpg"><br>    经过多次对比发现只有ID是不一样的<br>    <a href="http://scxk.nmpa.gov.cn:81/xk/itownet/portal/dzpz.jsp?id=5eb10afc74a2462c8e86652ec8d90a48">http://scxk.nmpa.gov.cn:81/xk/itownet/portal/dzpz.jsp?id=5eb10afc74a2462c8e86652ec8d90a48</a><br>    所以用这个ID值可以从首页的ajax请求中的json串中获取<br>    <a href="http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById">http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</a><br>    这个是在网站的许可证详情页中抓包中找到的，而且这个URL只带了一组参数就是ID逐渐找到突破点<br>    还发现他是一个post传参 他的URL是一样的就只是ID的只是不一样的<br>    如果我们可以批量获取多家企业的ID后，就可以将ID和URL形成一个完整的详情页对应详情数据的Ajax请求的URL<br>    在这之后就进行了对比以及对详情那个页面进行抓包后发现他只携带一个参数而且每一个的url是一样的这就可以进行url和参数的拼接直接去爬取到想要的企业相关的详细信息<br>    <img src="/2021/04/05/yao-jian-zong-ju/2.jpg" alt="2.jpg"><br>    然后就是写代码了<br>    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding=utf-8-*-</span><span class="token comment"># 时间:2021/4/5;17:15</span><span class="token comment"># 编写人:刘钰琢</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'</span>    params<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token string">'page'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token comment">#这个应该是第一页</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">'15'</span><span class="token punctuation">,</span><span class="token comment">#一页显示了多少个数据这两个是可以修改的</span>        <span class="token string">'productName'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'conditionType'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'applyname'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'applysn'</span><span class="token punctuation">:</span><span class="token string">''</span>    <span class="token punctuation">}</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.68'</span>    <span class="token punctuation">}</span>    response_json_ids<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    id_lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> dic <span class="token keyword">in</span> response_json_ids<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        id_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#获取企业下详情数据</span>    all_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    url_inf<span class="token operator">=</span><span class="token string">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'</span>    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> id_lst<span class="token punctuation">:</span>        data<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token builtin">id</span>        <span class="token punctuation">}</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url_inf<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#print(response)</span>        all_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'药监局2.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>all_list<span class="token punctuation">,</span>fp<span class="token operator">=</span>fp<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了！！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    这第一步就是在上图2中的打开了抓包工具直接发现的之后就是在这个json数据中收集ID一共下一步使用<br>    在接下来的企业详情页面中进行访问就可以进行爬取到要求的页面了，在json网站对相应的数据进行json解析就收集到了<br>    企业的详情信息，致此药监局化妆品生产许可证企业信息爬取就结束了<p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>肯德基爬取</title>
      <link href="2021/03/31/ken-de-ji-pa-qu/"/>
      <url>2021/03/31/ken-de-ji-pa-qu/</url>
      
        <content type="html"><![CDATA[<p>今天晚上搞了一个作业，作业要求是爬取肯德基的餐厅查询：<br>    代码如下：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding=utf-8-*-</span><span class="token comment"># 时间:2021/3/31;20:13</span><span class="token comment"># 编写人:刘钰琢</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword'</span>    keyword<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您要查找的地址'</span><span class="token punctuation">)</span>    data<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'cname'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'pid'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'keyword'</span><span class="token punctuation">:</span>keyword<span class="token punctuation">,</span>        <span class="token string">'pageIndex'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span><span class="token string">'10'</span>    <span class="token punctuation">}</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.63'</span>    <span class="token punctuation">}</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    page_text<span class="token operator">=</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    filename<span class="token operator">=</span>keyword<span class="token operator">+</span><span class="token string">'.json'</span>    fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>page_text<span class="token punctuation">,</span>fp<span class="token operator">=</span>fp<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    这次的过程也是十分的曲折，显示代码能使但是一直是乱码，在之后就是一直是报错，在看完下面评论之后也是找到了标准答案<br>    经过对比我仍然感觉我的代码是是十分正确的<br>    <img src="/2021/03/31/ken-de-ji-pa-qu/1.jpg" alt="1.jpg"><br>    最后还是发现了问题就是在ua的时候 User-Agent我当时是是直接复制的所以一直也就没在关注这个事情<br>    这个也是十分的粗心而造成的问题<p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣电影分类排名爬取</title>
      <link href="2021/03/28/dou-ban-dian-ying-fen-lei-pai-ming-pa-qu/"/>
      <url>2021/03/28/dou-ban-dian-ying-fen-lei-pai-ming-pa-qu/</url>
      
        <content type="html"><![CDATA[<p>豆瓣电影分类排名爬取：<br>    今天晚上复习了一下python学习之百度翻译页面爬取<br>    复习成果已经写在上一个博客了<br>    这接下来就是requests模块学习之豆瓣电影分类排名进行数据爬取<br>    我本来以为这个学会之后就可以对豆瓣呀，网易云上面的歌曲进行爬取了<br>    开始学习之后标题给我整了一个豆瓣电影分类排名爬取<br>    但是还是太年轻了，原来事情没有那么简单<br>    下面就是一边听课一边编写的代码，后面有一个错误，以及解决过程<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding=utf-8-*-</span><span class="token comment"># 编写时间2021/3/28;19:28</span><span class="token comment"># 编写：刘钰琢</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#url=''#制定url</span>    <span class="token comment">#params={</span>     <span class="token comment">#   'kw':kw</span>    <span class="token comment">#}#在get函数中可以时制定kw关键字</span>    <span class="token comment">#headers={</span>     <span class="token comment">#   'User-Agent':''#对应ua检测的一个反反爬策略</span>    <span class="token comment">#}</span>    <span class="token comment">#response=requests.get(url=url,kwargs=kwargs,)</span>    <span class="token comment">#接下来就是requests模块练习之爬取豆瓣电影分类排行</span>    <span class="token comment">#import 模块时候已经添加完成</span>    <span class="token comment">#指定URl</span>    url<span class="token operator">=</span><span class="token string">'https://movie.douban.com/j/chart/top_list?'</span><span class="token comment">#问好后面的都是携带的参数i，我们可以使用字典的形式去添加参数</span>    <span class="token comment">#这一步就是要添加参数，记得要用字典的形式去添加参数</span>    param<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span>        <span class="token string">'interval_id'</span><span class="token punctuation">:</span><span class="token string">'100:90'</span><span class="token punctuation">,</span>        <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">''</span> <span class="token punctuation">,</span>        <span class="token string">'start'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token comment">#从豆瓣库中的第几部电影去取</span>        <span class="token string">'limit'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span><span class="token comment">#表示一次请求取出的个数时20</span>   <span class="token punctuation">}</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.63'</span>    <span class="token punctuation">}</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>param<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment">#这个时候我们就获取到了响应对象 这个响应对象的格式时一个json的数据类型</span>    lst_data<span class="token operator">=</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./douban.jdon'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>lst_data<span class="token punctuation">,</span>fp<span class="token operator">=</span>fp<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    这个错误吧就是<br>    <img src="/2021/03/28/dou-ban-dian-ying-fen-lei-pai-ming-pa-qu/11.jpg" alt="11.jpg"><br>    经过对比老师的代码，我看了好多地方都发想一样的<br>    后来我就再次打开抓包工具 中间的user_agent后面的内容是不能有空格的所以才会有这个问题，删除空格之后<br>    <img src="/2021/03/28/dou-ban-dian-ying-fen-lei-pai-ming-pa-qu/12.jpg" alt="12.jpg"><br>    最后也是成功了，但是不知道怎么啦，爬取的内容是无法分布到多行的有往后边多看了一点发现要用<br>    <a href="https://www.bejson.com/">https://www.bejson.com/</a> 这个去个格式化json代码最后也是成功显示<br>    <img src="/2021/03/28/dou-ban-dian-ying-fen-lei-pai-ming-pa-qu/13.jpg" alt="13.jpg"><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习之百度翻译网页破解</title>
      <link href="2021/03/28/python-pa-chong-xue-xi-zhi-bai-du-fan-yi-wang-ye-po-jie/"/>
      <url>2021/03/28/python-pa-chong-xue-xi-zhi-bai-du-fan-yi-wang-ye-po-jie/</url>
      
        <content type="html"><![CDATA[<p>下面就是我晚上复习百度翻译破解的代码：<br>    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> jsonpost_url<span class="token operator">=</span><span class="token string">'http://fanyi.baidu.com/sug'</span>kw_post<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#post请求参数处理，同get当中的那个params之中他是一样的都是用来传递参数的</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'kw'</span><span class="token punctuation">:</span>kw_post<span class="token punctuation">}</span><span class="token comment">#在请求参数之前要进行ua伪装</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'这里就先不写了，回去在补上'</span><span class="token punctuation">}</span><span class="token comment">#请求发送</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>post_url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment">#获取返回内容</span><span class="token comment">#response.txt=...这个酒会返回的是字符串类型的数据</span><span class="token comment">#response.json=...这个会返回的是obj （如果确认相应参数数据是json类型的，才可以使用json类型）</span><span class="token comment">#这个主要是从抓包工具中的headers中的Response headerszhongde content.typs:就可以看出来返回值的类型</span><span class="token comment">#只有这个返回值类型是json时才能使用response.json去获取返回职中的内容</span><span class="token comment">#要是用text就指挥室有返回一些字符串编码 切记</span>dic_obj<span class="token operator">=</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_obj<span class="token punctuation">)</span><span class="token comment">#直接输出去验证爬取的内容是否时对的</span>filename<span class="token operator">=</span>kw<span class="token operator">+</span><span class="token string">'.json'</span>fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./filename'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dic_obj<span class="token punctuation">,</span>fp<span class="token operator">=</span>fp<span class="token punctuation">,</span>ensure_ascli<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over,网页已经爬取'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    下面是以dog为例子代码的运行结果<br>    <img src="/2021/03/28/python-pa-chong-xue-xi-zhi-bai-du-fan-yi-wang-ye-po-jie/1.jpg" alt="1.jpg"><br>    如果返回出来的json代码是在一行的话直接ctrl+a 在Ctrl+alt+L<br>    对代码进行换行处理<br>    如果在控制台输出的话直接点击换行按钮进行换行<br>    <img src="/2021/03/28/python-pa-chong-xue-xi-zhi-bai-du-fan-yi-wang-ye-po-jie/2.jpg" alt="2.jpg"><br>    在代码最后面会有<br>    json.dump(dic_obj,fp=fp,ensure_ascii=False)这一行应该是想<br>    with open（filename,’w’,encoding=’utf-8’）as file<br>    file.write(dic_obj)我感觉应该是一样的<br>    并没有太大的区别<br>    至于那个json中的ensure_ascii=False就是不加输出就会是和你用text导出的时候是一样的都是都是一些ascii码<br>    所以这个是和encoding=’utf-8’是差不多一个意思吧<p></p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlserver安装</title>
      <link href="2021/03/27/sqlserver-an-zhuang/"/>
      <url>2021/03/27/sqlserver-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>SQL server 重装之后出现很多错误</p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlserver 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片上传</title>
      <link href="2021/03/25/tu-pian-shang-chuan/"/>
      <url>2021/03/25/tu-pian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<p>现在上传图片已经不再需要导入模块我的理解是这样的<br>比如说你要导入一个名字为a.jbg的图片就可以直接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>a.jpg<span class="token punctuation">]</span><span class="token punctuation">(</span>a.jpg<span class="token punctuation">)</span>to instert a.jpg.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/25/tu-pian-shang-chuan/b.jpg" alt="b.jpg">to instert b.jpg.<br>可以看到插件实在<br>hexo的根目录\node_modules\hexo-asset-image<br><img src="/2021/03/25/tu-pian-shang-chuan/a.jpg" alt="a.jpg">to instert a.jpg.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>下面是打包文件</p><p>第一种方法是可以直接进行打包然后把程序所需要的直接放到一个文件夹里边就可以运行了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pyinstaller <span class="token operator">-</span>F  <span class="token string">'需要打包文件的绝对路径'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_44737094/article/details/105970391">Python打包exe，以及解决闪退_Hi-King的博客-CSDN博客_python生成exe文件闪退</a></p><p>第二种方法是<br>def get_resource_path(relative_path):<br>    if getattr(sys,”frozen”,False):<br>        base_path=sys._MEIPASS#获取临时资源<br>    else:<br>        base_path=os.path.abspath(“.”)#获取当前路径<br>    return os.path.join(base_path,relative_path)<br>img1_path=get_resource_path(os.path.join(“resources”,”1.png”))<br>img2_path = get_resource_path(os.path.join(“resources”, “2.png”))<br>mp3_path = get_resource_path(os.path.join(“resources”, “background.mp3”))<br>这就是程序打包时要是需要其他文件时要进行的操作<br>当然要提前趣导入<br>import sys</p><p>打包第一步 pyi-makespec -F .py文件<br><img src="/2021/03/25/tu-pian-shang-chuan/c.jpg" alt="c.jpg"><br>更改.spec文件中的datas中的内容一般建议是设置成一样的不进行更改<br><img src="/2021/03/25/tu-pian-shang-chuan/e.jpg" alt="e.jpg"><br>第二部直接打包身份成的.spec文件 pyinstaller -F .spec文件<br><img src="/2021/03/25/tu-pian-shang-chuan/d.jpg" alt="d.jpg"></p><h1 id="搭建的gitee图床"><a href="#搭建的gitee图床" class="headerlink" title="搭建的gitee图床"></a>搭建的gitee图床</h1><p>本地图片临时地址</p><pre class="line-numbers language-note" data-language="note"><code class="language-note">..\\Typora\\typora-user-images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python（pycharm）安装qrcode等模块失败</title>
      <link href="2021/03/25/python-an-zhuang-qrcode-mo-kuai/"/>
      <url>2021/03/25/python-an-zhuang-qrcode-mo-kuai/</url>
      
        <content type="html"><![CDATA[<p>在了解<br><a href="https://github.com/sdushantha/wifipassword/blob/master/wifi_password/wifi_password.py">https://github.com/sdushantha/wifipassword/blob/master/wifi_password/wifi_password.py</a><br>文件复制到pycharm之后发现需要导入qrcode 和 colorama模块在安装时直接使用<br>pip insall qrcode时候会出现<br>Could not find a version that satisfies the requirement PIL<br>查阅csdn之后发现要输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> qrcode  -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python安装qrcode时截图如下<br><img src="/2021/03/25/python-an-zhuang-qrcode-mo-kuai/a.jpg" alt="a.jpg">to instert a.jpg.<br>安装colorama</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> colorama<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/25/python-an-zhuang-qrcode-mo-kuai/b.jpg" alt="b.jpg">to instert b.jpg.<br>使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/25/python-an-zhuang-qrcode-mo-kuai/c.jpg" alt="c.jpg">to instert c.jpg.<br>这时候直接进入pycharm看看能不能导入两个下载的库<br><img src="/2021/03/25/python-an-zhuang-qrcode-mo-kuai/d.jpg" alt="d.jpg">to instert d.jpg.<br>刚开始他也是不能导入的，老是下载失败于是我就都搜索到上卖弄的在python中下好，然后导入到pycharm中，但是路途还是不顺，一直都下再不成功，点击右边那个设置进入到如图界面点击下面那个Existing environmeent,然后直接选择你所下载的python中的python.exe文件就可以直接把你刚才下载的qrcode呀啥的导入发到pycharm之中<br><img src="/2021/03/25/python-an-zhuang-qrcode-mo-kuai/e.jpg" alt="e.jpg">to instert e.jpg.<br>这就算时吧您刚才python下载的库直接就可以再pycharm当中使用了</p>]]></content>
      
      
      
        <tags>
            
            <tag> python安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装包地址</title>
      <link href="2021/03/25/an-zhuang-bao-di-zhi/"/>
      <url>2021/03/25/an-zhuang-bao-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>内容待定！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string</title>
      <link href="2021/03/23/string/"/>
      <url>2021/03/23/string/</url>
      
        <content type="html"><![CDATA[<p>python学习在字符串部分的学习代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编写人：刘钰琢</span><span class="token comment"># 编写日期：2021/1/20 19:08</span><span class="token comment">#字符串的驻留机制</span>a<span class="token operator">=</span><span class="token string">'python'</span>b<span class="token operator">=</span><span class="token string">"python"</span>c<span class="token operator">=</span><span class="token triple-quoted-string string">'''python'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#python</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#python</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#python</span>a<span class="token operator">=</span><span class="token string">'abc%'</span>b<span class="token operator">=</span><span class="token string">"abc%"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token comment">#true</span><span class="token comment">#字符串的查询操作</span>s<span class="token operator">=</span><span class="token string">'hello,HEllo'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#9</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#9</span><span class="token comment">#print(s.index('k'))#会报错</span><span class="token comment">#print(s.rindex('k'))#会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#-1,如果没有find就会返回-1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#-1</span><span class="token comment">#字符串的大小写转换的方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#HELLO,HELLO，全部转化为大写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello,hello 全部转化为小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#HELLO,hELLO  把字符串所有的字符大写转大写 大写转小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#Hello,hello对第一个字符大写转小写 ,其余全部转化为小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#Hello,Hello 对每一个单词的第一个字符转化为大写其他转化为小写</span><span class="token comment">#字符串的各种对齐</span>s<span class="token operator">=</span><span class="token string">'hello,python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#****hello,python****居中对齐</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello,python******** 左对齐</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello,python 如果宽度小于字符串长度则，返回元字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello,python 如果不要填空符则直接填入空格</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#********hello,python 右对齐</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello,python 如果宽度小于字符串长度则，返回元字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#00000000hello,python 右对齐，会用0填充</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-8910'</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#-0008910</span><span class="token comment">#字符串的劈分</span><span class="token comment">#split 从左边开始劈分</span>s<span class="token operator">=</span><span class="token string">'hello world python'</span>lst<span class="token operator">=</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment">#['hello', 'world', 'python']</span>s1<span class="token operator">=</span><span class="token string">'hello|world|python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#['hello', 'world', 'python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">,</span>maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#['hello', 'world|python'] maxsplit可以限制划分几个部分</span><span class="token comment">#rsplit从右边开始劈分</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#['hello', 'world', 'python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">,</span>maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#['hello|world', 'python']</span><span class="token comment">#字符串判断的相关方法</span>s2<span class="token operator">=</span><span class="token string">'hello,python'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>isidentifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#False 判断字符串是否是合法字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">.</span>isidentifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'张三_'</span><span class="token punctuation">.</span>isidentifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'张三_123'</span><span class="token punctuation">.</span>isidentifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True 判断字符串是否全部都是有空字符组成</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'acasdc'</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True 判断字符串是否全部都是有字母组成</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True 判断字符串是否全部都是有十进制数字 罗马数字，汉子都不是</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'123四'</span><span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True 判断字符串是否全部都是有数字组成 罗马数字还有汉字都是</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'abc1'</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True 判断字符串是否全部都是有字母和s数字组成</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span><span class="token string">'张三123'</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token string">'abc！'</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#False !不是字母也不是数字</span><span class="token comment">#字符串的替换和合并</span>s3<span class="token operator">=</span><span class="token string">'hello,python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello,java</span>s4<span class="token operator">=</span><span class="token string">'hello,python,python,python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello,java,java,python</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hello|python|world</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#hellopythonworld</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#p*y*t*h*o*n</span><span class="token comment">#字符串的比较操作</span><span class="token comment">#可以使用比较运算符 &gt; &gt;= &lt; &lt;= == !=</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token operator">&gt;</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token operator">&gt;</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token comment">#False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#97 98 ord函数可以输出ascall码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#chr 可以和获取ascll所对应的字母或者数字</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'刘'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">21016</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># is 是比较id是否相同</span><span class="token comment">#字符串的切片操作</span><span class="token comment">#字符串不具备增删改查操作 切片操作会产生新的对象</span>s<span class="token operator">=</span><span class="token string">'hello,python'</span>s1<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">#由于没有指定起始位置，所以从索引为0开始</span>s2<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#由于没有指定结束位置，所以会结束到最后</span>s3<span class="token operator">=</span><span class="token string">'!'</span>news<span class="token operator">=</span>s1<span class="token operator">+</span>s3<span class="token operator">+</span>s2<span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#从一开始到结束限制的前一位结束，步长为一</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#可以没有开始也没有结束，但是又步长</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#从后开始，步长为一</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#格式化字符串</span><span class="token comment">#(1) %</span>name<span class="token operator">=</span><span class="token string">'张三'</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫%s,今年%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#(2) {}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫{0},今年{1}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#3(3) f-string</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'wojaio</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">,jinnian</span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%10d"</span><span class="token operator">%</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hhhhhhhhhh'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%10.3f"</span><span class="token operator">%</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token comment">#.3小数点后三位，总宽度为10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:.3}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#.3表示一共有三个数字</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10.3f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#10是宽度，.3f是小数点</span><span class="token comment">#字符串的编码转换 编码要和解码的格式要相同</span><span class="token comment">#编码</span>s<span class="token operator">=</span><span class="token string">'天涯共此时'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#在GBK编码格式中，一个中文占两个字节</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#在UTF-8编码格式中，一个中文占三个字节</span><span class="token comment">#解码</span>byte<span class="token operator">=</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>byte<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>byte<span class="token operator">=</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>byte<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#结束与 2021/1/22 19：18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token number">1961584955248</span>python <span class="token number">1961584955248</span>python <span class="token number">1961584955248</span><span class="token boolean">True</span><span class="token number">3</span><span class="token number">3</span><span class="token number">9</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>HELLO<span class="token punctuation">,</span>HELLOhello<span class="token punctuation">,</span>helloHELLO<span class="token punctuation">,</span>heLLOHello<span class="token punctuation">,</span>helloHello<span class="token punctuation">,</span>Hello<span class="token operator">**</span><span class="token operator">**</span>hello<span class="token punctuation">,</span>python<span class="token operator">**</span><span class="token operator">**</span>hello<span class="token punctuation">,</span>python<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>hello<span class="token punctuation">,</span>pythonhello<span class="token punctuation">,</span>python        <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>hello<span class="token punctuation">,</span>pythonhello<span class="token punctuation">,</span>python00000000hello<span class="token punctuation">,</span>python<span class="token operator">-</span><span class="token number">0008910</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world|python'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello|world'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token number">1</span> <span class="token boolean">False</span><span class="token number">2</span> <span class="token boolean">True</span><span class="token number">3</span> <span class="token boolean">True</span><span class="token number">4</span> <span class="token boolean">True</span><span class="token number">5</span> <span class="token boolean">True</span><span class="token number">6</span> <span class="token boolean">True</span><span class="token number">7</span> <span class="token boolean">True</span><span class="token number">8</span> <span class="token boolean">True</span><span class="token number">9</span> <span class="token boolean">True</span><span class="token number">10</span> <span class="token boolean">True</span><span class="token number">11</span> <span class="token boolean">True</span><span class="token number">12</span> <span class="token boolean">False</span>hello<span class="token punctuation">,</span>javahello<span class="token punctuation">,</span>java<span class="token punctuation">,</span>java<span class="token punctuation">,</span>pythonhello<span class="token operator">|</span>python<span class="token operator">|</span>worldhellopythonworldp<span class="token operator">*</span>y<span class="token operator">*</span>t<span class="token operator">*</span>h<span class="token operator">*</span>o<span class="token operator">*</span>n<span class="token boolean">True</span><span class="token boolean">False</span><span class="token number">97</span> <span class="token number">98</span>a b<span class="token number">21016</span>刘hello!pythonellohloptonohtyp<span class="token punctuation">,</span>ollehnohty我叫张三<span class="token punctuation">,</span>今年<span class="token number">20</span>我叫张三<span class="token punctuation">,</span>今年<span class="token number">20</span>wojaio张三<span class="token punctuation">,</span>jinnian20<span class="token number">20</span>hhhhhhhhhh<span class="token number">3.142</span><span class="token number">3.14</span><span class="token number">3.142</span><span class="token string">b'\xcc\xec\xd1\xc4\xb9\xb2\xb4\xcb\xca\xb1'</span><span class="token string">b'\xe5\xa4\xa9\xe6\xb6\xaf\xe5\x85\xb1\xe6\xad\xa4\xe6\x97\xb6'</span>天涯共此时天涯共此时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>学习心得: 日后在补充    </p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my fristboke</title>
      <link href="2021/03/22/my-fristboke/"/>
      <url>2021/03/22/my-fristboke/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客:"></a>第一篇博客:</h2><h3 id="ding"><a href="#ding" class="headerlink" title="ding"></a>ding</h3><pre><code>    记录一下 计蒜客信息学题库做题    python3.0+</code></pre><h3 id="做题结果"><a href="#做题结果" class="headerlink" title="做题结果"></a>做题结果</h3><pre><code>https://pan.baidu.com/s/1an5j03RXhqOEGJ-d5RpbKg提取码：0408</code></pre><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><pre><code>第68 69，救援和小球弹跳高度都没通过但是我仍然感觉我的算法时没有问题的，可能只是一些细节，定义没有搞好，或者时题意并没有理解这也是有待提升或者通过大量的练习去弥补，这方面的不足</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 计蒜客做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>404</title>
      <link href="404/index.html"/>
      <url>404/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="friends/index.html"/>
      <url>friends/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>contact</title>
      <link href="contact/index.html"/>
      <url>contact/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
